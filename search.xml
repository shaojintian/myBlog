<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>elasticsearch 入门1 </title>
    <url>/2020/01/09/elasticsearch-%E5%85%A5%E9%97%A81/</url>
    <content><![CDATA[<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p><code>use brew</code><br><br><a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a><br>##</p>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
  </entry>
  <entry>
    <title>async/await,Promise</title>
    <url>/2020/01/09/async-await-Promise/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> notification = <span class="keyword">new</span> Notification(&#123;</span><br><span class="line">                title: <span class="string">'任务结束'</span>,</span><br><span class="line">                body: <span class="string">'是否开始休息'</span>,</span><br><span class="line">                actions: [&#123; <span class="attr">text</span>: <span class="string">'开始休息'</span>, <span class="attr">type</span>: <span class="string">'button'</span> &#125;],</span><br><span class="line">                closeButtonText: <span class="string">'继续工作'</span></span><br><span class="line">            &#125;)</span><br><span class="line">            notification.show()</span><br><span class="line">            <span class="comment">// click '开始休息'</span></span><br><span class="line">            notification.on(<span class="string">'action'</span>,()=&gt;&#123;</span><br><span class="line">                resolve(<span class="string">'relex'</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">            notification.on(<span class="string">'close'</span>,()=&gt;&#123;</span><br><span class="line">                resolve(<span class="string">'work'</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">	<span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function()&#123;</span><br><span class="line">	let res = await new Promise((resolve,reject)=&gt;&#123;&#125;)</span><br><span class="line">    </span><br><span class="line">    ...other operations</span><br><span class="line">    return res</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>async必须返回一个promise对象<br>await表示必须等待当前promise执行完毕，再执行下面的所有操作<br>promise的（resolve/reject来表示成功/失败完成promise）</p>
<p><strong>也就是</strong>用promise的状态来指定何时完成await    <br><br><strong>也就是</strong>必须执行resolve/reject之后才继续往下走</p>
<p>所以意思就是必须执行click 通知的button才能往下走，阻塞通知栏等点击button</p>
]]></content>
  </entry>
  <entry>
    <title>vscode 自动补全设置settings.json</title>
    <url>/2020/01/09/vscode-%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E8%AE%BE%E7%BD%AEjson/</url>
    <content><![CDATA[<p>配置完如下操作后，如果想格式化代码，按command+s保存代码就会自动格式化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // vscode默认启用了根据文件类型自动设置tabsize的选项</span><br><span class="line">    "editor.detectIndentation": false,</span><br><span class="line">    // 重新设定tabsize</span><br><span class="line">    "editor.tabSize": 4,</span><br><span class="line">    // #值设置为true时，每次保存的时候自动格式化；值设置为false时，代码格式化请按shift+alt+F</span><br><span class="line">    "editor.formatOnSave": true,</span><br><span class="line">    // #每次保存的时候将代码按eslint格式进行修复</span><br><span class="line">    "eslint.autoFixOnSave": true,</span><br><span class="line">    // 添加 vue 支持</span><br><span class="line">    "eslint.validate": [</span><br><span class="line">        "javascript",</span><br><span class="line">        "javascriptreact",</span><br><span class="line">        &#123;</span><br><span class="line">            "language": "vue",</span><br><span class="line">            "autoFix": true</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    //  #让prettier使用eslint的代码格式进行校验</span><br><span class="line">    //  #去掉代码结尾的分号</span><br><span class="line">    "prettier.semi": false,</span><br><span class="line">    //  #使用带引号替代双引号</span><br><span class="line">    "prettier.singleQuote": true,</span><br><span class="line">    "prettier.tabWidth": 4,</span><br><span class="line">    //  #让函数(名)和后面的括号之间加个空格</span><br><span class="line">    "javascript.format.insertSpaceBeforeFunctionParenthesis": true,</span><br><span class="line">    // #这个按用户自身习惯选择</span><br><span class="line">    "vetur.format.defaultFormatter.html": "js-beautify-html",</span><br><span class="line">    // #让vue中的js按"prettier"格式进行格式化</span><br><span class="line">    "vetur.format.defaultFormatter.js": "prettier",</span><br><span class="line">    "vetur.format.defaultFormatterOptions": &#123;</span><br><span class="line">        "js-beautify-html": &#123;</span><br><span class="line">            // #vue组件中html代码格式化样式</span><br><span class="line">            "wrap_attributes": "force-aligned", //也可以设置为“auto”，效果会不一样</span><br><span class="line">            "wrap_line_length": 200,</span><br><span class="line">            "end_with_newline": false,</span><br><span class="line">            "semi": false,</span><br><span class="line">            "singleQuote": true</span><br><span class="line">        &#125;,</span><br><span class="line">        "prettier": &#123;</span><br><span class="line">            "semi": false,</span><br><span class="line">            "singleQuote": true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 格式化stylus, 需安装Manta's Stylus Supremacy插件</span><br><span class="line">    "stylusSupremacy.insertColons": false, // 是否插入冒号</span><br><span class="line">    "stylusSupremacy.insertSemicolons": false, // 是否插入分号</span><br><span class="line">    "stylusSupremacy.insertBraces": false, // 是否插入大括号</span><br><span class="line">    "stylusSupremacy.insertNewLineAroundImports": false, // import之后是否换行</span><br><span class="line">    "stylusSupremacy.insertNewLineAroundBlocks": false,</span><br><span class="line">    "prettier.useTabs": true,</span><br><span class="line">    "files.autoSave": "afterDelay",</span><br><span class="line">    "explorer.confirmDelete": false,</span><br><span class="line">    "diffEditor.ignoreTrimWhitespace": false,</span><br><span class="line">    "[javascript]": &#123;</span><br><span class="line">        "editor.defaultFormatter": "esbenp.prettier-vscode"</span><br><span class="line">    &#125;,</span><br><span class="line">    "editor.acceptSuggestionOnEnter": "off" // 两个选择器中是否换行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vscode</category>
      </categories>
  </entry>
  <entry>
    <title>后端面经</title>
    <url>/2019/12/12/%E5%90%8E%E7%AB%AF%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p><code>leetcode</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实现一个缓存队列</span><br><span class="line">二叉树的镜像</span><br><span class="line">区间覆盖 例 [1 3] [2 5] [3 6]能否覆盖[2 6]</span><br><span class="line">TOP K问题</span><br><span class="line"></span><br><span class="line">给定两个数组，求两个数组的交集，且重复多少次，就打印几次</span><br><span class="line">比如：[1,2,2,3,5,7]和[1,1,2,2,2,2,3,3,5,7,8]，结果[1,2,2,3,5,7]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">区间躲避问题，要躲避的区间是[2,5][4,6]，如果插入1，可以直接插到1，如果插入3，只能插到7，因为要避开上面两个区间，要求不申请额外空间</span><br><span class="line"></span><br><span class="line">两个链表的第一个相交结点</span><br><span class="line"></span><br><span class="line">400万条帖子数据，一台机器能处理10万条帖子，找到最近发布的1000条帖子</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">算法题目1：随机链表复制（秒了）</span><br><span class="line"></span><br><span class="line">给定一个链表，节点数据结构如下，除了包含一个next指针，还包含一个rand指针，随机指向链表的某一元素，或者为空指针，实现一个函数，深复制这个链表，要求空间复杂度O(1)。</span><br><span class="line"></span><br><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node* next;</span><br><span class="line">  Node* rand;</span><br><span class="line">&#125;</span><br><span class="line">算法题目2：滑动窗口算法（卡了蛮久）</span><br><span class="line"></span><br><span class="line">给定m个不重复的字符[a,b,c,d], 以及一个长度为n的字符串tbcacbdata, 问能否在这个字符串中找到应该长度为m的连续子串，使得这个子串刚好由上面m个字符组成，顺序无所谓，返回任意满足条件的一个子串的起始位置，未找到返回-1。比如上面的这个例子，acbd，返回3。要求优化到O(N)。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">股票利润1，2，3leetcode</span><br><span class="line"></span><br><span class="line">快速排序的原理、时间复杂度、空间复杂度</span><br></pre></td></tr></table></figure>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 红黑树是什么原理，为什么要用红黑树，不用其他树</span><br><span class="line">2. 实现hashmap-java</span><br><span class="line">https://blog.csdn.net/m0_37499059/article/details/80623438</span><br><span class="line">3. 平衡二叉树CRUD，时间复杂度</span><br></pre></td></tr></table></figure>
<h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p><code>go里面channel怎么实现？</code></br><br><code>go协程与java线程区别？</code></p>
<h2 id="内存模型和调优"><a href="#内存模型和调优" class="headerlink" title="内存模型和调优"></a>内存模型和调优</h2><h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><p>其实多读几遍这个书《深入理解JVM》，JVM那一块就OK了</p>
<h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ConcurrentHashMap,HashMap，HashTable</span><br><span class="line"></span><br><span class="line">StringBuilder和StringBuffer有什么区别</span><br><span class="line"></span><br><span class="line">CAS  Compare And Swap</span><br><span class="line"></span><br><span class="line">HashMap的扩容机制？存储的方式？hash后码相同时怎么处理？</span><br><span class="line"></span><br><span class="line">volatile和synchronized关键字</span><br><span class="line"></span><br><span class="line">== 和equals的区别？类的hashcode是什么？如果两个对象的hash码相同，equals一定为true吗？</span><br><span class="line"></span><br><span class="line">Java的IO模型？BIO、NIO、AIO概念和区别？</span><br></pre></td></tr></table></figure>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Java反射是什么？反射的用处？为什么要用Ioc这种方式？AOP了解过吗？AOP切面可以实现异步吗？</span><br></pre></td></tr></table></figure>
<h2 id="并发-1"><a href="#并发-1" class="headerlink" title="并发"></a>并发</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">自旋锁，可重入锁，偏向锁，锁粗化</span><br><span class="line"></span><br><span class="line">线程池是什么？怎么用？有什么好处？线程池的核心参数？</span><br><span class="line"></span><br><span class="line">如果超过线程池的任务上限怎么办？线程池中一个线程抛出异常，其他线程受影响吗？如果在try…catch…结构中，线程池中有3个线程抛出异常，catch运行几次，finally运行几次？</span><br><span class="line"></span><br><span class="line">介绍一下ThreadLocal？有什么用处？</span><br></pre></td></tr></table></figure>
<h2 id="内存模型和调优-1"><a href="#内存模型和调优-1" class="headerlink" title="内存模型和调优"></a>内存模型和调优</h2><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Java怎么加载类，（加载验证准备解析初始化使用卸载）</span><br><span class="line">双亲委派机制</span><br><span class="line">JVM内存结构</span><br><span class="line">OOM（内存溢出）的场景？堆和栈的一些区别？</span><br></pre></td></tr></table></figure>
<h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">垃圾回收算法</span><br></pre></td></tr></table></figure>
<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Spring的IOC原理，启动流程是什么，怎么加载Bean的</span><br><span class="line"></span><br><span class="line">AOP源码呢，你平时怎么学习Spring的</span><br><span class="line"></span><br><span class="line">Spring Boot的Bean是什么？调用接口时可以修改Bean吗？Bean有哪些种类？Bean的生命周期？</span><br><span class="line"></span><br><span class="line">Spring Boot的过滤器，拦截器？哪个在先哪个在后？</span><br></pre></td></tr></table></figure>
<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ORM框架用过哪些？Hibernates循环插入怎么会比较快？自定义SQL语句是什么意思？</span><br><span class="line"></span><br><span class="line">hibernate和mybatis区别？为什么要用hibernate？</span><br></pre></td></tr></table></figure>



<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">线程安全单例模式+测试</span><br></pre></td></tr></table></figure>



<h1 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL和MongoDB和redis的区别？</span><br></pre></td></tr></table></figure>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原理</span><br></pre></td></tr></table></figure>
<h3 id="熟练SQL的书写：leetocde数据库板块"><a href="#熟练SQL的书写：leetocde数据库板块" class="headerlink" title="熟练SQL的书写：leetocde数据库板块"></a>熟练SQL的书写：<code>leetocde数据库板块</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">手写SQL，join</span><br><span class="line">group by，order by ，distinct</span><br><span class="line">一条sql，数据库做了什么</span><br></pre></td></tr></table></figure>

<h3 id="索引和原理"><a href="#索引和原理" class="headerlink" title="索引和原理"></a>索引和原理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql的索引：B+树底层实现？B树的底层实现？为什么要用B+树而不用B树？</span><br><span class="line"></span><br><span class="line">组合索引，最左前缀</span><br><span class="line"></span><br><span class="line">聚簇索引，非聚簇索引</span><br></pre></td></tr></table></figure>

<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">什么是幻读，不可重复读？这些概念是在事务内还是事务外？ 答：事务内</span><br><span class="line">mysql怎么实现可重复读？设置了可重复读隔离级别底层是怎么实现的？ （MVCC）</span><br><span class="line">了解MVCC吗？怎么实现的？什么是快照读？快照读能读取到最新的吗？快照读和当前读的区别？</span><br></pre></td></tr></table></figure>
<h3 id="隔离"><a href="#隔离" class="headerlink" title="隔离"></a>隔离</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">四种隔离机制</span><br></pre></td></tr></table></figure>
<h3 id="innodb和myisam区别"><a href="#innodb和myisam区别" class="headerlink" title="innodb和myisam区别"></a>innodb和myisam区别</h3><h3 id="锁和并发"><a href="#锁和并发" class="headerlink" title="锁和并发"></a>锁和并发</h3><p><code>乐观锁和悲观锁</code></br></p>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主从：读写分离</span><br><span class="line">主备：冗余</span><br><span class="line">主主</span><br><span class="line">分区</span><br><span class="line">双活</span><br><span class="line">灾备</span><br></pre></td></tr></table></figure>

<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p><code>redis支持哪些数据类型；</code></br><br><code>redis中的字符串类型是怎么实现的；(SDS)</code></br></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">缓存击穿是什么？怎么解决？</span><br><span class="line">Redis 的过期策略、缓存雪崩、惰性删除</span><br></pre></td></tr></table></figure>

<h2 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h2><h1 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h1><h2 id="进线协程"><a href="#进线协程" class="headerlink" title="进线协程"></a>进线协程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进程间通信IPC</span><br><span class="line">中断机制</span><br><span class="line">上下文切换了什么，共享了什么</span><br><span class="line">进程独占了什么，切换时内核做了什么</span><br></pre></td></tr></table></figure>
<p><code>一个进程，有十个线程，其中一个线程fork后，子进程有几个线程</code></br><br><code>死锁是什么？如何避免死锁？</code></p>
<h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p><code>select ， poll ，epoll</code></br></p>
<h2 id="用户空间，内核空间"><a href="#用户空间，内核空间" class="headerlink" title="用户空间，内核空间"></a>用户空间，内核空间</h2><p><code>操作系统的调度算法</code></br></p>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">虚拟内存，物理内存，为什么这样分配？</span><br><span class="line"></span><br><span class="line">说下操作系统中页面置换算法</span><br><span class="line">答:先进先出，LRU</span><br><span class="line"></span><br><span class="line">说一下LRU，LRU在操作系统怎么实现？</span><br><span class="line"></span><br><span class="line">CopyOnWrite</span><br></pre></td></tr></table></figure>

<h1 id="network"><a href="#network" class="headerlink" title="network"></a>network</h1><h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">osi模型，各个层有哪些协议</span><br><span class="line">arp，rarp</span><br><span class="line">为还说呢么要有ip和mac，mac地址从何而来</span><br><span class="line"></span><br><span class="line">单点登录了解过吗？</span><br></pre></td></tr></table></figure>
<h2 id="I-O多路复用：select，poll，epoll"><a href="#I-O多路复用：select，poll，epoll" class="headerlink" title="I/O多路复用：select，poll，epoll"></a>I/O多路复用：select，poll，epoll</h2><h2 id="HTTP，TCP、UDP"><a href="#HTTP，TCP、UDP" class="headerlink" title="HTTP，TCP、UDP"></a>HTTP，TCP、UDP</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http是有状态还是无状态？</span><br><span class="line"></span><br><span class="line">TCP是有状态还是无状态？</span><br><span class="line"></span><br><span class="line">客户端禁用cookie怎么办？ 你说的实现方式安全吗？</span><br><span class="line"></span><br><span class="line">SSL，http和https，https是有状态还是无状态？</span><br><span class="line"></span><br><span class="line">浏览器输入一个地址到看到返回内容中间发生了什么？</span><br><span class="line"></span><br><span class="line">画出TCP的4次挥手过程，为什么需要四次，不能三次吗？</span><br><span class="line">答：当服务端接收到客户端的FIN数据报时，服务端可能还有需要发送的数据，因此FIN与ACK不能合并到一起发送。如果合并到一起发送，就不能确定服务器发送的数据，客户端是否接收到了。</span><br><span class="line"></span><br><span class="line">解释下TIME_WAIT, 为什么取值为2MSL</span><br><span class="line">答：2MSL刚好是数据报进行一个来回的时间，目的是为了确认服务端没有再次发送FIN；</span><br><span class="line"></span><br><span class="line">SSH登录，非对称加密</span><br></pre></td></tr></table></figure>
<p><code>http与https的区别 ?https中对称加密与非对称加密用在哪？</code></br><br><code>http长短连接原理，心跳机制，如果想一直连接怎么办？</code></br><br><code>什么叫字节流，什么叫数据报</code></br></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http2.0/1.x</span><br><span class="line"></span><br><span class="line">跨域</span><br><span class="line"></span><br><span class="line">问输入www.qq.com然后按下回车，浏览器作为客户端会发生什么？</span><br><span class="line">答：浏览器的DNS缓存 -&gt; 操作系统的DNS缓存 -&gt; host文件 -&gt; 本地DNS解析服务器</span><br><span class="line"></span><br><span class="line">TCP三次握手 -&gt; http传输数据 -&gt; html文件、css文件渲染</span><br><span class="line"></span><br><span class="line">第二次输入www.qq.com，和第一次有什么不同？</span><br><span class="line">DNS缓存、http/1.0下长链接复用、静态文件缓存、携带cookie</span><br></pre></td></tr></table></figure>

<h2 id="TCP粘包，半包，TCP优化和加速"><a href="#TCP粘包，半包，TCP优化和加速" class="headerlink" title="TCP粘包，半包，TCP优化和加速"></a>TCP粘包，半包，TCP优化和加速</h2><h2 id="session，cookies"><a href="#session，cookies" class="headerlink" title="session，cookies"></a>session，cookies</h2><p><code>多个服务器间共享session的解决方案</code></br><br><code>s</code></p>
<h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">websocket和http的区别</span><br></pre></td></tr></table></figure>

<h1 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设计题：关注系统怎么设计？</span><br><span class="line">- 可以关注、取关别人</span><br><span class="line">- 可以查看关注、粉丝列表</span><br><span class="line">- 可以查看关注、粉丝数</span><br><span class="line">- 快速判断两个人的关系</span><br><span class="line"></span><br><span class="line">单点登录</span><br></pre></td></tr></table></figure>

<h1 id="架构-1"><a href="#架构-1" class="headerlink" title="架构"></a>架构</h1><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><h2 id="可扩展"><a href="#可扩展" class="headerlink" title="可扩展"></a>可扩展</h2><h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><h2 id="RAFT"><a href="#RAFT" class="headerlink" title="RAFT"></a>RAFT</h2><h2 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a>分布式存储</h2><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><h2 id="服务配置：服务发现，服务注册"><a href="#服务配置：服务发现，服务注册" class="headerlink" title="服务配置：服务发现，服务注册"></a>服务配置：服务发现，服务注册</h2><p><code>一个服务怎么找到另外一个服务？服务之间的通信</code></p>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><h2 id="service-mesh"><a href="#service-mesh" class="headerlink" title="service mesh"></a>service mesh</h2><h2 id="grpc"><a href="#grpc" class="headerlink" title="grpc"></a>grpc</h2><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Jenkins自动化部署的流程？</span><br></pre></td></tr></table></figure>


<h1 id="虚拟化-amp-容器"><a href="#虚拟化-amp-容器" class="headerlink" title="虚拟化&amp;容器"></a>虚拟化&amp;容器</h1><h2 id="docker和k8s原理"><a href="#docker和k8s原理" class="headerlink" title="docker和k8s原理"></a>docker和k8s原理</h2><h2 id="k8s的集群搭建"><a href="#k8s的集群搭建" class="headerlink" title="k8s的集群搭建"></a>k8s的集群搭建</h2><h1 id="中台概念"><a href="#中台概念" class="headerlink" title="中台概念"></a>中台概念</h1><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p><code>linux常用命令。iftop，netstat，htop，apt，yum，source，corn，docker,top等等。</code></br></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">top 中的load指令</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有没有对自己开发的模块做过压测？如果让你去做压测，你会如何去做？</span><br></pre></td></tr></table></figure>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>JVM[二]:字节码</title>
    <url>/2019/12/12/JVM-%E4%BA%8C-%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JVM[一]:类的加载器</title>
    <url>/2019/12/12/JVM%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Linux cat &lt;&lt; EOF instruction</title>
    <url>/2019/12/12/Linux-cat-EOF-instruction/</url>
    <content><![CDATA[<h2 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; filename</span><br><span class="line">表示写入此文件多行数据,并覆盖</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &lt;&lt; EOF  &gt; ./demo.txt</span><br><span class="line">$ &gt; oneline</span><br><span class="line">$ &gt; secondline</span><br><span class="line">$ &gt; EOF</span><br></pre></td></tr></table></figure>
<h2 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt;&gt; filename</span><br><span class="line">表示追加多行数据到此文件</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-cluster  用三台阿里云服务器部署</title>
    <url>/2019/12/12/k8s-cluster-%E4%B8%89%E5%8F%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="k8s-cluster-三台云服务器部署"><a href="#k8s-cluster-三台云服务器部署" class="headerlink" title="k8s-cluster  三台云服务器部署"></a>k8s-cluster  三台云服务器部署</h1><h2 id="server-configuration"><a href="#server-configuration" class="headerlink" title="server configuration"></a>server configuration</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ubuntu 16.04</span><br><span class="line">1cpu </span><br><span class="line">2G internal memory</span><br></pre></td></tr></table></figure>

<h2 id="ips"><a href="#ips" class="headerlink" title="ips"></a>ips</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Master: root@139.196.254.25		   aliyun</span><br><span class="line">Node1: </span><br><span class="line">Node2: root@118.178.180.152        aliyun</span><br><span class="line"></span><br><span class="line">all login secrets are same</span><br></pre></td></tr></table></figure>

<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><ol>
<li><p>add kubeadm install path in apt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
</li>
<li><p>add k8s list</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &lt;&lt;EOF &gt; /etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li>
<li><p>install</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install kubernetes-cni=0.6.0-00</span><br><span class="line">  apt-get install kubelet=1.11.3-00</span><br><span class="line">  apt-get install kubectl=1.11.3-00</span><br><span class="line">  apt-get install kubeadm=1.11.3-00 </span><br><span class="line">  apt-get install docker.io</span><br></pre></td></tr></table></figure>
<h2 id="Config-Master"><a href="#Config-Master" class="headerlink" title="Config Master"></a>Config Master</h2></li>
<li><p>config kubeadm.yaml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir kubeadm  &amp;&amp; cd kubeadm</span><br><span class="line">&amp; cat &lt;&lt; EOF &gt; kubeadm.yaml</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha1</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  horizontal-pod-autoscaler-use-rest-clients: &quot;true&quot;</span><br><span class="line">  horizontal-pod-autoscaler-sync-period: &quot;10s&quot;</span><br><span class="line">  node-monitor-grace-period: &quot;10s&quot;</span><br><span class="line">apiServerExtraArgs:</span><br><span class="line">  runtime-config: &quot;api/all=true&quot;</span><br><span class="line">kubernetesVersion: &quot;stable-1.11&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li>
<li><p>init kubeadm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubeadm init --config kubeadm.yaml</span><br></pre></td></tr></table></figure>
<font color="red">
err:unable to get URL "https://dl.k8s.io/release/stable-1.11.txt": Get https://dl.k8s.io/release/stable-1.11.txt: dial tcp 35.201.71.162:443: i/o timeout</font></br></li>
<li><p>store init result</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sa</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Lab3B. Raft 日志压缩及数据快照</title>
    <url>/2019/11/23/Lab3B-Raft-%E6%97%A5%E5%BF%97%E5%8E%8B%E7%BC%A9%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BF%AB%E7%85%A7/</url>
    <content><![CDATA[<div class="post-body" itemprop="articleBody">





<pre><code>&lt;p&gt;总结 MIT6.824 Lab3B Log Compaction 实验笔记。&lt;/p&gt;</code></pre><p><a id="more"></a></p>
<h2 id="Lab3B"><a href="#Lab3B" class="headerlink" title="Lab3B"></a>Lab3B</h2><h3 id="日志过大的问题"><a href="#日志过大的问题" class="headerlink" title="日志过大的问题"></a>日志过大的问题</h3><p>在 3A 部分，<code>Put</code>/<code>Append</code>/<code>Get</code> 等命令的日志只通过 leader 流向 followers，来维护节点间 kvDB 数据的一致性。但随着 Client 请求的增多，各节点的日志将占用更多空间。日志过长会导致：</p>
<ul>
<li>当发生日志冲突时，follower 从头到尾查找冲突任期的首条日志将更耗时。</li>
<li>某节点因长时间的网络隔离导致日志过于落后，或新节点加入集群，replay 日志将更耗时。</li>
</ul>
<p>以上多种耗时操作最终会<strong>降低集群的可用性</strong>，本节目标就是想办法减少日志长度，将大小控制在可控范围内。</p>
<h3 id="日志压缩与数据快照"><a href="#日志压缩与数据快照" class="headerlink" title="日志压缩与数据快照"></a>日志压缩与数据快照</h3><p>参考论文第 7 节，Raft 最终选择快照机制来压缩日志大小，如下的 1-5 <strong>committed</strong> 状态的日志被压缩为快照，最终使长度为 7 的日志 = 长度为 2 的日志 + 快照数据。快照数据分为两部分：</p>
<ul>
<li>Raft 的快照元信息：LastIncludedIndex 与 LastIncludedTerm，用于生成快照后的 AppendEntries 一致性检查。</li>
<li><p>kvDB 的状态：生成快照时的数据库状态，用于节点重启后恢复数据。</p>
<p><a href="https://images.yinzige.com/2019-06-13-160714.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-06-13-160714.png" width="60%"></a></p>
</li>
</ul>
<p>如上，压缩日志的本质是用<strong>某条 committed 日志代替之前的所有 committed 日志</strong>。所以生成快照会删除 Raft 的日志：<code>raft.logs = rf.logs[snapshotIndex:]</code>，于是要回头修改 Lab2 中基于日志长度、取日志的操作，需要把快照索引的偏移量加回去。所以需要将快照信息放入 Raft 结构中：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Raft <span class="keyword">struct</span> {</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// snapshot</span></span><br><span class="line">    lastIncludedIndex <span class="keyword">int</span> <span class="comment">// the snapshot replaces all entries up through and including this index</span></span><br><span class="line">    lastIncludedTerm  <span class="keyword">int</span> <span class="comment">// term of lastIncludedIndex</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>添加几个公用的日志偏移量计算方法，并替换那些直接对 rf.logs 的读操作：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">getLog</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">LogEntry</span></span> {</span><br><span class="line">    <span class="keyword">return</span> rf.logs[i-rf.lastIncludedIndex]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">addIdx</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> {</span><br><span class="line">    <span class="keyword">return</span> rf.lastIncludedIndex + i</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">subIdx</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> {</span><br><span class="line">    <span class="keyword">return</span> i - rf.lastIncludedIndex</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">lastIdx</span><span class="params">()</span> <span class="title">int</span></span> {</span><br><span class="line">    <span class="keyword">return</span> rf.lastIncludedIndex + <span class="built_in">len</span>(rf.logs) - <span class="number">1</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">lastTerm</span><span class="params">()</span> <span class="title">int</span></span> {</span><br><span class="line">    <span class="keyword">return</span> rf.logs[<span class="built_in">len</span>(rf.logs)<span class="number">-1</span>].Term</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">logLength</span><span class="params">()</span> <span class="title">int</span></span> {</span><br><span class="line">    <span class="keyword">return</span> rf.lastIdx() + <span class="number">1</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="交互流程"><a href="#交互流程" class="headerlink" title="交互流程"></a>交互流程</h3><p><a href="https://images.yinzige.com/2019-06-12-013217.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-06-12-013217.png" alt="image-20190612093216321"></a></p>
<ol>
<li>任意节点都要实时检测 Raft 模块的日志大小。</li>
<li>若日志大小超过临界值，将 kvDB 数据发送给 Raft 模块用于生成快照。</li>
<li>Raft 将快照日志、kvDB 均持久化到 persister（模拟磁盘）</li>
<li>leader 在心跳时若发现有新快照则同步，切换 AppendEntries RPC 为 InstallSnaoshot RPC</li>
<li>follower 收到快照后，与本地快照及日志对比，决定进行日志覆盖或删除。</li>
<li>follower 将新快照数据持久化。</li>
<li>follower 将 leader 的快照数据回传给上层的 KVServer2，重置 kvDB 使状态机数据达成一致。</li>
</ol>
<h4 id="流程划分"><a href="#流程划分" class="headerlink" title="流程划分"></a>流程划分</h4><p> 1-2-3：各节点在日志过多时独立生成快照。leader 的存在是为了解决冲突维护日志的一致性，在 follower 生成快照时日志本身就是 <strong>committed</strong> 状态的，这并不违反强 leader 原则。</p>
<p>4-5-6-7：仅 leader 操作。它通过 InstallSnapshot 将自己的快照同步给各 follower，使日志过于落后的 follower 快速达成一致。</p>
<h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><ul>
<li><strong>TestSnapshotRPC3B</strong>：三个节点集群，若其中一个长时间网络隔离后重新加入集群，要能通过 InstallSnapshot RPC 加速日志回放，其他两个节点要能独立生成快照，使日志大小不超过 1000 字节。</li>
<li><strong>TestSnapshotRecover3B</strong>：节点重启后要能从 persister 中恢复快照数据。</li>
<li>其他测试：在网络分区、节点崩溃重启的环境下保持 kvDB 数据的线性一致性。</li>
</ul>
<p>测试通过：</p>
<p><a href="https://images.yinzige.com/2019-06-15-073120.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-06-15-073120.png" alt="image-20190615153120071"></a></p>
<h2 id="KVServer-生成快照"><a href="#KVServer-生成快照" class="headerlink" title="KVServer 生成快照"></a>KVServer 生成快照</h2><p>认真阅读并思考：<a href="https://pdos.csail.mit.edu/6.824/labs/lab-kvraft.html" target="_blank" rel="noopener">Lecture: Part B</a> 和 <a href="https://thesquareplanet.com/blog/students-guide-to-raft/#an-aside-on-optimizations" target="_blank" rel="noopener">Guide: An aside on optimizations</a></p>
<h3 id="快照数据"><a href="#快照数据" class="headerlink" title="快照数据"></a>快照数据</h3><p>kvServer 在重启后会先从 persister 中读取快照信息重置 kvDB，同时为检测 Client 的重复请求，所以必须将 <code>kv.cid2seq</code> 一起持久化：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kv *KVServer)</span> <span class="title">encodeSnapshot</span><span class="params">()</span> []<span class="title">byte</span></span> {</span><br><span class="line">    w := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">    e := gob.NewEncoder(w)</span><br><span class="line">    <span class="keyword">if</span> err := e.Encode(kv.cid2seq); err != <span class="literal">nil</span> {</span><br><span class="line">        <span class="built_in">panic</span>(fmt.Errorf(<span class="string">"encode cid2seq fail: %v"</span>, err))</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> err := e.Encode(kv.db); err != <span class="literal">nil</span> {</span><br><span class="line">        <span class="built_in">panic</span>(fmt.Errorf(<span class="string">"encode db fail: %v"</span>, err))</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> w.Bytes()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="检测-Raft-日志大小"><a href="#检测-Raft-日志大小" class="headerlink" title="检测 Raft 日志大小"></a>检测 Raft 日志大小</h3><p>每次 kvServer 的 Raft 模块通知它有新日志达成一致，就意味着 Raft 的日志又新增了一条，就检测 Raft 的日志是否接近边界值。注意 lab 中的 <code>maxraftstate</code> 是日志大小的上限，要在快接近时提前生成快照，因为调用 Raft 模块生成快照抢锁是需要等待的，若不提前就很可能超出上限，无法通过测试。所以取 90% 提前生成：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kv *KVServer)</span> <span class="title">waitAgree</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">for</span> {</span><br><span class="line">        <span class="keyword">select</span> {</span><br><span class="line">        <span class="keyword">case</span> &lt;-kv.killCh:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">case</span> msg := &lt;-kv.applyCh:</span><br><span class="line">            op := msg.Command.(Op)</span><br><span class="line">            kv.mu.Lock()</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            kv.checkSnapshot(msg.CommandIndex) <span class="comment">// use committed index as snapshot LastIncludedIndex</span></span><br><span class="line">            kv.mu.Unlock()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kv *KVServer)</span> <span class="title">checkSnapshot</span><span class="params">(appliedId <span class="keyword">int</span>)</span></span> {</span><br><span class="line">    <span class="keyword">if</span> kv.maxraftstate == <span class="number">-1</span> {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// take snapshot when raft size come near upper limit</span></span><br><span class="line">    <span class="keyword">if</span> kv.persister.RaftStateSize() &lt; kv.maxraftstate*<span class="number">9</span>/<span class="number">10</span> {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">    rawSnapshot := kv.encodeSnapshot()</span><br><span class="line">    <span class="keyword">go</span> kv.rf.TakeSnapshot(appliedId, rawSnapshot) <span class="comment">// not take long time with KVServer's lock</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="通知-Raft-同步快照"><a href="#通知-Raft-同步快照" class="headerlink" title="通知 Raft 同步快照"></a>通知 Raft 同步快照</h3><p>kvServer 需告知 Raft 模块以哪条 committed 日志为准来生成快照，由于 applyCh 的 msg 都是 committed 的，所以如上直接使用它的 <code>msg.CommandIndex</code> 即可。</p>
<p>Raft 收到生成快照的请求后更新完自己的快照信息就立刻返回，不要阻塞，快照同步交给心跳去处理：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// leader take snapshot should be async like Start(), must return quickly</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">TakeSnapshot</span><span class="params">(appliedId <span class="keyword">int</span>, rawSnapshot []<span class="keyword">byte</span>)</span></span> {</span><br><span class="line">    rf.mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> rf.mu.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// lock competition may delayed snapshot call, check this otherwise rf.logs[0] may out of bounds</span></span><br><span class="line">    <span class="keyword">if</span> appliedId &lt;= rf.lastIncludedIndex {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// discard the entries before that index, preserved it for AppendEntries consistency check</span></span><br><span class="line">    rf.logs = rf.logs[rf.subIdx(appliedId):]</span><br><span class="line">    rf.lastIncludedIndex = appliedId</span><br><span class="line">    rf.lastIncludedTerm = rf.logs[<span class="number">0</span>].Term</span><br><span class="line">    rf.persistStatesAndSnapshot(rawSnapshot)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>KVServer 多次调用 Raft.TakeSnapshot() 的执行顺序会收到 Raft 抢占锁的影响，可能新快照会先抢到锁，轮到旧日志处理时对应的 appliedId 日志已被删除，会造成 <code>rf.logs[0]</code> 溢出，所以要过滤旧快照。</p>
<h2 id="Raft-同步快照"><a href="#Raft-同步快照" class="headerlink" title="Raft 同步快照"></a>Raft 同步快照</h2><h3 id="Leader-使用快照代替日志加速同步"><a href="#Leader-使用快照代替日志加速同步" class="headerlink" title="Leader 使用快照代替日志加速同步"></a>Leader 使用快照代替日志加速同步</h3><p>在 Lab2 中已实现 leader 向各 follower 发送缺失日志的心跳逻辑，引入快照机制后，可直接发送快照。当leader 发现快照比 nextIndex 还新，就将 AppendEntries RPC 换成 InstallSnapshot RPC，大大减少要同步的日志数量。</p>
<p>如下leader 只需发送 6 一条日志，而非 3 4 5 6 四条：</p>
<p> <a href="https://images.yinzige.com/2019-06-14-152901.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-06-14-152901.png" width="80%"></a></p>
<p>在 Leader 给 follower 同步日志前，检查快照若更新则走 InstallSnapshot RPC 的逻辑：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// leader sync logs to followers</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">sync</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> rf.peers {</span><br><span class="line">        <span class="keyword">if</span> i == rf.me {</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(server <span class="keyword">int</span>)</span></span> {</span><br><span class="line">            <span class="keyword">for</span> {</span><br><span class="line">                <span class="keyword">if</span> !rf.isRunningLeader() {</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                rf.mu.Lock()</span><br><span class="line">                rf.syncConds[server].Wait() <span class="comment">// wait for trigger</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// sync new log or missing logs to server</span></span><br><span class="line">                next := rf.nextIndex[server]</span><br><span class="line"></span><br><span class="line">                <span class="comment">// if follower far behind from leader, just send snapshot to it for speeding up replay</span></span><br><span class="line">                <span class="keyword">if</span> next &lt;= rf.lastIncludedIndex {</span><br><span class="line">                    rf.syncSnapshot(server) <span class="comment">// InstallSnapshot RPC logic</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                }</span><br><span class="line">          </span><br><span class="line">               <span class="comment">// AppendEntries RPC logic</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="InstallSnapshot-RPC"><a href="#InstallSnapshot-RPC" class="headerlink" title="InstallSnapshot RPC"></a>InstallSnapshot RPC</h3><p>参考论文的图 13，RPC 参数如下：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> InstallSnapshotArgs <span class="keyword">struct</span> {</span><br><span class="line">    Term              <span class="keyword">int</span>    <span class="comment">// leader's term</span></span><br><span class="line">    LeaderId          <span class="keyword">int</span>    <span class="comment">// so follower can redirect clients</span></span><br><span class="line">    LastIncludedIndex <span class="keyword">int</span>    <span class="comment">// the snapshot replaces all entries up through and including this index</span></span><br><span class="line">    LastIncludedTerm  <span class="keyword">int</span>    <span class="comment">// term of lastIncludedIndex</span></span><br><span class="line">    Data              []<span class="keyword">byte</span> <span class="comment">// raw bytes of the snapshot chunk, starting at offset</span></span><br><span class="line">    <span class="comment">// Offset            int    // byte offset where chunk is positioned in the snapshot file</span></span><br><span class="line">    <span class="comment">// Done              bool   // true if this is the last chunk</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> InstallSnapshotReply <span class="keyword">struct</span> {</span><br><span class="line">    Term <span class="keyword">int</span> <span class="comment">// currentTerm, for leader to update itself</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>lab 为简化流程，每次直接发送整个快照，而非论文中切割为 chunk 分块有序同步，所以 offset 取 0，done 取 true</p>
<h4 id="Leader-端"><a href="#Leader-端" class="headerlink" title="Leader 端"></a>Leader 端</h4><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// sync snap shot to follower server</span></span><br><span class="line"><span class="comment">// rf.mu is locked when call syncSnapshot()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">syncSnapshot</span><span class="params">(server <span class="keyword">int</span>)</span></span> {</span><br><span class="line">    <span class="keyword">if</span> rf.state != Leader || rf.crashed {</span><br><span class="line">        rf.mu.Unlock()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    args := InstallSnapshotArgs{</span><br><span class="line">        Term:              rf.curTerm,</span><br><span class="line">        LeaderId:          rf.me,</span><br><span class="line">        LastIncludedIndex: rf.lastIncludedIndex,</span><br><span class="line">        LastIncludedTerm:  rf.lastIncludedTerm,</span><br><span class="line">        Data:              rf.persister.ReadSnapshot(),</span><br><span class="line">    }</span><br><span class="line">    rf.mu.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> reply InstallSnapshotReply</span><br><span class="line">    respCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>{})</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="keyword">if</span> ok := rf.sendInstallSnapshot(server, &amp;args, &amp;reply); ok {</span><br><span class="line">            respCh &lt;- <span class="keyword">struct</span>{}{}</span><br><span class="line">        }</span><br><span class="line">    }()</span><br><span class="line">    <span class="keyword">select</span> {</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(RPC_CALL_TIMEOUT):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-respCh:</span><br><span class="line">        <span class="built_in">close</span>(respCh)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    rf.mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> rf.mu.Unlock()</span><br><span class="line">    <span class="keyword">if</span> reply.Term &gt; rf.curTerm {</span><br><span class="line">        rf.back2Follower(reply.Term, VOTE_NIL)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> rf.state != Leader || reply.Term &lt; rf.curTerm { <span class="comment">// curTerm changed already</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    rf.matchIndex[server] = args.LastIncludedIndex</span><br><span class="line">    rf.nextIndex[server] = args.LastIncludedIndex + <span class="number">1</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>注意在 syncSnapshot 中调用 RPC 前及时释放锁，否则同一时间只能发起一个调用。</p>
<h4 id="Follower-端"><a href="#Follower-端" class="headerlink" title="Follower 端"></a>Follower 端</h4><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// follower receive snapshot from leader and force overwrite local logs</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">InstallSnapshot</span><span class="params">(args *InstallSnapshotArgs, reply *InstallSnapshotReply)</span></span> {</span><br><span class="line">    rf.mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> rf.mu.Unlock()</span><br><span class="line">    reply.Term = rf.curTerm</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. reply false if term &lt; currentTerm</span></span><br><span class="line">    <span class="keyword">if</span> args.Term &lt; rf.curTerm {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> args.Term &gt; rf.curTerm {</span><br><span class="line">        reply.Term = args.Term</span><br><span class="line">        rf.back2Follower(args.Term, VOTE_NIL)</span><br><span class="line">    }</span><br><span class="line">    rf.resetElectTimer()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check snapshot may expired by lock competition, otherwise rf.logs may overflow below</span></span><br><span class="line">    <span class="keyword">if</span> args.LastIncludedIndex &lt;= rf.lastIncludedIndex {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Create new snapshot file if first chunk (offset is 0)</span></span><br><span class="line">    <span class="comment">// 3. Write data into snapshot file at given offset</span></span><br><span class="line">    <span class="comment">// 4. Reply and wait for more data chunks if done is false</span></span><br><span class="line">    <span class="comment">// 5. Save snapshot file, discard any existing or partial snapshot with a smaller index</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. If existing log entry has same index and term as snapshot's last included entry, retain log entries following it and reply</span></span><br><span class="line">    <span class="keyword">if</span> args.LastIncludedIndex &lt; rf.lastIdx() {</span><br><span class="line">        <span class="comment">// the args.LastIncludedIndex log has agreed, if there are more logs, just retain them</span></span><br><span class="line">        rf.logs = rf.logs[args.LastIncludedIndex-rf.lastIncludedIndex:]</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// 7. Discard the entire log</span></span><br><span class="line">        <span class="comment">// empty log use for AppendEntries RPC consistency check</span></span><br><span class="line">        rf.logs = []LogEntry{{Term: args.LastIncludedTerm, Command: <span class="literal">nil</span>}}</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update snapshot state and persist them</span></span><br><span class="line">    rf.lastIncludedIndex = args.LastIncludedIndex</span><br><span class="line">    rf.lastIncludedTerm = args.LastIncludedTerm</span><br><span class="line">    rf.persistStatesAndSnapshot(args.Data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// force the follower's log catch up with leader</span></span><br><span class="line">    rf.commitIndex = max(rf.commitIndex, args.LastIncludedIndex)</span><br><span class="line">    rf.lastApplied = max(rf.lastApplied, args.LastIncludedIndex)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. Reset state machine using snapshot contents (and load snapshot's cluster configuration)</span></span><br><span class="line">    rf.applyCh &lt;- ApplyMsg{</span><br><span class="line">        CommandValid: <span class="literal">false</span>, <span class="comment">// it's snapshot raw data, not a command</span></span><br><span class="line">        CommandIndex: <span class="number">-1</span>,</span><br><span class="line">        Command:      args.Data, <span class="comment">// use for KVServer restore kvDB</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>对应修改 KVServer 监听 applyCh 的逻辑，从中取出 leader 发来的快照数据：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kv *KVServer)</span> <span class="title">waitAgree</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">for</span> {</span><br><span class="line">        <span class="keyword">select</span> {</span><br><span class="line">        <span class="keyword">case</span> &lt;-kv.killCh:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">case</span> msg := &lt;-kv.applyCh:</span><br><span class="line">            <span class="keyword">if</span> !msg.CommandValid { <span class="comment">// snapshot data</span></span><br><span class="line">                buf := msg.Command.([]<span class="keyword">byte</span>)</span><br><span class="line">                kv.mu.Lock()</span><br><span class="line">                kv.db, kv.cid2seq = kv.decodeSnapshot(buf) <span class="comment">// restore kvDB and cid2seq</span></span><br><span class="line">                kv.mu.Unlock()</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">      <span class="comment">// log agreement loginc</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>至此分别完成了三件事：</p>
<ul>
<li>各节点能实时检测 Raft 日志大小，独立地生成快照并持久化，重启时读取。</li>
<li>leader 生成快照后通过心跳发起 InstallSnapshot RPC 给 followers 加速日志回放和同步。</li>
<li>followers 将快照数据回传给上层的 KVServer 重置 kvDB 和 cid2seq，最终状态与 leader 一致。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 Lab2 中实现了 Raft 算法的三个子模块，开放了 <code>Start()</code> 和 <code>applyCh</code> 供状态机使用。</p>
<p>Lab3A 在其 Lab2 基础上实现了容错的 kvDB 集群，依靠底层 Raft 算法在节点崩溃重启甚至不可用、网络延迟丢包甚至分区的环境下，依旧对多个 Client 保证数据的线性一致性。</p>
<p>Lab3B 实现了 Raft 日志大小的实时检测并截断生成快照，由 leader 通过 InstallSnapshot RPC 将日志同步给过于落后的节点来加速回放，同时重置各状态机（kvDB）的状态，使其数据与 leader 最达成一致。</p>
<p>Lab3 比 Lab2 稍简单，关键在于梳理好 KVServer 与底层的 Raft 模块的交互流程，需重读 Raft 论文的第 7、8 节的快照机制，思考 lecture 的提示。调试时活锁、状态更新时机有误等问题居多，其余细节在代码注释中有标注。</p>


<pre><code>&lt;/div&gt;</code></pre>]]></content>
  </entry>
  <entry>
    <title>Lab3A. 基于 Raft 实现容错的 kvDB</title>
    <url>/2019/11/23/Lab3A-%E5%9F%BA%E4%BA%8E-Raft-%E5%AE%9E%E7%8E%B0%E5%AE%B9%E9%94%99%E7%9A%84-kvDB/</url>
    <content><![CDATA[<div class="post-body" itemprop="articleBody">





<pre><code>&lt;p&gt;总结 6.824 Lab3A Fault-Tolerant kvDB 的实验笔记。&lt;/p&gt;</code></pre><p><a id="more"></a></p>
<h2 id="Lab3A"><a href="#Lab3A" class="headerlink" title="Lab3A"></a>Lab3A</h2><p>Lab3 的目标是基于 Raft 实现容错的 key-value DB 集群：3A 处理节点容错，3B 实现日志快照。</p>
<h3 id="交互流程"><a href="#交互流程" class="headerlink" title="交互流程"></a>交互流程</h3><p>阅读 <a href="https://pdos.csail.mit.edu/6.824/labs/lab-kvraft.html" target="_blank" rel="noopener">lecture</a> 可知，Clerk 是客户端，KVServers 即 kvDBs（状态机），每台 KVServer 即一个 Raft 节点，依靠 Raft 协议保证底层的日志一致性，流程交互图：</p>
<p> <a href="https://images.yinzige.com/2019-06-03-002335.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-06-03-002335.png" width="80%"></a></p>
<ul>
<li>Client 将 <code>Put</code>/<code>Append</code>/<code>Get</code> 命令发送给集群 Leader 处理，并等待调用返回。</li>
<li>KVServer1 底层的 Raft 模块会向 follower 发起命令日志的复制。</li>
<li>当复制副本达到大多数后，KVServer1 执行该命令，并将结果响应给 Client</li>
</ul>
<p>Raft 模块在 Lab2 已实现，本节将用到以下开放的接口：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 发起命令的复制</span></span><br><span class="line"><span class="comment">// idx 是命令复制成功后，其在各节点日志中的索引</span></span><br><span class="line"><span class="comment">// isLeader 表明当前节点是否为 leader</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">Start</span><span class="params">(command <span class="keyword">interface</span>{})</span> <span class="params">(idx <span class="keyword">int</span>, term <span class="keyword">int</span>, isLeader <span class="keyword">bool</span>)</span></span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="线性一致性"><a href="#线性一致性" class="headerlink" title="线性一致性"></a>线性一致性</h3><p>linearizability 可理解为 CAP 理论中的 C(Consistency)，意为：</p>
<blockquote>
<p>A call must observe the effects of all calls that have completed before the call starts</p>
</blockquote>
<p>如下 4 个 Client 分别在不同时间向 KV 集群发起 4 个命令，蓝线是集群处理命令的时间点。如下 Get 命令的执行结果严格按时间受 Put 命令的影响，即系统满足线性一致性：</p>
<p> <a href="https://images.yinzige.com/2019-06-03-010109.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-06-03-010109.png" width="70%"></a></p>
<p>参考：<a href="https://www.anishathalye.com/2017/06/04/testing-distributed-systems-for-linearizability/" target="_blank" rel="noopener">anishathalye.com</a></p>
<h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><ul>
<li><strong>TestBasic3A</strong>：正常情况下，保证单个 Client 命令能执行成功，保证 5 台 KVServer 日志一致。</li>
<li><strong>TestUnreliable3A</strong>：处理 RPC 调用超时，重试请求。</li>
<li><strong>TestOnePartition3A</strong>：处理多台 Client 和多台 Server 都发生网络分区的情况。</li>
<li><strong>TestPersistPartitionUnreliableLinearizable3A</strong>：在节点失效、网络不可靠的环境中保证线性一致性。</li>
</ul>
<p>测试均通过：</p>
<p> <a href="https://images.yinzige.com/2019-06-03-004945.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-06-03-004945.png" width="60%"></a></p>
<h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p>Client 需记录已知的 leader 位置，下次直接向该节点发起请求。Client 结构如下：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Clerk <span class="keyword">struct</span> {</span><br><span class="line">    servers []*labrpc.ClientEnd <span class="comment">// kv servers / raft peers</span></span><br><span class="line">    leader  <span class="keyword">int</span>                 <span class="comment">// latest known leader</span></span><br><span class="line">    cid     <span class="keyword">int64</span>               <span class="comment">// client id</span></span><br><span class="line">    seq     <span class="keyword">int32</span>               <span class="comment">// latest request seq num</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>clientid 在初始化时调用 <code>nrand()</code> 随机生成即可，生产系统中可用 <code>ip:port</code> 来唯一标识。</p>
<h3 id="检测重复请求"><a href="#检测重复请求" class="headerlink" title="检测重复请求"></a>检测重复请求</h3><p>Client 向 KVServer 发起 RPC 调用，当调用超时或被告知节点不是 Leader 后，需换个及诶点重试请求。因此，KVServer 要避免二次执行命令，或因网络延迟使执行过期命令。<br>参考论文第八节：为检测重复请求，可在每次请求中加入唯一 id，并随请求自增，再重试时使用同一 id，Server 只需<strong>对每个 Client 记录最大的请求 id</strong>，即可排除过期或重复请求。Request 结构如下：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> PutAppendArgs <span class="keyword">struct</span> {</span><br><span class="line">    Cid   <span class="keyword">int64</span> <span class="comment">// client id</span></span><br><span class="line">    Seq   <span class="keyword">int32</span> <span class="comment">// request sequential number</span></span><br><span class="line">    Key   <span class="keyword">string</span></span><br><span class="line">    Value <span class="keyword">string</span></span><br><span class="line">    Op    <span class="keyword">string</span> <span class="comment">// Put/Append</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h3><p>对于 Get 请求本身是幂等的，无需加 id 标识。对于 Put/Append 操作则需唯一标识：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ck *Clerk)</span> <span class="title">PutAppend</span><span class="params">(key <span class="keyword">string</span>, value <span class="keyword">string</span>, op <span class="keyword">string</span>)</span></span> {</span><br><span class="line">    curSeq := atomic.AddInt32(&amp;ck.seq, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> {</span><br><span class="line">        args := PutAppendArgs{</span><br><span class="line">            Cid:   ck.cid,</span><br><span class="line">            Seq:   curSeq,</span><br><span class="line">            Key:   key,</span><br><span class="line">            Value: value,</span><br><span class="line">            Op:    op,</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">var</span> reply PutAppendReply</span><br><span class="line">        ok := ck.servers[ck.leader].Call(<span class="string">"KVServer.PutAppend"</span>, &amp;args, &amp;reply)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> !ok || reply.WrongLeader { <span class="comment">// RPC call timeout, or ck.leader isn't current leader</span></span><br><span class="line">            ck.changeLeader()</span><br><span class="line">            <span class="keyword">continue</span> <span class="comment">// retry and re-use current sequential number</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="KVServer"><a href="#KVServer" class="headerlink" title="KVServer"></a>KVServer</h2><p>数据库的 key, value 都是 <code>string</code> 类型，可直接使用 <code>map[string]string</code> 存储，为避免并发读写还需加锁保护。KVServer 结构如下：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> KVServer <span class="keyword">struct</span> {</span><br><span class="line">    mu      sync.Mutex</span><br><span class="line">    me      <span class="keyword">int</span></span><br><span class="line">    rf      *raft.Raft</span><br><span class="line">    applyCh <span class="keyword">chan</span> raft.ApplyMsg</span><br><span class="line"></span><br><span class="line">    maxraftstate <span class="keyword">int</span>               <span class="comment">// snapshot if log grows this big</span></span><br><span class="line">    db           <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> <span class="comment">// kvDB</span></span><br><span class="line">    cid2seq      <span class="keyword">map</span>[<span class="keyword">int64</span>]<span class="keyword">int32</span>   <span class="comment">// client id to max request sequential number</span></span><br><span class="line">    agreeChs     <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">chan</span> Op   <span class="comment">// command index to op channel</span></span><br><span class="line">    killCh       <span class="keyword">chan</span> <span class="keyword">struct</span>{}     <span class="comment">// kill KVServer</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Raft 复制的日志需记录具体的某次请求：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Op <span class="keyword">struct</span> {</span><br><span class="line">    Cid   <span class="keyword">int64</span>  <span class="comment">// client id</span></span><br><span class="line">    Seq   <span class="keyword">int32</span>  <span class="comment">// request sequence number</span></span><br><span class="line">    Cmd   <span class="keyword">string</span> <span class="comment">// command type, Put/Append/Get</span></span><br><span class="line">    Key   <span class="keyword">string</span></span><br><span class="line">    Value <span class="keyword">string</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>由于日志可能被新 leader 覆盖，所以当 KVServer 发现统一索引上，自己发出的 Op 和 Raft 返回的 Op 不一致，就说明同步过程中，我已不再是 leader 且日志已被覆盖：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSameOp</span><span class="params">(a, b Op)</span> <span class="title">bool</span></span> {</span><br><span class="line">    <span class="keyword">return</span> a.Cid == b.Cid &amp;&amp; a.Seq == b.Seq &amp;&amp; a.Cmd == b.Cmd &amp;&amp; a.Key == b.Key &amp;&amp; a.Value == b.Value</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="异步复制"><a href="#异步复制" class="headerlink" title="异步复制"></a>异步复制</h3><p>根据 <a href="https://thesquareplanet.com/blog/students-guide-to-raft/#applications-on-top-of-raft" target="_blank" rel="noopener">Guide</a> 提示，KVServer 调用 <code>Start(command)</code> 发起同步后，需<strong>异步等待</strong> Raft 模块从 <code>applyCh</code> 通知已复制成功的日志 <code>index</code>，再响应 index 对应的请求。在初始化时在后台开启 goroutine 监听：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// wait agreement from Raft</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kv *KVServer)</span> <span class="title">waitAgree</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">for</span> {</span><br><span class="line">        <span class="keyword">select</span> {</span><br><span class="line">        <span class="keyword">case</span> &lt;-kv.killCh:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">case</span> msg := &lt;-kv.applyCh:</span><br><span class="line">            op := msg.Command.(Op)</span><br><span class="line">            kv.mu.Lock()</span><br><span class="line">            maxSeq, ok := kv.cid2seq[op.Cid]</span><br><span class="line">            <span class="keyword">if</span> !ok || op.Seq &gt; maxSeq { <span class="comment">// only handle new request from specific client</span></span><br><span class="line">                kv.cid2seq[op.Cid] = op.Seq</span><br><span class="line">                <span class="keyword">switch</span> op.Cmd {</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"Put"</span>:</span><br><span class="line">                    kv.db[op.Key] = op.Value</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"Append"</span>:</span><br><span class="line">                    kv.db[op.Key] += op.Value</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            kv.mu.Unlock()</span><br><span class="line"></span><br><span class="line">            kv.getAgreeCh(msg.CommandIndex) &lt;- op</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>注意：由于请求处理与 waitAgree 监听的执行顺序是不确定的，需有一个共用 agreeCh 的逻辑：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kv *KVServer)</span> <span class="title">getAgreeCh</span><span class="params">(idx <span class="keyword">int</span>)</span> <span class="title">chan</span> <span class="title">Op</span></span> {</span><br><span class="line">    kv.mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> kv.mu.Unlock()</span><br><span class="line"></span><br><span class="line">    ch, ok := kv.agreeChs[idx]</span><br><span class="line">    <span class="keyword">if</span> !ok {</span><br><span class="line">        ch = <span class="built_in">make</span>(<span class="keyword">chan</span> Op, <span class="number">1</span>) <span class="comment">// never block this</span></span><br><span class="line">        kv.agreeChs[idx] = ch</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="处理-Get-请求"><a href="#处理-Get-请求" class="headerlink" title="处理 Get 请求"></a>处理 Get 请求</h3><p>为避免过期 leader 返回旧数据，在处理 Get 请求前，leader 必须与集群中大多数节点完成通信，确保自己的数据是最新的。论文第八节建议让 leader 主动发起一次心跳并统计正常节点数量，不过根据 lecture 提示：</p>
<blockquote>
<p>A kvserver should not complete a <code>Get()</code> RPC if it is not part of a majority (so that it does not serve stale data). A simple solution is to enter every <code>Get()</code> (as well as each <code>Put()</code> and <code>Append()</code>) in the Raft log</p>
</blockquote>
<p>可让 Get 请求像 Put/Append 请求一样走日志同步流程，就不必再修改 Lab2 的 Raft 实现。请求处理流程：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kv *KVServer)</span> <span class="title">Get</span><span class="params">(args *GetArgs, reply *GetReply)</span></span> {</span><br><span class="line">    cmd := Op{Cmd: <span class="string">"Get"</span>, Key: args.Key,}</span><br><span class="line">    idx, _, isLeader := kv.rf.Start(cmd)</span><br><span class="line">    <span class="keyword">if</span> !isLeader {</span><br><span class="line">        reply.WrongLeader = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ch := kv.getAgreeCh(idx)</span><br><span class="line">    <span class="keyword">var</span> op Op</span><br><span class="line">    <span class="keyword">select</span> {</span><br><span class="line">    <span class="keyword">case</span> op = &lt;-ch: <span class="comment">// current leader can communicate with majority</span></span><br><span class="line">        <span class="built_in">close</span>(ch)</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(<span class="number">500</span> * time.Millisecond): <span class="comment">// agreement may be failed, treat as timeout and client will retry</span></span><br><span class="line">        reply.WrongLeader = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if old leader has in net partition, may it's log may be overwrited, then reply value will be different</span></span><br><span class="line">    <span class="keyword">if</span> !isSameOp(cmd, op) {</span><br><span class="line">        reply.WrongLeader = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    kv.mu.Lock()</span><br><span class="line">    reply.Value = kv.db[args.Key] <span class="comment">// if key not exist, just return "" or return ErrNoKey</span></span><br><span class="line">    kv.mu.Unlock()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="处理-Put-Append-请求"><a href="#处理-Put-Append-请求" class="headerlink" title="处理 Put/Append 请求"></a>处理 Put/Append 请求</h3><p>由于 Put/Append 请求会更新 <code>kv.db</code> 数据，要避免重复请求被二次执行，即 waitAgree 中的 Seq 对比逻辑。</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kv *KVServer)</span> <span class="title">PutAppend</span><span class="params">(args *PutAppendArgs, reply *PutAppendReply)</span></span> {</span><br><span class="line">    cmd := Op{</span><br><span class="line">        Cid:   args.Cid,</span><br><span class="line">        Seq:   args.Seq,</span><br><span class="line">        Cmd:   args.Op,</span><br><span class="line">        Key:   args.Key,</span><br><span class="line">        Value: args.Value,</span><br><span class="line">    }</span><br><span class="line">    idx, _, isLeader := kv.rf.Start(cmd)</span><br><span class="line">    <span class="keyword">if</span> !isLeader {</span><br><span class="line">        reply.WrongLeader = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ch := kv.getAgreeCh(idx) <span class="comment">// sequence of PutAppend() and &lt;-applyCh are uncertain</span></span><br><span class="line">    <span class="keyword">var</span> op Op</span><br><span class="line">    <span class="keyword">select</span> {</span><br><span class="line">    <span class="keyword">case</span> op = &lt;-ch:</span><br><span class="line">        <span class="built_in">close</span>(ch)</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(<span class="number">500</span> * time.Millisecond):</span><br><span class="line">        reply.WrongLeader = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !isSameOp(cmd, op) {</span><br><span class="line">        reply.WrongLeader = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>至此完成了基于 Raft 实现容错 kvDB 的搭建。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 Lab2 中实现的 Raft 库开放了 <code>applyCh</code> 和 <code>Start(command)</code> 接口，本节在此基础上实现异步监听、超时重试、请求去重等机制，使上层的 kvDB 能在主机崩溃重启，请求发生延迟、失序、丢失甚至隔离的网络环境下，依旧能对客户端保证数据的线性一致性。</p>


<pre><code>&lt;/div&gt;</code></pre>]]></content>
  </entry>
  <entry>
    <title>Lab2A. Raft 选主实现</title>
    <url>/2019/11/23/Lab2A-Raft-%E9%80%89%E4%B8%BB%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<div class="post-body" itemprop="articleBody">





<pre><code>总结 MIT6.824 Lab2A Raft 选主的实验笔记。&lt;br&gt;</code></pre><p><a id="more"></a></p>
<h2 id="Lab2A"><a href="#Lab2A" class="headerlink" title="Lab2A"></a>Lab2A</h2><p>Raft 将一致性问题分解成三个子问题：Leader 选举、日志复制、安全性保证，在 Lab 的 2A, 2B 中实现，快照功能在 Lab3 实现，均可参考原论文图 2 中对 Raft 实现的简要总结。</p>
<h3 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h3><ul>
<li>实现 Leader 选举：选出单个 leader 并保持领导地位，直到自己 crash 或发生网络分区</li>
<li>实现心跳通信：实现 leader 与其他节点的无日志 AppendEntries RPC 调用</li>
</ul>
<h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><ul>
<li><strong>TestInitialElection2A：</strong>集群正常情况下保证单一 leader</li>
<li><strong>TestReElection2A：</strong>处理好 leader 网络分区、多数节点失效造成 split vote 的情况。</li>
</ul>
<p>测试均通过：<br> <a href="https://images.yinzige.com/2019-05-10-035030.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-05-10-035030.png" width="60%"></a></p>
<h2 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h2><h3 id="RPC-调用超时"><a href="#RPC-调用超时" class="headerlink" title="RPC 调用超时"></a>RPC 调用超时</h3><p>在分布式系统中，每次调用会有三种结果：成功、失败、超时。Lab 将 net rpc 库封装成 labrpc，通过隔离节点网络来模拟节点不可用。不可用节点的 RPC 调用超时会返回 <code>false</code>，但这里不能死等 labrpc 库不确定的超时时长（100ms，2s 均可能），应该在调用时使用 timer 有预期地控制超时（如稍大于心跳间隔：150ms）<br>调用超时后，不必像论文中描述的无限次重试，应简化处理，直接认为调用失败。</p>
<h3 id="充分使用-sync-包来实现同步"><a href="#充分使用-sync-包来实现同步" class="headerlink" title="充分使用 sync 包来实现同步"></a>充分使用 sync 包来实现同步</h3><p>AppendEntries RPC 用于心跳通信和日志同步，调用时机有两个：</p>
<ul>
<li>定时心跳：leader 需在后台定期向其他节点发送 heartbeat，保持领导地位。同时在心跳还充当着日志同步的作用，当某个节点日志一致性检查失败后，会将冲突信息返回，leader 需将本地日志同步到该节点。</li>
<li>新日志同步：当客户端发来新命令时，leader 将日志 append 到本地后即响应（lab 与论文不同），随后立刻开始新日志的同步。<br>要调用 AppendEntries 的地方很多，因而使用 sync.Cond 条件变量而非散落各处的 channel 来进行同步触发。</li>
</ul>
<h3 id="一些时机"><a href="#一些时机" class="headerlink" title="一些时机"></a>一些时机</h3><ul>
<li>每个节点在收到有效 RPC 调用后要重置 Election Timer，即使 Leader 无需对自己进行 rpc 调用，但重置 Timer 也是必要的。</li>
<li>当节点收到更高 term 的 RPC 调用或响应时，要立刻回退到 follower 并重置 Timer，由于不能确信对方身份就是 Leader，所以 <code>voteFor</code> 要重置为 nil</li>
</ul>
<h3 id="关于调试"><a href="#关于调试" class="headerlink" title="关于调试"></a>关于调试</h3><p>  改造 util.go 中 DPrintf() 来输出毫秒及调试信息，方便追溯系统的时序性等问题。比如我的调试日志：</p>
<p>  <a href="https://images.yinzige.com/2019-05-09-010157.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-05-09-010157.png" alt="image-20190509090156921"></a></p>
<h2 id="Leader-选举"><a href="#Leader-选举" class="headerlink" title="Leader 选举"></a>Leader 选举</h2><p>Lab 限制 leader 每秒最多发送 10 次心跳请求，实现时取心跳间隔为 100ms。相应的，选举超时时间应比心跳大一个量级左右，我实现时取 <code>400 + rand.Intn(4) * 100</code>，即 400~800ms 内的随机值，尽可能避免选举 split vote 情况。</p>
<h3 id="选举流程"><a href="#选举流程" class="headerlink" title="选举流程"></a>选举流程</h3><p>参考上一篇文章：<a href="https://github.com/wuYin/blog/blob/master/distributed_systems/raft-notes.md#leader-%E9%80%89%E4%B8%BE" target="_blank" rel="noopener">Leader 选举</a></p>
<p><a href="https://images.yinzige.com/2019-04-23-035737.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-23-035737.png" alt="image-20190423115736847"></a></p>
<h3 id="发起投票"><a href="#发起投票" class="headerlink" title="发起投票"></a>发起投票</h3><p>定义 Raft 节点：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Raft <span class="keyword">struct</span> {</span><br><span class="line">    mu        sync.Mutex          <span class="comment">// Lock to protect shared access to this peer's state</span></span><br><span class="line">    peers     []*labrpc.ClientEnd <span class="comment">// RPC end points of all peers</span></span><br><span class="line">    persister *Persister          <span class="comment">// Object to hold this peer's persisted state</span></span><br><span class="line">    me        <span class="keyword">int</span>                 <span class="comment">// this peer's index into peers[]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// persistent states</span></span><br><span class="line">    curTerm  <span class="keyword">int</span>        <span class="comment">// latest term server has seen(initialized to 0 on first boot, increases monotonically)</span></span><br><span class="line">    votedFor <span class="keyword">int</span>        <span class="comment">// candidateId that received vote in current term(or null if none)</span></span><br><span class="line">    logs     []LogEntry <span class="comment">// log entries; each entry contains command for state machine, and term when entry was received by leader(first index is 1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// implementation</span></span><br><span class="line">    state     PeerState</span><br><span class="line">    timer     *RaftTimer</span><br><span class="line">    syncConds []*sync.Cond  <span class="comment">// every Raft peer has a condition, use for trigger AppendEntries RPC</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>每个节点在 <code>Make</code> 初始化时都选择时长随机的 RaftTimer，之后启动新的 goroutine 监听 election timer 超时：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">for</span> {</span><br><span class="line">        <span class="keyword">select</span> {</span><br><span class="line">        <span class="keyword">case</span> &lt;-rf.timer.t.C: <span class="comment">// election timeout</span></span><br><span class="line">            rf.resetElectTimer() <span class="comment">// this reset is necessary, reset it when timeout</span></span><br><span class="line">            rf.vote()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}()</span><br></pre></td></tr></tbody></table></figure>
<p>timer 超时后，发起投票：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// start vote</span></span><br><span class="line"><span class="comment">// leader can start vote repeatedly, such as 2 nodes are crashed in 3 nodes cluster</span></span><br><span class="line"><span class="comment">// leader should reset election timeout when heartbeat to prevent this</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">vote</span><span class="params">()</span></span> {</span><br><span class="line">    pr(<span class="string">"Vote|Timeout|%v"</span>, rf)</span><br><span class="line">    rf.curTerm++</span><br><span class="line">    rf.state = Candidate</span><br><span class="line">    rf.votedFor = rf.me</span><br><span class="line"></span><br><span class="line">    args := RequestVoteArgs{</span><br><span class="line">        Term:        rf.curTerm,</span><br><span class="line">        CandidateID: rf.me,</span><br><span class="line">    }</span><br><span class="line">    replyCh := <span class="built_in">make</span>(<span class="keyword">chan</span> RequestVoteReply, <span class="built_in">len</span>(rf.peers))</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> rf.peers {</span><br><span class="line">        <span class="keyword">if</span> i == rf.me {</span><br><span class="line">            rf.resetElectTimer() <span class="comment">// other followers will reset when receive valid RPC, leader same</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(server <span class="keyword">int</span>)</span></span> {</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            <span class="keyword">var</span> reply RequestVoteReply</span><br><span class="line">            respCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>{})</span><br><span class="line">            <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">                rf.sendRequestVote(server, &amp;args, &amp;reply)</span><br><span class="line">                respCh &lt;- <span class="keyword">struct</span>{}{}</span><br><span class="line">            }()</span><br><span class="line">            <span class="keyword">select</span> {</span><br><span class="line">            <span class="keyword">case</span> &lt;-time.After(RPC_CALL_TIMEOUT): <span class="comment">// 1s</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">case</span> &lt;-respCh:</span><br><span class="line">                replyCh &lt;- reply</span><br><span class="line">            }</span><br><span class="line">        }(i)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        wg.Wait()</span><br><span class="line">        <span class="built_in">close</span>(replyCh) <span class="comment">// avoid goroutine leak</span></span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line">    votes := <span class="number">1</span></span><br><span class="line">    majority := <span class="built_in">len</span>(rf.peers)/<span class="number">2</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> reply := <span class="keyword">range</span> replyCh {</span><br><span class="line">        <span class="keyword">if</span> reply.Term &gt; rf.curTerm { <span class="comment">// higher term leader</span></span><br><span class="line">            pr(<span class="string">"Vote|Higher Term:%d|%v"</span>, reply.Term, rf)</span><br><span class="line">            rf.back2Follower(reply.Term, VOTE_NIL)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> reply.VoteGranted {</span><br><span class="line">            votes++</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> votes &gt;= majority { <span class="comment">// if reach majority earlier, shouldn't wait crashed peer for timeout</span></span><br><span class="line">            rf.state = Leader</span><br><span class="line">            <span class="keyword">go</span> rf.heartbeat()</span><br><span class="line">            <span class="keyword">go</span> rf.sync()</span><br><span class="line"></span><br><span class="line">            pr(<span class="string">"Vote|Win|%v"</span>, rf)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// split vote</span></span><br><span class="line">    pr(<span class="string">"Vote|Split|%v"</span>, rf)</span><br><span class="line">    rf.back2Follower(rf.curTerm, VOTE_NIL)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="响应投票"><a href="#响应投票" class="headerlink" title="响应投票"></a>响应投票</h3><p>Raft 对投票节点提出了三点要求：</p>
<ul>
<li>每轮能投几张：一个任期内，一个节点只能投一张票</li>
<li>是否要投：候选人的日志至少要和自己的一样新，才投票（Lab2B 实现日志的 up-to-date 比较）</li>
<li>投给谁：first-come-first-served，投给第一个符合条件的候选人</li>
</ul>
<p><strong>实现</strong></p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> RequestVoteArgs <span class="keyword">struct</span> {</span><br><span class="line">    Term        <span class="keyword">int</span></span><br><span class="line">    CandidateID <span class="keyword">int</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RequestVoteReply <span class="keyword">struct</span> {</span><br><span class="line">    Term        <span class="keyword">int</span></span><br><span class="line">    VoteGranted <span class="keyword">bool</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">RequestVote</span><span class="params">(args *RequestVoteArgs, reply *RequestVoteReply)</span></span> {</span><br><span class="line">    reply.Term = rf.curTerm</span><br><span class="line">    reply.VoteGranted = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.Term &lt; rf.curTerm {</span><br><span class="line">        <span class="keyword">return</span> <span class="comment">// candidate expired</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> args.Term &gt; rf.curTerm {</span><br><span class="line">        rf.back2Follower(args.Term, VOTE_NIL)</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// now the term are same</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> rf.votedFor == VOTE_NIL || rf.votedFor == args.CandidateID {</span><br><span class="line">        reply.VoteGranted = <span class="literal">true</span></span><br><span class="line">        rf.back2Follower(args.Term, args.CandidateID)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="心跳通信"><a href="#心跳通信" class="headerlink" title="心跳通信"></a>心跳通信</h2><p>Raft 将客户端的命令封装为 log entry：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> LogEntry <span class="keyword">struct</span> {</span><br><span class="line">    Term    <span class="keyword">int</span></span><br><span class="line">    Command <span class="keyword">interface</span>{}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="心跳请求"><a href="#心跳请求" class="headerlink" title="心跳请求"></a>心跳请求</h3><p>当候选人成功竞选为 leader 后要 <strong>立刻</strong> 给集群中其他节点发送心跳，避免其他节点也超时发起新一轮选举。实现方案：获得多数票后，在后台为其他的所有 peer 启动同步日志的 goroutine，等待下一轮心跳 tick，这种广播方式最好使用 sync.Cond 条件变量来实现。</p>
<p>获得多数票后为所有节点准备 sync</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// leader sync logs to followers</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">sync</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> rf.peers {</span><br><span class="line">        <span class="keyword">if</span> i == rf.me {</span><br><span class="line">            rf.resetElectTimer()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(server <span class="keyword">int</span>)</span></span> {</span><br><span class="line">            <span class="keyword">for</span> {</span><br><span class="line">                rf.mu.Lock()</span><br><span class="line">                rf.syncConds[server].Wait() <span class="comment">// wait for trigger</span></span><br><span class="line"></span><br><span class="line">                args := AppendEntriesArgs{</span><br><span class="line">                    Term:         rf.curTerm,</span><br><span class="line">                    LeaderID:     rf.me,</span><br><span class="line">                    PrevLogIndex: <span class="number">0</span>,</span><br><span class="line">                    PrevLogTerm:  <span class="number">0</span>,</span><br><span class="line">                    Entries:      <span class="literal">nil</span>, <span class="comment">// heartbeat entries are empty</span></span><br><span class="line">                }</span><br><span class="line">                rf.mu.Unlock()</span><br><span class="line"></span><br><span class="line">                <span class="comment">// do not depend on labrpc to call timeout(it may more bigger than heartbeat), so should be check manually</span></span><br><span class="line">                <span class="keyword">var</span> reply AppendEntriesReply</span><br><span class="line">                respCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>{})</span><br><span class="line">                <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">                    rf.sendAppendEntries(server, &amp;args, &amp;reply)</span><br><span class="line">                    respCh &lt;- <span class="keyword">struct</span>{}{}</span><br><span class="line">                }()</span><br><span class="line">                <span class="keyword">select</span> {</span><br><span class="line">                <span class="keyword">case</span> &lt;-time.After(RPC_CALL_TIMEOUT): <span class="comment">// After() with currency may be inefficient</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">case</span> &lt;-respCh: <span class="comment">// response succ</span></span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> reply.Term &gt; rf.curTerm { <span class="comment">// higher term</span></span><br><span class="line">                    rf.back2Follower(reply.Term, VOTE_NIL)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }(i)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>同时开启心跳 tick，准备广播通知 sync</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// send heartbeat</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">heartbeat</span><span class="params">()</span></span> {</span><br><span class="line">    ch := time.Tick(HEARTBEAT_INTERVAL)</span><br><span class="line">    <span class="keyword">for</span> {</span><br><span class="line">        <span class="keyword">if</span> !rf.isLeader() {</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i := <span class="keyword">range</span> rf.peers {</span><br><span class="line">            <span class="keyword">if</span> i == rf.me {</span><br><span class="line">                rf.resetElectTimer() <span class="comment">// leader reset timer voluntary, so it won't elect again</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            rf.syncConds[i].Broadcast()</span><br><span class="line">        }</span><br><span class="line">        &lt;-ch</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="响应心跳"><a href="#响应心跳" class="headerlink" title="响应心跳"></a>响应心跳</h3><p>对于心跳请求，节点暂时只需对比任期号，若 term 未过期则调用成功。2B 部分将实现日志的一致性检查：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span> <span class="title">AppendEntries</span><span class="params">(args *AppendEntriesArgs, reply *AppendEntriesReply)</span></span> {</span><br><span class="line">    reply.Term = rf.curTerm</span><br><span class="line">    reply.Succ = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> rf.curTerm &gt; args.Term {</span><br><span class="line">        <span class="keyword">return</span> <span class="comment">// leader expired</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    rf.back2Follower(args.Term, VOTE_NIL)</span><br><span class="line">    reply.Succ = <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个实验可从 test 着手，实验环境是 3 个节点组成的集群，实现时需在 leader crash 后及时选出下一任 leader，且处理好旧 leader re-join 等情况。<br>个人经验：对于分布式系统，调试时可在请求参数、响应结构中加入 debug 信息，用于追踪某次请求的处理过程和结果，梳理清楚了执行流程，再去针对性的解决问题。<br>为了让代码更清爽，我把 raft.go 的代码按功能拆分为了 2 部分：vote 处理投票请求，enry 处理心跳请求。之后的两个实验小节将对应修改这两个文件。<br> <a href="https://images.yinzige.com/2019-04-23-044741.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-23-044741.png" width="40%"></a></p>


<pre><code>&lt;/div&gt;</code></pre>]]></content>
  </entry>
  <entry>
    <title>Lab1. MapReduce 论文和实验笔记</title>
    <url>/2019/11/23/Lab1-MapReduce-%E8%AE%BA%E6%96%87%E5%92%8C%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="post-body" itemprop="articleBody">





<pre><code>总结下 6.824 MapReduce lab 的论文笔记和实验过程。本文代码：&lt;a href=&quot;https://github.com/shaojintian/MIT6.824/tree/master/mapreduce&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MIT6.824/mapreduce&lt;/a&gt;&lt;/p&gt;</code></pre><p><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自己的 nsx PRC 框架 v0.2 需支持分布式环境下服务变更的通知，对 zookeeper 不想只停留在会用的层面，于是学习 <a href="https://pdos.csail.mit.edu/6.824/schedule.html" target="_blank" rel="noopener">MIT 6.824 Distributed Systems</a>，本文是 Lec1: MapReduce 的学习笔记。</p>
<h2 id="论文阅读"><a href="#论文阅读" class="headerlink" title="论文阅读"></a>论文阅读</h2><p>原论文：<a href="https://research.google.com/archive/mapreduce-osdi04.pdf" target="_blank" rel="noopener">MapReduce: Simplified Data Processing on Large Clusters</a></p>
<h3 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h3><p>在 2004 年以前，Google 团队为处理各种原始数据实现了上百个专用计算程序，比如对原始网页文档生成倒排索引，数据量少时单机处理就行，但数据量过大后单机处理就太耗时了，只能将数据分布在多个主机上并行处理，最后聚合各节点生成的索引数据。</p>
<p>分布式计算降低了耗时，但也必须解决一些问题：如何分发数据？多节点如何保证负载均衡？如何处理节点失效？… 多节点调度工作并不简单。类似的大数据处理场景在谷歌内部还有很多。于是 Jeff 团队就将类似场景的处理流程抽象出来，在 2004 年推出了分布式计算模型 MapReduce，用户只需自定义的 2 个数据的处理函数：</p>
<ul>
<li>如何分割原始数据：Map Func</li>
<li>如何聚合中间数据：Reduce Func</li>
</ul>
<p>之后就能使用 MR 模型通过加节点来提高计算效率，关于节点容错、数据分发、负载均衡的问题 MR 都已处理。</p>
<h3 id="MR-应用实例"><a href="#MR-应用实例" class="headerlink" title="MR 应用实例"></a>MR 应用实例</h3><p>举个例子：对文本文件中的单词计数，论文中 MR 内部处理的伪代码如下：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// MR 处理的数据是 Key-Value 结构的</span></span><br><span class="line"><span class="comment">// key 是文件名，value 是整个文件内容，对空格隔开的每个单词进行计数 "1" 操作</span></span><br><span class="line"><span class="keyword">map</span>(String key, String value):</span><br><span class="line">    <span class="comment">// key: document name</span></span><br><span class="line">    <span class="comment">// value: document contents</span></span><br><span class="line">    <span class="keyword">for</span> each word w in value:</span><br><span class="line">        EmitIntermediate(w, <span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对每个单词 key 都进行词频累加</span></span><br><span class="line">reduce(String key, Iterator values):</span><br><span class="line">    <span class="comment">// key: a word</span></span><br><span class="line">    <span class="comment">// values: a list of counts</span></span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> each v in values:</span><br><span class="line">        result += ParseInt(v);</span><br><span class="line">    Emit(AsString(result));</span><br></pre></td></tr></tbody></table></figure>
<p>MR 内部隐藏了 Map 操作后将计数结果写入中间文件，Reduce 操作从中间文件读取计数信息的细节。只需用户自己实现 Map/Reduce 的逻辑，即可将任务分布式并行化执行来大幅提升效率。</p>
<h3 id="MR-数据结构"><a href="#MR-数据结构" class="headerlink" title="MR 数据结构"></a>MR 数据结构</h3><p>MR 面向的输入输出数据都是 Key-Value 结构，其中 k-v 约定都是 string 类型，值可能是整个原始文件的内容，也可能是数字，取决于用户自定义的 map func 和 reduce func，这 2 个函数的关联类型是固定的：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">map    (k1,v1)       → list(k2,v2)</span><br><span class="line">reduce (k2,list(v2)) → list(v2)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>map 处理 raw data 对每个内容点 k 都生成 k-v pair</li>
<li>reduce 对每个 k 都聚合其 list 中间数据，最终生成聚合结果</li>
</ul>
<h3 id="MR-执行流程"><a href="#MR-执行流程" class="headerlink" title="MR 执行流程"></a>MR 执行流程</h3><p>首先说明 MapReduce 是一种分布式计算模型，不是某个开源的分布式调度框架，所以在不同场景下对模型的实现代码并不相同。比如对文本文件中的单词进行计数，可使用 MR 模型来实现分布式运行，系统运行流程如下：</p>
<p><a href="https://images.yinzige.com/2019-04-03-042855.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-03-042855.png" alt=""></a></p>
<ul>
<li>Split： MR 将 input files 分割为 M 个子数据片段</li>
<li>Fork：将用户程序 fork 后运行在多个节点上，整个运行过程会执行 M 个 map task 和 R 个 reduce task，节点由一个 master 和多个 worker 组成，其中 master 负责调度空闲的 worker 来运行 task</li>
<li>Map：<ul>
<li>被分配到 map task 的 worker 先读取子数据片段，再调用 Map func 来处理原始数据生成 k-v pairs 中间数据，并通过分区函数归类到 R 个子文件，随后写入本地磁盘。</li>
<li>map worker 将中间文件的存储地址通知 master，随后 master 将 R 个中间文件分配给 reduce worker 处理</li>
</ul>
</li>
<li>Reduce：<ul>
<li>被分配到 reduce task 的 worker 使用 RPC 读取 map worker 上 master 给定的中间文件。虽然同一个 key 会被分区到同一个中间文件，但 key 与 key 之间的写入顺序是无序的，所以读取完毕后需对 keys 统一进行排序，否则输出到 output file 的结果是无序的，会导致 master merge 的结果也是无序的。</li>
<li>排序完毕后对每个 key 都调用 Reduce func 来进行聚合，并将结果输出到对应分区的 output file 中</li>
</ul>
</li>
<li>Merge：master 等所有的 map task 和 reduce task 都执行完毕后，将 R 个 output files 进行 Merge 操作，整个分布式计算过程执行结束。</li>
</ul>
<h3 id="处理容错"><a href="#处理容错" class="headerlink" title="处理容错"></a>处理容错</h3><h4 id="worker-失效"><a href="#worker-失效" class="headerlink" title="worker 失效"></a>worker 失效</h4><p>master 会定期向各个 worker 发送 ping 心跳包，若在超时时间内收到 pong 包则认为 worker 有效，否则标记为失效不可用。MR 会将原来分配到失效 worker 的 task 回收重新分配到其他可用的 worker 上重新执行。值得区分的是：</p>
<ul>
<li>map worker 失效后是必须重新运行 map task，因为 worker 崩溃了无法处理本地中间文件的访问请求</li>
<li>reduce worker 如果失效但已生成聚合文件，通知给了 master 该文件在 GFS 中的位置，就不必重新运行</li>
</ul>
<p>相比论文中如上第 2 种 worker 容错机制，实际在 lab 中都是出错超时直接将 task 分配给其他 worker 运行，因为 lab 并没有实现 reduce worker 输出结果到 output file 后通知 master 的机制。</p>
<h4 id="master-失效"><a href="#master-失效" class="headerlink" title="master 失效"></a>master 失效</h4><p>这种情形论文中只给出了简单的处理方案，即定期将 master 的所有状态作为快照 checkpoint 持久化到磁盘，当 master 崩溃后从最近的 checkpoint 启动新的 master 继续处理。</p>
<p>因为 MR 要求 map func/reduce func 都必须是功能函数，不保留任何状态，即相同的输入能得到相同的输出。所以 master 恢复后继续调度运行是可行的。</p>
<h4 id="GFS"><a href="#GFS" class="headerlink" title="GFS"></a>GFS</h4><p>论文中的容错机制充分利用了 GFS 分布式文件系统的文件原子特性，可直接看原论文是怎么用的。</p>
<h3 id="MR-实用技巧"><a href="#MR-实用技巧" class="headerlink" title="MR 实用技巧"></a>MR 实用技巧</h3><h4 id="分区函数"><a href="#分区函数" class="headerlink" title="分区函数"></a>分区函数</h4><p>在 Map 阶段，使用 <code>hash(key) mod R</code> 来保证每个 key 都能汇总到同一中间文件，保证所有 key 尽可能地均匀分布在 R 个中间文件中。</p>
<h4 id="保证顺序"><a href="#保证顺序" class="headerlink" title="保证顺序"></a>保证顺序</h4><p>在 Reduce 阶段从中间文件中读取数据时得先排序再聚合，这样聚合到 output files 之间就是分段有序的。</p>
<h2 id="实验笔记"><a href="#实验笔记" class="headerlink" title="实验笔记"></a>实验笔记</h2><h3 id="Part1-处理-MR-的输入输出"><a href="#Part1-处理-MR-的输入输出" class="headerlink" title="Part1. 处理 MR 的输入输出"></a>Part1. 处理 MR 的输入输出</h3><p>注意 map task 的输出要能被 reduce task 读取，所以要约定好 encode/decode 结构。lab 注释建议每行存储一个 JSON Encode 后的  k-v，自己做的时候可以 <code>[]k-v</code> 直接 Marshal，在 reduce 读取时对应反序列化。</p>
<h3 id="Part2-单机版-word-count"><a href="#Part2-单机版-word-count" class="headerlink" title="Part2. 单机版 word count"></a>Part2. 单机版 word count</h3><p>对照如上 MR 实例流程图实现。</p>
<h3 id="Part3-分布式版-MR"><a href="#Part3-分布式版-MR" class="headerlink" title="Part3. 分布式版 MR"></a>Part3. 分布式版 MR</h3><p>lab 中使用 RPC 在本地模拟分布式多节点的情况，有新 worker 注册后会通知 registerChan，所以在 schedule 调度时候可 select 从 channel 接收新 worker，或者复用旧的空闲 worker 处理 task</p>
<h3 id="Part4-实现-worker-容错"><a href="#Part4-实现-worker-容错" class="headerlink" title="Part4. 实现 worker 容错"></a>Part4. 实现 worker 容错</h3><p>lab 没有完全按照 paper 来，map/reduce worker 崩溃了都是直接分配给其他可用的空闲 worker 进行 re-execute，需注意多个 schedule goroutine 之间等待可用 worker 时可能出现竞态条件，自己尝试了几个方案后总结了一些经验：</p>
<ul>
<li><p>不要通过共享内存来进行通信，而是通过通信来共享内存</p>
<p>lab 代码已有的 registerChan 是无缓冲 channel，如果复用它来在多个 schedule 间共享空闲 worker，那 map 任务结束后再向它发送 worker 会直接阻塞，此时使用缓冲 channel 合适。反之如果将 worker 的状态变更放到内存中共享使用，多个 schedule goroutine 共享和更新 worker，可能产生很多竞态条件。</p>
</li>
<li><p>锁使用粒度要小，要集中，不要写多个 goroutine 可能会产生竞态的代码</p>
<p>如果跑测试有时候通过，有时候在 lock 周围 panic，那可能代码中还隐藏有竞态条件，而且不好复现调试。总之不要滥用 channel 和 sync.Mutex，梳理好多个 goroutine 之间数据传递方式后再写代码也不迟。</p>
</li>
</ul>
<h3 id="Part5-使用-MR-生成倒排索引"><a href="#Part5-使用-MR-生成倒排索引" class="headerlink" title="Part5. 使用 MR 生成倒排索引"></a>Part5. 使用 MR 生成倒排索引</h3><p>注意给每个单词打分，将分数高的单词排在前边即可通过测试。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MR 要求用户先把任务拆分成 Map / Reduce 2 种子任务，MR 并发地执行 Map 任务产生中间数据，再并发地执行 Reduce 任务聚合数据，最终 Merge 后输出结果，在处理海量数据时通过直接加 worker 就能提高系统性能，水平扩展能力很高。</p>
<p>MR 是一种开创性的分布式计算模型，能通过拆分逻辑实现任务的分布式运行，比较通用化。现如今，虽然有的分布式场景下 MR 模型不是最佳解决方案，但对于设计和学习分布式系统依然很有价值。</p>
<p>感谢 Jeffrey 团队</p>


<pre><code>&lt;/div&gt;</code></pre>]]></content>
      <categories>
        <category>mit6.824</category>
      </categories>
  </entry>
  <entry>
    <title>raft笔记</title>
    <url>/2019/11/23/raft%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="post-body" itemprop="articleBody">





<pre><code>&lt;p&gt;Raft 算法的学习笔记和个人理解。&lt;/p&gt;</code></pre><p><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Raft 论文对算法本身做了详尽的讲解，同时细节也很多，如果不梳理清楚就去做 6.284 Lab2，越往后做就会越发现很多细节都没考虑清楚，也就没法应对各种非正常网络状况。本文记录对 Raft 的学习笔记和流程梳理。</p>
<h2 id="Raft-算法概览"><a href="#Raft-算法概览" class="headerlink" title="Raft 算法概览"></a>Raft 算法概览</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>对于分布式存储系统，必须要解决的主要问题：当系统网络发生故障，或某些节点宕机，集群整体也要能对外可用，即保证容错性。通常通过复制副本来保证容错，即某个节点因宕机或网络隔离不可用后，可让另一个一直在复制它数据的节点来接替它的工作，继续处理请求。</p>
<p>保证多个节点上复制的数据相同就是一致性算法要解决的问题。1990 年至今，<a href="https://zh.wikipedia.org/zh-hans/Paxos%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Paxos 一致性算法</a> 依旧是学术界最知名的一致性算法，但其晦涩难懂且在工程应用时需进行大幅修改才能应用。于是 2013 年衍生出了更易理解的 <a href="https://zh.wikipedia.org/zh/Raft" target="_blank" rel="noopener">Raft 一致性算法</a>，其功能和性能与 Paxos 相当。</p>
<h3 id="可理解性"><a href="#可理解性" class="headerlink" title="可理解性"></a>可理解性</h3><p>Raft 的易理解性源于自身的两个创新性设计：</p>
<ul>
<li>分解一致性问题为三个子问题：leader 选举、日志复制、安全性保证</li>
<li>通过增强一致性状态来减少要考虑的状态数：如 Raft 通过额外选举机制保证新 leader 一定包含旧 leaders 已经 commited 的日志，让算法更好理解。</li>
</ul>
<h2 id="Leader-选举"><a href="#Leader-选举" class="headerlink" title="Leader 选举"></a>Leader 选举</h2><h3 id="状态变更"><a href="#状态变更" class="headerlink" title="状态变更"></a>状态变更</h3><p>在 Raft 中，每个节点只会有三种状态：leader、candidate、follower，转变时机如下：</p>
<p><a href="https://images.yinzige.com/2019-04-10-095432.jpg" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-10-095432.jpg" width="60%"></a></p>
<p>变更时机：</p>
<ul>
<li>集群初始化时节点均为 follower，它们的 election timeout 是从固定区间如 150-300ms 取的随机值</li>
<li>第一个选举超时的 follower 发现一直未收到 leader 或 candidate 的 RPC（可能是 leader 宕机了，也可能是 leader 和当前 follower 发生了网络隔离）它就认为当前集群中并没有 leader，于是升级为 candidate，向其他 followers 发起投票请求，开始新一轮选举：<ul>
<li>选举期间，若收到本轮的 leader 请求，或发现了更新一轮的节点，则自降为 follower</li>
<li>若本轮选举超时了还未收到大多数票，也没收到请求，则重启新一轮选举</li>
<li>若收到来自大多数 follower 的选票，则升级为 leader</li>
</ul>
</li>
<li>leader 如果发现有更高任期的节点，则自降为 follower</li>
</ul>
<p>Raft 限制了只有收到大多数节点的投票，才能升级为 leader，从而保证了每个集群每个任期内只会有一个 leader，这也是节点个数最好设为奇数的原因。<br>成为 leader 后它会向其他节点发送心跳请求表明自己的领导地位。心跳请求的间隔时间需比选举超时时间小一个量级左右。比如每隔 50ms 并行发送一次心跳请求，对应选举超时时间设为 400ms 左右，才能让 leader 一直保持自己的领导地位。</p>
<h3 id="选举流程"><a href="#选举流程" class="headerlink" title="选举流程"></a>选举流程</h3><h4 id="从-follower-到-leader-的选举步骤："><a href="#从-follower-到-leader-的选举步骤：" class="headerlink" title="从 follower 到 leader 的选举步骤："></a>从 follower 到 leader 的选举步骤：</h4><ol>
<li>选举超时时间到，切换为 candidate 身份</li>
<li>currentTerm 自增 1</li>
<li>给自己投一票</li>
<li>并行向其他节点发起 RequestVote RPC，候选人等待响应时可能发生 3 种情况：</li>
</ol>
<ul>
<li>成功收到大多数节点的选票：升级为 leader</li>
<li><p>收到本轮已选出 leader 的请求，则主动放弃竞选降为 follower。如下图的 B 节点：</p>
<p><a href="https://images.yinzige.com/2019-04-19-083231.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-19-083231.png" width="70%"></a></p>
</li>
<li><p>本轮选举超时了还没有收到大多数票，也没收到其他请求，就继续保持 candidate 身份，开启下一轮选举。<br>如下是平票（split vote）情况，有 A,B,C,D 四个节点的集群，若 A 和 C 近乎同时选举超时。B 给最近的 A 投了一票，D 给最近的 C 投了一票。于是 A 和 D 两个候选人都没有达成多数票，二者都会重新开启 Term 2 的新选举。 此时 Raft 让 A 和 C <strong>随机</strong>选择选举超时时间，所以 A 和 C 在 Term2 不会同时超时，能成功选出 leader</p>
</li>
</ul>
<p><a href="https://images.yinzige.com/2019-04-19-091229.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-19-091229.png" width="80%"></a></p>
<h4 id="Raft-对投票者提出了三点要求"><a href="#Raft-对投票者提出了三点要求" class="headerlink" title="Raft 对投票者提出了三点要求"></a>Raft 对投票者提出了三点要求</h4><ul>
<li>每轮能投几张：一个任期内，一个节点只能投一张票</li>
<li>是否要投：candidate 的日志至少要和自己的一样新（下节详述），才投票</li>
<li>投给谁：first-come-first-served，投给第一个符合条件的 candidate</li>
</ul>
<h4 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h4><p><a href="https://images.yinzige.com/2019-04-23-035725.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-23-035725.png" alt=""></a></p>
<h2 id="日志复制"><a href="#日志复制" class="headerlink" title="日志复制"></a>日志复制</h2><p>成功选出 leader 后，集群即对外可用。Raft 让客户端的请求统一给 leader 处理，若 follower 收到请求会直接转发给 leader 处理。而 leader 的工作是保证各个 follower 上的日志顺序、内容都是一致的。</p>
<p>leader 将每个客户的请求都封装成一条日志 log entry，随后将这些日志 entries replicate 到其他 followers 节点，它们随后以相同的顺序、相同的内容执行命令，从而让 followers 数据一致。</p>
<h3 id="请求处理流程"><a href="#请求处理流程" class="headerlink" title="请求处理流程"></a>请求处理流程</h3><p>leader 将客户端请求中的命令（如 <code>SET x 3</code>）封装成一条 log entry：</p>
<ol>
<li>leader 将该条日志 append 到本地</li>
<li>leader 并行地向其他节点发起 AppendEntries RPC 调用</li>
<li>leader 收到大多数节点 RPC 调用成功的响应</li>
<li>leader 在本地状态机上 apply 该条日志</li>
<li>leader 响应客户端请求</li>
<li>leader 通知 followers 可以安全地 apply 该条日志</li>
</ol>
<p>在第 3 步中，只要大多数节点响应说都成功 append 了日志，leader 就认为在自己的状态机上 apply 日志是安全的，对于那些未响应的节点 leader 会无限期地重试 AppendEntries RPC 调用。因此 Raft 并不是类似 2PC 协议的强一致性，而是保证最终一致性。</p>
<h3 id="Log-Entry-存储结构"><a href="#Log-Entry-存储结构" class="headerlink" title="Log Entry 存储结构"></a>Log Entry 存储结构</h3><p>每个节点的每条日志都会包含：请求 append 该日志的 leader 任期号、要执行的命令。下图展示了 5 个节点的集群可能的状态：leader 看到索引 1-7 的日志至少在其他两个节点上复制成功，就认为该日志是 <strong>commited</strong> 状态，而最后一条 <code>x &lt;- 4</code> 的日志并未复制到多数节点，所以索引为 8 的那条日志是 <strong>uncommitted</strong> 状态</p>
<p> <a href="https://images.yinzige.com/2019-04-10-145221.jpg" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-10-145221.jpg" width="65%"></a></p>
<p>注意区分 log 的状态：</p>
<ul>
<li>commit / commited：log 成功复制到大多数节点后的状态，还未执行不会影响节点值</li>
<li>apply / applied：log 成功被状态机执行后的状态，会真正影响节点值</li>
<li>uncommitted：leader 持有的新日志，但未成功复制到大多数节点上</li>
</ul>
<h2 id="安全性保证"><a href="#安全性保证" class="headerlink" title="安全性保证"></a>安全性保证</h2><p>在分布式系统中，网络永远不可靠，而节点一般都用高性价比的普通主机，磁盘异常导致宕机更是常事。Raft 在网络隔离、节点不可用等环境下仍能保证节点数据的一致性，得利于它的一个原则四个特性：</p>
<h3 id="1-Leader-Append-Only-原则"><a href="#1-Leader-Append-Only-原则" class="headerlink" title="1. Leader Append-Only 原则"></a>1. Leader Append-Only 原则</h3><p>leader 对自己的日志不能覆盖和删除，只能进行 append 新日志的操作。</p>
<h3 id="2-Election-Safety-特性"><a href="#2-Election-Safety-特性" class="headerlink" title="2. Election Safety 特性"></a>2. Election Safety 特性</h3><p>每个任期内最多只能选出一个 leader，试想如果集群同一任期选出了多个 leader，即发生了 brain split（脑裂），会直接导致同一时刻集群中多个 follower 之间数据不一致。在 Raft 中用以下限制来保证 election safety</p>
<ul>
<li>一个节点每个任期内只能投一张票</li>
<li>获得多数票（过半）的节点才有资格升级为 leader</li>
</ul>
<h3 id="3-Log-Matching-特性"><a href="#3-Log-Matching-特性" class="headerlink" title="3. Log Matching 特性"></a>3. Log Matching 特性</h3><p>若两个节点的日志中，同一索引的两条日志，任期号也相同。则两个节点在该索引前的日志都是相同的。Raft 通过额外机制保证日志匹配：</p>
<ul>
<li>append-only 保证：leader 在每个 term 的每个 index 只会存储一条 log entry，append 成功后不再修改</li>
<li>一致性检查：leader 在 AppendEntries RPC 调用时会将上一条日志的索引和任期号 <code>prevLogIndex</code>, <code>prevLogTerm</code> 一并发送，即告诉 follower 接收新日志之前检查一下上一条日志是否和自己一致。<ul>
<li>上一条日志匹配成功：则 follower 将新日志 append 到本地</li>
<li>未匹配成功：follower 告知 leader 日志不一致性</li>
</ul>
</li>
</ul>
<p>集群初始化时，所有节点都是空日志，自然满足 log matching，之后的一致性检查保证了新增的日志也满足 log matching，一步步地累加日志，才能满足上边一条匹配，则前边所有日志也匹配的特性。</p>
<p>正常 leader 不宕机的情况下，leader 和 followers 的日志会一直遵从 log matching，但 leader 也会出现宕机的情况，可能出现 leader 还没来得及把新日志全部复制给 followers 的情况：</p>
<p> <a href="https://images.yinzige.com/2019-04-11-021842.jpg" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-11-021842.jpg" width="60%"></a></p>
<p>如上盒子是一条日志，编号是任期号。因为 leader 和 follower 都可能会宕机，也就可能出现如上的日志不一致的情况：</p>
<ul>
<li>a，b：follower 可能丢失部分日志</li>
<li>c，d：follower 本地可能 uncommited 的日志</li>
<li>e，f：follower 可能既缺少本该有的日志，也多出额外的日志</li>
</ul>
<p>那 leader 如何处理日志不一致的情况呢？</p>
<ol>
<li>leader 强制让日志不一致的 follower 重写自己的日志，和 leader 保持一致</li>
<li>leader 维护 <code>nextIndex[]</code> 数组，记录要发给每个 follower 的下一条日志索引。用于：</li>
</ol>
<p><a href="https://images.yinzige.com/2019-04-22-014633.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-22-014633.png" alt="image-20190422094632883"></a></p>
<p>如上的一致性检查操作能让 follower 的日志和 leader 强制保持一致。</p>
<h3 id="4-Leader-Completeness-特性"><a href="#4-Leader-Completeness-特性" class="headerlink" title="4. Leader Completeness 特性"></a>4. Leader Completeness 特性</h3><p>若某条日志在前任 leaders 中已被提交（commited），则这条日志也一定会出现在更大任期的 leader 日志中。此特性由以下限制实现：</p>
<ul>
<li>commited 状态：某条日志只有在成功复制给大多数节点后才是 commited </li>
<li>leader 选举：只有获得多数票的候选人才能成为 leader，而 voter 给候选人投票的前提是，候选人的日志至少要和 voter 的一样新：</li>
</ul>
<p>Raft 通过比较两个节点<strong>最后一条日志</strong>的索引、任期号来比较新旧：</p>
<ul>
<li>先比任期：任期不同，则任期大的更新</li>
<li>再比索引：任期相同，则索引大（更长）的日志更新</li>
</ul>
<p>如上两个 commited 大多数和 election 大多数一定会有重叠：<br><a href="https://images.yinzige.com/2019-04-22-021422.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-22-021422.png" alt="image-20190422101422311"></a></p>
<p>即 leader 节点至少收到了一个包含最新 commited 日志的节点的投票。足以说明 leader 包含最新的 commited 日志。</p>
<h3 id="5-State-Mechine-Safety-特性"><a href="#5-State-Mechine-Safety-特性" class="headerlink" title="5. State Mechine Safety 特性"></a>5. State Mechine Safety 特性</h3><p>考虑有 5 个节点的集群情况：</p>
<p> <a href="https://images.yinzige.com/2019-04-11-101454.jpg" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-11-101454.jpg" width="70%"></a></p>
<ul>
<li>a：<strong>S1</strong> 当选 term2 的 leader，将日志成功复制到 S2，<strong>S1 crash</strong></li>
<li>b：<strong>S5</strong> 当选 term3 的 leader，只接收了一条新日志，<strong>S5 crash</strong></li>
<li>c：<strong>S1</strong> 重新当选 term4 的 leader，将自己在 term2 的日志复制到了 <strong>S3</strong> 上，该条日志成功复制到了大多数节点，为 commited 状态，S1、S2、S3 的状态机均可安全地 apply</li>
</ul>
<p>不幸的是：<strong>S1 crash again！</strong>，于是出现 d：<strong>S5</strong> 重新当选 term5 的 leader，将自己在 term3 的日志复制到了全部节点上。导致 c 中可能已被 applied 的日志被回滚。</p>
<p>回滚的根本原因：<strong>S1</strong> 在 term4 中提交了自己在 term2 的旧日志。为避免日志被回滚，<u>Raft 不允许 leader 提交之前任期的日志</u>，而是在提交当前任期的新日志时候，根据 log matching 特性，<strong>顺带</strong> 将旧日志一并提交。此外，Raft 要求 leader 当选后立即尝试提交一条 no-op（无操作）的空日志，在一致性检查成功后及时将已有的日志提交。</p>
<p>如上对 leader 提交时机的约束，集群将不会出现情形 c，而是 e：<strong>S1</strong> 只提交 term4 的新日志，顺带提交 term2 的旧日志。当新日志复制成功后哪怕 <strong>S1</strong> 再次 crash，<strong>S5</strong> 也不会当选（S5 最新日志任期为3，小于 <strong>S2, S3</strong> 的 4）</p>
<h2 id="特殊-Case"><a href="#特殊-Case" class="headerlink" title="特殊 Case"></a>特殊 Case</h2><h3 id="网络分区"><a href="#网络分区" class="headerlink" title="网络分区"></a>网络分区</h3><p>如果集群内部发生网络分区，如下图举例：</p>
<ul>
<li>A, B 两个节点在上海</li>
<li>C, D, E 三个节点在北京</li>
</ul>
<p>B 节点是原 leader，假定两地线路故障，造成集群内部的网络分区。此时北京的三个节点选出了新 leader E。虽然集群中同时存在两个 leader，但二者的 term 却不同。</p>
<p> <a href="https://images.yinzige.com/2019-04-22-022355.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-22-022355.png" width="80%"></a></p>
<p>现在考虑集群对外的读写</p>
<ul>
<li><p>写：上海的客户端优先选择节点 B 进行写操作，但 leader B 无法将日志复制到大多数节点，该日志是 uncommitted 状态，不会响应客户端说写入成功，而响应写入超时。</p>
</li>
<li><p>读：若网络分区一直未恢复，则可能存在某个客户端在节点  E  上写入新数据，但在节点 B 上读到的却是旧数据。为避免在网络分区阶段读到旧数据，可有如下两种解决方案（原论文 S8）：</p>
<ul>
<li>每次处理读请求时候，都必须和大多数节点进行通信，检查自己的 leader 地位，因此能保证读取最新数据，但高频通信有效率问题。</li>
<li>使用租约机制实现心跳，若大多数节点的租约都未到期则读到的数据仍旧是最新的，但租约机制依赖时序性。</li>
</ul>
</li>
</ul>
<p>假设现网络分区恢复，节点 B 会发现有更高 term 的节点存在，就撤销自己 uncommitted 的日志，并和 leader E 进行日志同步，由此保证日志一致性。</p>
<h3 id="Leader-Crash"><a href="#Leader-Crash" class="headerlink" title="Leader Crash"></a>Leader Crash</h3><p>参考：<a href="https://www.cnblogs.com/mindwind/p/5231986.html" target="_blank" rel="noopener">Raft 为什么是更易理解的分布式一致性算法</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Raft 将集群中节点的状态分为 3 类：leader（领导）、follower（民众）、candidate（候选人），并为系统增加了许多限制来实现四个特性，从而保证多节点的数据一致性，实现节点容错。</p>
<ul>
<li>Leader Append-Only 原则<br>日志只能从 leader 流向其他节点，leader 对日志只能 append，不覆盖也不删除。</li>
<li>Election Safety 特性：<ul>
<li>一个节点每个任期只能投一张票，投票标准：候选人的日志至少要和自己一样新</li>
<li>获得多数票（过半）的候选人才能当选 leader</li>
</ul>
</li>
<li>Log Matching 特性<br>AppendEntries RPC 调用时检查日志一致性，leader 维护 <code>nextIndex[]</code> 并循环检查后强制同步日志。</li>
<li>Leader Completeness 特性：两个多数性原则会重叠，保证选出的 leader 包含集群的所有 commited 日志</li>
<li>State Mechine Safety 特性：leader 不直接提交旧日志，而是 log matching 前提下提交新日志，校验一致后顺带提交。</li>
</ul>
<p>通读论文会发现细节多且零散，待 lab 做完再补充。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://raft.github.io/" target="_blank" rel="noopener">raft.github.io</a><br><a href="http://thesecretlivesofdata.com/raft" target="_blank" rel="noopener">thesecretlivesofdata.com/raft</a><br><a href="https://www.cnblogs.com/xybaby/p/10124083.html" target="_blank" rel="noopener">一文搞懂Raft算法</a></p>
<p><a href="https://www.youtube.com/watch?v=YbZ3zDzDnrw" target="_blank" rel="noopener">Youtube: Raft lecture (Raft user study)</a> &amp; 笔记：</p>
<p><a href="https://images.yinzige.com/raft-notes.png" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/raft-notes.png" alt=""></a></p>


<pre><code>&lt;/div&gt;</code></pre>]]></content>
      <categories>
        <category>raft</category>
      </categories>
  </entry>
  <entry>
    <title>raft 论文中文翻译</title>
    <url>/2019/11/23/raft-%E8%AE%BA%E6%96%87%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<div class="post-block">
    <link itemprop="mainEntityOfPage" href="https://wuyin.io/2019/04/13/raft-paper/">


<p><a id="more"></a></p>
<h2 id="寻找一种易于理解的一致性算法（扩展版）"><a href="#寻找一种易于理解的一致性算法（扩展版）" class="headerlink" title="寻找一种易于理解的一致性算法（扩展版）"></a>寻找一种易于理解的一致性算法（扩展版）</h2><p>斯坦福大学：<a href="https://ongardie.net/diego/" target="_blank" rel="noopener">Diego Ongaro</a> 和 <a href="https://web.stanford.edu/~ouster/cgi-bin/home.php" target="_blank" rel="noopener">John Ousterhout</a></p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Raft 是一种管理复制日志的一致性算法，功能和性能与 Multi-Paxos 算法相当，但结构上的差异使其更易理解和实现。为提高可理解性，Raft 抽离了一致性算法中的关键模块：leader 选举（leader election）、日志复制（log replication）、安全性（safety），并通过增强一致性来减少必须考虑的一致性状态的数量。此外 Raft 还实现了新的机制让集群节点动态变化，通过重叠大多数（overlapping majorties）来保障其变化安全。</p>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>一致性算法能使多节点组成的集群像单机一样工作，哪怕集群内的部分节点不可用。过去十年内 Paxos 协议几乎成为了分布式一致性算法的代名词，但其晦涩难懂且需进行大幅修改才能应用于实际系统中。于是我们实现了更易理解和学习的一致性算法：Raft，为提升可理解性，Raft 分解了一致性算法中的几个模块：leader 选举、日志复制和安全性，并减少了状态机的状态数量（比 Paxos 降低了不确定性的程度，减少了多节点数据不一致的方式）</p>
<p>Raft 和一些现有的一致性算法类似，但也有创新之处：</p>
<ul>
<li>强 leader：Raft 相比其他一致性算法，赋予了 leader 更高的领导能力，比如日志 entry 只能从 leader 流向其余节点，这种简化版的复制方式让日志更易管理，也让 Raft 更易理解。</li>
<li>leader 选举：Raft 使用随机 timer 来选举新 leader，基于算法本身的心跳机制即可实现，还能简化了竞选平票时冲突的处理。</li>
<li>成员关系调整：Raft 为调整成员配置变更使用了联合一致性（joint consensus），在配置切换时集群中新旧配置的大多数节点会重叠，以此保证对外持续可用。</li>
</ul>
<p>论文剩余章节安排如下：第 2 节介绍复制状态机（replicated state mechine）问题，第 3 节讨论 Paxos 算法的不足之处，第 4 节介绍 Raft 更易理解之处，第 5-8 节解释了 Raft 算法的细节，第 9 节评价了 Raft 算法，第 10 节讨论相关话题。</p>
<h2 id="2-复制状态机（Replicated-state-machines）"><a href="#2-复制状态机（Replicated-state-machines）" class="headerlink" title="2. 复制状态机（Replicated state machines）"></a>2. 复制状态机（Replicated state machines）</h2><p>一致性算法在 <a href="https://www.cs.cornell.edu/fbs/publications/SMSurvey.pdf" target="_blank" rel="noopener">《replicated state mechines》</a> 背景下衍生而来。其要求多个主机上的状态机要能生成相同状态的副本，所以哪怕部分主机宕机，整个集群对外依旧可用。复制状态机在分布式系统中常用于解决节点容错相关的问题。如 GFS, HDFS 等大规模系统均使用单一 leader 节点机制，并使用独立的复制状态机来管理 leader 选举和存储配置信息，以实现在 leader 宕机的情况下依旧存活并快速恢复集群状态。复制状态机的应用案例有 Chubby 和 Zookeeper</p>
<p>复制状态机使用复制日志来实现，其结构如下图：</p>
<p> <a href="https://images.yinzige.com/2019-04-09-152316.jpg" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-09-152316.jpg" width="80%"></a></p>
<blockquote>
<p>图1：复制状态机结构图。一致性算法管理的是记录客户端状态命令的日志，多台状态机以相同的顺序执行日志中相同的命令，从而产生相同的输出，保持状态一致性。</p>
</blockquote>
<p>复制状态机通常基于复制日志实现，如上图中每台服务器（节点）都保存着存储一系列命令的日志，各自日志中的<strong>命令相同</strong>且<strong>顺序一致</strong>，所以多个节点执行系列命令的结果都是<strong>相同的</strong>，因此状态机的状态才能保持一致。</p>
<p><strong>保持复制相同日志</strong>就是一致性算法的工作了。某个节点的一致性模块负责接收来自客户端的命令并将其写入自己的日志，同时它还要和其余服务器上的一致性模块进行通信以确保每条命令都以同一顺序写入它们的日志中，即使部分节点已宕机。一旦命令被正确复制，其余节点上的状态机都会以相同顺序应用日志中的命令，并将输出返回给客户端。最终使得多个节点组成的集群就像一台独立且高可靠的状态机。</p>
<p>实际应用中的一致性算法大多有如下特性：</p>
<ul>
<li><strong>安全性保证（绝不返回错误的结果）</strong>：在所有非拜占庭错误下，比如网络延迟、网络分区、丢包、包冗余和包乱序等情况下都要保证安全性。</li>
<li><strong>可用性保证</strong>：只要集群中大多数节点正常运行、能相互通信、能与客户端通信，就要保证可用性，因此在 5 个节点的集群中要能容忍 2 个节点不可用。节点不工作即认为不可用，随后它们可能恢复正常存储并重新加入集群。</li>
<li><strong>日志的一致性不依赖于时序性</strong>：时钟出错或超高延迟等最坏情况下才会引起可用性问题</li>
<li><strong>尽快响应命令的执行</strong>：通常一条命令需尽快在大多数节点响应 RPC 后响应客户端，少部分慢节点不能成为整个系统的性能瓶颈。</li>
</ul>
<h2 id="3-Paxos-的不足之处"><a href="#3-Paxos-的不足之处" class="headerlink" title="3. Paxos 的不足之处"></a>3. Paxos 的不足之处</h2><p>一言以蔽之：Paxos 虽然高效，但过于晦涩难懂。在工程应用中还需进行大量结构调整。</p>
<h2 id="4-更易于理解的设计"><a href="#4-更易于理解的设计" class="headerlink" title="4. 更易于理解的设计"></a>4. 更易于理解的设计</h2><p>Raft 的几个设计目标：</p>
<ul>
<li>易于实现并应用在实际系统的开发中</li>
<li>所有情况下保证安全性，大多数情况下保证可用性</li>
<li>大部分操作要保证高效</li>
<li>最重要也最困难的目标：提升可理解性</li>
</ul>
<p>Raft 使用两种方式提高可理解性：</p>
<ul>
<li>分解子问题：将一致性问题分解为 leader 选举、日志复制和安全保障。</li>
<li>减少待考虑的状态数量来简化状态空间：尽可能加强系统一致性并降低不确定性。</li>
</ul>
<h2 id="5-Raft-一致性算法"><a href="#5-Raft-一致性算法" class="headerlink" title="5. Raft 一致性算法"></a>5. Raft 一致性算法</h2><p>Raft 是一种用来管理第 2 节所述复制日志的算法。下边的图 2 简要总结了算法内容以便参考，图 3 列出了 Raft 的原则和特性。图中内容将在本节介绍。</p>
<p>Raft 通过选举产生 leader 并让其全权管理复制日志来实现一致性。leader 接收来自客户端的日志条目（log entries），并将这些日志复制到其余节点，同时 leader 还要在保证安全时告知其他节点将日志应用到他们的状态机中。单一 leader 极大简化了复制日志的管理工作，比如它无需和其他节点商议就能决定将新日志放到什么位置，并且限制了数据只能从 leader 流向其余节点。当 leader 不可用后其他节点可重新选举出新 leader</p>
<p>通过单一 leader 的机制，Raft 将一致性问题分解为 3 个独立的子问题：</p>
<ul>
<li>leader 选举：当现有 leader 不可用时要选举出新 leader</li>
<li>日志复制：leader 需接收客户端的请求命令，随后复制到集群中的其他节点，并强制要求其余节点日志与自己保持一致</li>
<li>安全性保证：Raft 保证数据安全源于如下的状态机特性（原文图 3）：任意一个节点在自己的状态机上应用了一条确定的日志，那其他节点的状态机在同一日志索引上不会应用不同的日志（<strong>5.4</strong>）：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">原则</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">选举安全原则（Leader Election Safety）</td>
<td style="text-align:center">每个任期内最多有一个 leader 会被选出</td>
</tr>
<tr>
<td style="text-align:center">Leader Append-Only 原则</td>
<td style="text-align:center">leader 绝不能覆盖或删除自己的日志，对新日志只能进行 append 操作</td>
</tr>
<tr>
<td style="text-align:center">日志匹配原则（Log Matching）</td>
<td style="text-align:center">若两份日志在某个<strong>相同索引</strong>位置上条目的<strong>任期也相同</strong>，就认为从两份日志从头到这个索引间的日志都相同。</td>
</tr>
<tr>
<td style="text-align:center">Leader 完整性原则（Leader Completeness）</td>
<td style="text-align:center">若一条日志在某个任期内已提交（<strong>commited</strong>），那它也一定会出现在所有更高任期的 Leader 中</td>
</tr>
<tr>
<td style="text-align:center">状态机安全原则（State Mechine Safety）</td>
<td style="text-align:center">若一个节点的状态机应用（<strong>applied</strong>）了给定索引位置的日志，那其余节点在相同索引位置应用的必定也是相同的日志。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>图3：Raft 无时无刻都能保障以上特性。</p>
</blockquote>
<p>如下 4 个小点是关于 Raft 的简要总结（不包含节点身份变更和日志复制的细节）（原文图 2）</p>
<p><strong>（1）节点的状态</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">状态</th>
<th style="text-align:center">所有节点均持久化存储的状态</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>currentTerm</code></td>
<td style="text-align:center">节点已知的最后一个任期号（首次启动后从 0 开始递增）</td>
</tr>
<tr>
<td style="text-align:center"><code>votedFor</code></td>
<td style="text-align:center">当前任期内获得选票的候选人 id（没有则为 null）</td>
</tr>
<tr>
<td style="text-align:center"><code>log[]</code></td>
<td style="text-align:center">日志条目集合，每个条目包含：待执行的命令、收取日志时 leader 的任期号</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">状态</th>
<th style="text-align:center">所有节点上经常变更的状态</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>commitIndex</code></td>
<td style="text-align:center">节点上已知的最大 <strong>commited</strong> 日志索引（从 0 自增）</td>
</tr>
<tr>
<td style="text-align:center"><code>lastApplied</code></td>
<td style="text-align:center">节点上最后一条被状态机 <strong>applied</strong> 的日志索引（从 0 自增）</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">状态</th>
<th style="text-align:center">leader 中易变更的状态（选举后会重新初始化）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>nextIndex[]</code></td>
<td style="text-align:center">对其他节点，分别记录下一个要发送的日志索引（初值为 leader 最后一条日志的索引 +1）</td>
</tr>
<tr>
<td style="text-align:center"><code>matchIndex[]</code></td>
<td style="text-align:center">对其他节点，分别记录已成功 <strong>replicated</strong>（复制）的最大日志索引（从 0 自增）</td>
</tr>
</tbody>
</table>
<p><strong>（2）Append Log RPC</strong></p>
<p>此 RPC 用于 leader 向其余节点复制日志、发送心跳请求。</p>
<table>
<thead>
<tr>
<th style="text-align:center">入参</th>
<th style="text-align:center">注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>term</code></td>
<td style="text-align:center">leader 自己的任期号</td>
</tr>
<tr>
<td style="text-align:center"><code>leaderId</code></td>
<td style="text-align:center">leader id，便于  follower 节点将客户端请求重定向给 leader 处理</td>
</tr>
<tr>
<td style="text-align:center"><code>prevLogIndex</code></td>
<td style="text-align:center">新日志的上一条日志的索引</td>
</tr>
<tr>
<td style="text-align:center"><code>prevLogTerm</code></td>
<td style="text-align:center">prevLogIndex 日志任期号</td>
</tr>
<tr>
<td style="text-align:center"><code>entries[]</code></td>
<td style="text-align:center">要存储的日志数据（心跳请求的日志为空，为提升效率可能一次发送多条）</td>
</tr>
<tr>
<td style="text-align:center"><code>leaderCommit</code></td>
<td style="text-align:center">leader 的 commitIndex</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">返回值</th>
<th style="text-align:center">注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>term</code></td>
<td style="text-align:center">follower 的 currentTerm，用于 leader 更新自己的任期号</td>
</tr>
<tr>
<td style="text-align:center"><code>succ</code></td>
<td style="text-align:center">若 follower 在 <code>prevLogIndex</code> 和 <code>prevLogTerm</code> 处的日志都一致则为 true</td>
</tr>
</tbody>
</table>
<p>RPC 被调用方（followers）需实现：</p>
<ul>
<li>若 term &lt; currentTerm 则 succ 返回 fasle<strong>（5.1）</strong> // 已有更新 leader</li>
<li>若在 prevLogIndex 处日志的任期号与 prevLogTerm 不一致，则返回 false<strong>（5.3）</strong> // 日志不一致</li>
<li>若已存在的日志和新日志冲突（索引相同，任期不同），则删除本条及随后的所有日志条目<strong>（5.3）</strong> // follower 本地日志过旧，强制更新</li>
<li>Append 任意本地不存在的新日志</li>
<li>若 leaderCommit &gt; commitIndex，则将 commitIndex 重置为 leaderCommit 和自己最新日志索引中较小的一个值。</li>
</ul>
<p><strong>（3）RequestVote RPC</strong></p>
<p>此 RPC 用于候选人发起投票，征集选票。</p>
<table>
<thead>
<tr>
<th style="text-align:center">入参</th>
<th style="text-align:center">注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>term</code></td>
<td style="text-align:center">候选人的任期号</td>
</tr>
<tr>
<td style="text-align:center"><code>candidateId</code></td>
<td style="text-align:center">候选人 id</td>
</tr>
<tr>
<td style="text-align:center"><code>lastLogIndex</code></td>
<td style="text-align:center">候选人节点上最新日志的索引<strong>（5.4）</strong></td>
</tr>
<tr>
<td style="text-align:center"><code>lastLogTerm</code></td>
<td style="text-align:center">候选人节点上最新日志的任期号<strong>（5.4）</strong></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">返回值</th>
<th style="text-align:center">注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>term</code></td>
<td style="text-align:center">follower（选民）的任期号，用于候选人更新自身任期号</td>
</tr>
<tr>
<td style="text-align:center"><code>voteGrandted</code></td>
<td style="text-align:center">赢得本张选票则为 true</td>
</tr>
</tbody>
</table>
<p>RPC 的被调用方（选民 followers）需实现：</p>
<ul>
<li>若 term &lt; currentTerm 则不投票，返回 false<strong>（5.1）</strong> // 已有更新的 leader</li>
<li>若 votedFor 为 null 或为 candidateId，且候选人的日志和自己的一样新，则投票返回 true<strong>（5.2，5.4）</strong> </li>
</ul>
<p><strong>（4）所有节点需准从的规则</strong></p>
<p><strong>全部节点：</strong></p>
<ul>
<li>若 <code>commitIndex</code> &gt; <code>lastApplied</code>：将 lastApplied 自增 1，同时在状态机上执行 <code>log[lastApplied]</code> 日志命令<strong>（5.3）</strong></li>
<li>如果 RPC 请求或返回的 <code>term T &gt; currentTerm</code>：将 currentTerm 重置为 T，并自降身份为 follower<strong>（5.1）</strong></li>
</ul>
<p><strong>对于 Follwers：</strong></p>
<ul>
<li>响应 leader 和 candidate（候选人）的 RPC 请求</li>
<li>若选举超时还未收到 leader 心跳，也没收到候选人的投票请求，则自抬身价为候选人</li>
</ul>
<p><strong>对于候选人：</strong></p>
<ul>
<li>成为候选人后开始选举：<ul>
<li>currentTerm 自增 1</li>
<li>给自己投一张选票</li>
<li>重置选举超时定时器</li>
<li>向其余节点发起 RequestVote RPC</li>
</ul>
</li>
<li>若收到了大多数节点的选票：升级为 leader</li>
<li>若收到了来自新 leader 的 AppendEntries RPC：降级为 follower</li>
<li>若本轮选举超时，开启下一轮选举</li>
</ul>
<p><strong>对于 Leader：</strong></p>
<ul>
<li>成为 leader 后向其余节点发送心跳 RPC 请求，并在无日志请求的空闲时段重复发送心跳请求以防 followers 超时<strong>（5.2）</strong></li>
<li>接收到来自客户端的命令后，将其 Append 到本地日志，当该日志被状态机成功应用后再响应客户端<strong>（5.3）</strong></li>
<li>若 follower 最后一条日志索引 &gt;= <code>nextIndex</code>，则 leader 对 <code>nextIndex</code> 开始的日志发起 Append Log RPC<ul>
<li>若 RPC 调用成功：更新相应 follower 的 <code>nextIndex</code>, <code>matchIndex</code><strong>（5.3）</strong></li>
<li>如 RPC 因为日志不一致导致调用失败：自减 <code>nextIndex</code> 再重试<strong>（5.3）</strong> </li>
</ul>
</li>
<li>若存在 N 满足 <u>N &gt; commitIndex</u>，同时大多数节点满足 <u>matchIndex[i] &gt;= N</u>，并且 <u>log[N].term == currentTerm</u>：直接将 <code>commitIndex</code> 重置为 N<strong>（5.3，5.4）</strong></li>
</ul>
<h3 id="5-1-Raft-基础"><a href="#5-1-Raft-基础" class="headerlink" title="5.1 Raft 基础"></a>5.1 Raft 基础</h3><p>一个 Raft 集群包含多个服务器节点，比如典型的集群有 5 个节点，能容忍 2 个节点不可用。任何时刻任意节点的状态只会有三种身份：leader，follower，candidate，通常集群中只会有 1 个 leader，其余节点均为 follower，其身份转换如下图 4：</p>
<ul>
<li><p>leader 处理所有客户端的请求：若客户端请求了 follower 那 follower 会将请求重定向给 leader 处理</p>
</li>
<li><p>follower 是被动响应的：它们不会发起任何请求，只会响应来自 leader 或候选人的请求</p>
</li>
<li>候选人身份只会在 <strong>（5.2）</strong>中选举新 leader 时才会用到</li>
</ul>
<p>三种身份更迭如下图4：</p>
<p> <a href="https://images.yinzige.com/2019-04-10-095432.jpg" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-10-095432.jpg" width="60%"></a></p>
<blockquote>
<p>图4：节点身份转变过程。follower 只响应其余节点的请求，如果它在超时时间内未收到任何请求或心跳，则转变为候选人并开始新一轮选举。候选人如果收到大多数节点的选票则升级为 leader。而 leader 会保持 leader 身份直到自己宕机。</p>
</blockquote>
<p>如下图 5，Raft 将集群时间换分割成多个任意长度的任期，任期使用连续<strong>整数</strong>标识，即任期号。每次任期都始于选举，如果候选人引得了选举<strong>（5.2）</strong>，则它会变为下一任期的 leader。一些特殊情况下，选票可能被多个候选人瓜分导致未选出 leader，即当前任期内无 leader，不过此情形仅持续很短时间就开始下一轮选举。Raft 能保证任一任期内至多有一个 leader</p>
<p> <a href="https://images.yinzige.com/2019-04-10-095842.jpg" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-10-095842.jpg" width="60%"></a></p>
<blockquote>
<p>图5：Raft 将集群时间划分成多个连续的任期，每个任期均始于选举。在选举成功后，单一 leader 会管理集群直到任期结束。有些选举会因为任期结束都还未选出 leader 而失败，会导致该任期内无 leader。</p>
</blockquote>
<p>不同节点在不同时间内可观察到任期变更，某些情况下节点也可能不知道发生了 leader 选举，甚至感知不到整个任期。Raft 的任期发挥了逻辑时钟的作用，让节点能检测过期信息比如过期的 leader。每个节点都会维护一个 <code>currentTerm</code> 数字，它只会单调递增。在节点间通信时会交换彼此的 <code>currentTerm</code>：</p>
<ul>
<li>若一个节点任期号比另一个小，那它会将自己的任期号更新为较大的一个</li>
<li>若 <strong>leader 或候选人</strong>发现自己的任期号<strong>过期</strong>了，那它会降低身份变为 follower</li>
<li>若节点收到的请求对应的任期号已过期，则拒绝处理此请求</li>
</ul>
<p>节点间通过 RPC 通信，基本的一致性算法只需要  2 种 RPC：</p>
<ul>
<li>RequestVote RPC：在候选人开始发起选举时调用<strong>（5.2）</strong></li>
<li>AppendEntries RPC：在 leader 复制日志或发送心跳到其他节点时调用<strong>（5.3）</strong></li>
</ul>
<p>第 7 节会添加在节点间传输快照的第三种 RPC。当 RPC 调用未及时返回则节点会重试调用，而且通常会将多个调用并行化以提高性能。</p>
<h3 id="5-2-Leader-选举"><a href="#5-2-Leader-选举" class="headerlink" title="5.2 Leader 选举"></a>5.2 Leader 选举</h3><p>Raft 使用心跳机制来触发 leader 选举。当集群刚启动时节点都是 follower 身份，只要收到 leader 或候选人的有效 RPC 调用，节点就会继续保持 follower 身份。leader 会定期发送心跳（无条目的空日志 AppendEntries RPC）给所有 follower 来维持自己的 leader 身份，如果某个 follower 在<strong>选举超时</strong>时间段内都未收到来自 leader 的任何调用，则认为 leader 已失效并成为候选人开启新一轮 leader 选举。</p>
<p>选举开始，follower 自增自己的任期号并升级为候选人身份，它会先投自己一票，随后并行地向其余节点发起 RequestVote RPC 调用，它会继续保持候选人身份直到下述情形发生：</p>
<ul>
<li><p>它在本轮选举中赢得多数票</p>
<p>如果候选人在一轮选举中获得了全部节点中大多数节点的选票，就算赢得本轮选举。每个节点依照先来先服务（first-come-first-served）的原则（5.4 对新加额外的限制），在每轮选举中最多投一个候选人。因此 <strong>大多数原则</strong> 能确保每轮选举最多选只会有一个候选人会获胜。一旦候选人赢得选举成为了新 leader，它就会发送心跳给其余节点来树立自己的领导地位，以阻止新一轮选举。</p>
</li>
<li><p>已有其他节点成为 leader</p>
<p>候选人在收集选票时可能会收到其他已成为 leader 的节点发来的 AppedLog RPC 请求：</p>
<ul>
<li>若请求任期不小于自己的任期号，那就认可对方的 leader 身份，自己降为 follower</li>
<li>若请求中的任期比自己的小，则拒绝响应调用并继续保持自己的候选人身份</li>
</ul>
</li>
<li><p>选票被瓜分，选举超时后还未选出 leader</p>
<p>若多个 follower 同时变更为候选人，那选票可能会被瓜分导致没有一个候选人能收到大多数选票。这种情况下多个候选人会在选举超时后分别开启下一轮选举，继续向其他节点发起 RequestVote RPC 请求。然而如果没有额外机制来分配选票，这种情况会周而复始地发生。</p>
<p>Raft 使用<strong>随机的选举超时时长</strong>来避免出现选票被瓜分的情况，就算出现了也能很快解决。为了从根源上阻止选票被瓜分，各候选人的选举超时时长是从固定的时长区间（如 150-300ms）中随机选取的，这种机制保证多数情况下只有一个候选人超时，随后赢得选举并在其他候选人选举超时前发送心跳请求。同样的，每个候选人在开启新一轮选举前都要随机重置自己的选举超时时长，超时再重启下一轮选举。此种随机超时机制能有效避免选票被瓜分的情况。</p>
<p>随机选举超时机制不仅容易理解和实现，而且明确高效。</p>
</li>
</ul>
<h3 id="5-3-日志复制"><a href="#5-3-日志复制" class="headerlink" title="5.3 日志复制"></a>5.3 日志复制</h3><p>一旦成功选举出 leader，它就开始接收并处理客户端请求，每个请求都包含一个状态机要执行的命令。leader 会将此命令 append 到本地日志，随后向其余节点发起 AppendEntries RPC 请求来 replicate（复制）该命令日志。当日志成功复制后（如下详述），leader 的状态机才会应用本条日志并将执行结果返回给客户端。若 followers 不可用或发生了网络丢包，leader 会无限次重试调用 AppendEntries RPC（即使已将执行结果响应给了客户端），直到 followers 成功存储所有的日志条目。</p>
<p> <a href="https://images.yinzige.com/2019-04-10-145221.jpg" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-10-145221.jpg" width="65%"></a></p>
<blockquote>
<p>图6：日志由有序序号标识的日志条目组成。每个条目包含创建时 leader 的任期号（图中盒子编号）、要应用到各自状态机的命令。日志条目的可提交（commited）状态标识它可安全应用到状态机。</p>
</blockquote>
<p>日志的组织方式如上图。每条日志会记录：</p>
<ul>
<li>状态机命令</li>
<li>leader 接收到此命令时的任期号：用于检测不同节点上该日志的一致性，还能保证图 3 列出的部分特性</li>
<li>索引：每条日志都有一个整数索引值标识其在日志中的位置</li>
</ul>
<p>leader 决定何时将日志应用到状态机上是安全的，此时日志状态为<strong>已提交（commited）</strong>。Raft 能保证已提交的日志会持久化存储，最终都都会应用到集群中可用的状态机上。一旦 leader 创建的日志条目已在大多数节点上成功复制，那这条日志是已提交状态，比如图 6 中的条目 7（leader、2、4 共三个节点都已成功复制），同时意味着 leader 节点上该条日志前的所有日志都是已提交状态，即使有些日志是前任 leaders 创建的（<strong>5.4</strong>）。leader 会维护它所知已提交日志的最大索引 <code>commitIndex</code>，在以后调用 AppendEntries RPC 请求时会将此索引带上以便让其他节点知道 leader 的提交位置。当 follower <strong>被告知</strong>某条日志为已提交状态，即可安全地在本地状态机上应用该日志。</p>
<p>Raft 的日志机制保证了不同节点上日志的一致性，此机制降低了系统复杂度，让系统行为变得可预测，同时也保障了安全（图 3 的安全性原则）</p>
<p>Raft 维护了以下特性：若在不同日志中，两条日志的索引号、任期号都一致，则：</p>
<ul>
<li>它们存储的<strong>命令是一致的</strong>：是因为 leader 在一个任期的一个日志索引上只存储一条日志，而且此后该条日志的位置不再修改，所以固定索引的日志值是不变的。</li>
<li><p>它们在该条<strong>之前的所有日志都是一致的</strong>：由 leader 的一致性检查保证：leader 在复制日志发起 AppendEntries RPC 请求时会将上一条日志的索引 <code>prevLogIndex</code>、任期号 <code>prevLogTerm</code> 传入用于一致性检查。若 follower 在日志中没有发现相同索引、相同任期号的条目，则拒绝接收此次新日志。</p>
<p>日志的一致性检查总结：集群初始状态的空日志是满足日志匹配原则（Log Matching Property），此后的一致性检查保证了新增日志后仍然是匹配的。因此只要 leader 收到 AppendEntries RPC 成功返回，就认为该 follower 的日志与自己的一致。</p>
</li>
</ul>
<p>正常情况下，leader 和 followers 的日志是保持一致的，即 AppendEntries 一致性检查不会失败。然而，leader 宕机后很可能造成日志不一致（旧 leader 可能还没来得及将它的日志条目全部复制给 followers），不一致程度会随着 leader 和 follower 的一些列崩溃而愈发严重。</p>
<p>下图是 followers 日志和新 leader 不一致的情形：follower 的日志可能比现有 leader 的日志更少，也可能更多，这部分错开的日志可能在多个任期内都一直存在。</p>
<p> <a href="https://images.yinzige.com/2019-04-11-021842.jpg" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-11-021842.jpg" width="60%"></a></p>
<blockquote>
<p>图7：当新 leader 当选时 followers 状态可能是（a-f），每个盒子即一条日志，盒子编号是该条日志的任期号。顶部是 leader 日志条目，其他：</p>
<ul>
<li>a，b：follower 可能丢失部分日志</li>
<li>c，d：follower 本地可能 uncommited 的日志</li>
<li>e，f：follower 可能既缺少本该有的日志，也多出额外的日志</li>
</ul>
<p>比如 f 场景：2 号任期 leader 新增的日志还没提交就宕机了，随后很快重启并被选举为任期 3 的 leader，继续接收请求新增日志。然而在 3 号任期内日志还没来得及提交就又宕机了。</p>
</blockquote>
<p>在 Raft 中，leader 通过强制 followers 复制自己的日志来处理日志不一致的问题，即 follower 上有冲突的日志会被直接重写，<strong>5.4</strong> 节会增加额外机制来保证此操作是安全的。</p>
<p>为保证 follower 的日志和自己一致，leader 必须对比查找与 follower 最后一条相同的日志，删除 follower  在该位置后的所有日志，随后发送自己在该位置后的所有日志给 follower，从而保证日志一致性。</p>
<p>以上操作都在 AppendEntries RPC 做一致性检查时完成，leader 对每个 follower 都维护了 <code>nextIndex</code>，标识下一个要发送给 follower 的日志索引。当 leader 刚启动时，会将所有 <code>nextIndex</code> 重置为本地最后一条日志的索引加 1</p>
<p>若某个 follower 的日志与 leader 不一致（ follower 日志超前）：那下次 AppendEntries RPC 一致性检查会失败，随后 leader 递减该 <code>nextIndex</code> 再次调用，直至 leader 和 follower 的日志匹配成功。匹配成功后，follower 要删除该匹配点之后的所有日志，再 append leader 在匹配点后的日志（强制同步）。当 AppendEntries RPC 调用成功后，follower 的日志就和 leader 保持一致，直到该 leader 的任期结束。</p>
<blockquote>
<p>算法实现时可通过减少 AppendEntries RPC 调用失败的次数进行优化。如 follower 在拒绝调用后，可记录下冲突日志的任期号，在该任期内存储的第一条日志索引。有了这些信息，leader 能增加 nextIndex 直接跳过该任期内的所有冲突日志，如此仅需一次 AppendEntries RPC 调用而非多次。</p>
</blockquote>
<p>在这种机制下，leader 在任期内无需额外的操作来保证日志的一致性，它只需要处理常规操作，日志就能自动地在 AppendEntries RPC 一致性检查失败时趋于一致。</p>
<p>日志复制机制证实了第 2 节中的一致性特性：只要集群中的大多数节点正常工作，Raft 就正常 accept，replicate 和 apply 新日志。通常情况下，一条新日志能在一轮 RPC 调用中就复制到大多数节点上，所以单个低性能的慢 follower 不会影响到集群性能。</p>
<h3 id="5-4-安全性"><a href="#5-4-安全性" class="headerlink" title="5.4 安全性"></a>5.4 安全性</h3><p>前两小节详述了 Raft 的 leader 选举和日志复制两种机制，截止目前还不能完全保证每个节点的状态机都会以相同顺序执行相同命令（能保证各节点的日志一致性）。如 leader 提交某些日志时某个 follower 不可用，之后该 follower 被选举成新 leader，会覆盖这些自己未接收到的日志，最终导致多台状态机执行的命令序列不一致。（解决办法：引入新机制，保证后续新 leader 一定含有之前 leaders 提交的所有日志）</p>
<p>本节在 leader 选举时加入限制措施继续完善 Raft 算法，这些选举限制能确保每个任期的 leader  都存有前任 leaders 的所有已提交日志（图 3 中的 Leader 完整性原则）。这一选举限制让日志提交的规则更为清晰。本节最后会用草图说明 leader 完整性原则是如何纠正各状态机行为的。</p>
<h4 id="5-4-1-选举限制"><a href="#5-4-1-选举限制" class="headerlink" title="5.4.1 选举限制"></a>5.4.1 选举限制</h4><p>在所有基于 leader 的一致性算法中，leader 最终都要存储所有已提交的日志。不过在一些算法中，如 Viewstamped，节点即使不存储所有已提交的日志也可被选举为 leader，是因为这些算法有额外机制来找到缺失的日志并传送给新 leader，这一过程会在选举时完成或选举后立即开始，不幸的是，这种机制过于复杂。Raft 用更简单的方式保证所有前任 leaders 提交的日志在选举时都会出现在新 leader 中，而不是要传输旧日志。因此日志只会有一个流动方向：从 leader 流向 followers，并且 leader 从不覆盖或删除已有日志。</p>
<p>Raft 通过投票来防止<strong>不含全部已提交日志</strong>的候选人赢得选举。候选人为了获胜需与大多数节点通信，这意味着每条已提交的日志至少会出现在一个节点上。若它的日志至少和大多数节点的<strong>一样新</strong>（下述），就说明它存有全部已提交日志。RequestVote RPC 需实现：RPC 请求参数会带上候选人的日志信息，若投票节点的日志比候选人的还新则不投票。</p>
<p>Raft 通过比较两份日志中<strong>最后一条日志</strong>的索引、任期来比较新旧：</p>
<ul>
<li>任期不同，则任期更大的日志新</li>
<li>任期相同，则索引更大的日志新</li>
</ul>
<h4 id="5-4-2-提交前-leaders-任期内的日志"><a href="#5-4-2-提交前-leaders-任期内的日志" class="headerlink" title="5.4.2 提交前 leaders 任期内的日志"></a>5.4.2 提交前 leaders 任期内的日志</h4><p>如 <strong>5.3</strong> 所述，当日志被大多数节点存储后 leader 才会认为该条日志是已提交的。如果 leader 在提交日志条前宕机，以后的新 leader 会尝试继续复制该条日志。不过新 leader 无法断定已存在于大多数节点上的日志是否真的已被提交。如图 8 (c) 中 S1 可能已将日志复制到大多数节点，但依旧可能被 (d) 中 S5 的日志覆盖。</p>
<p> <a href="https://images.yinzige.com/2019-04-11-101454.jpg" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-11-101454.jpg" width="70%"></a></p>
<blockquote>
<p>图8：如上的时序图说明，为什么新 leader 不能判断之前任期内的日志的提交状态：</p>
<ul>
<li><p>(a)：S1 作为 2 号任期的 leader 将索引为 2 的日志复制到节点 S2 上 </p>
</li>
<li><p>(b)：S1 宕机。S5 获得来自 S3、S4 及自己共三张多数票，成为 3 号任期新 leader，随后在本地索引 2 上存储新日志。</p>
</li>
<li><p>(c)：S5 宕机。S1 重启，获得 S2、S3 的选票后重新选为 4 号任期 leader，继续复制索引 2 上的日志。</p>
</li>
</ul>
<p>此时，任期号为 2 的日志已成功复制到（replicated）大多数节点（S1、S2、S3），但这条日志未提交（uncommitted）</p>
<ul>
<li>(d) / (e)<ul>
<li>(d)：若 S1 再次宕机。S5 能被 S2、S3、S4 选为新 leader，并将自己在 3 号任期还没来得及提交的日志强制覆盖到其他节点。</li>
<li>(e)：若 S1 在宕机前将<strong>自己任期内的新日志</strong>复制给了大多数节点（S2、S3），那后面产生的新日志就会被提交，从而导致 S5 不会赢得选举（日志旧 3 &lt; 4），由此它之前的日志条目也已提交。</li>
</ul>
</li>
</ul>
</blockquote>
<p>为解决图 8 中的问题，Raft <strong>不会单纯地统计<u>前任期内</u>的某条日志的副本数来决定是否要提交</strong>。只有<strong><u>当前任期内</u></strong>的日志能统计副本数来判断是否已提交。一旦前任期内的日志以这种方式提交，因为日志匹配特性，该日志之前的所有日志都会被间接提交。（理解：从第一任期 leader 开始，通过判断自己的一条新日志是否已被大多数节点复制来判断是否已提交。之后 RPC 进行日志的一致性检查保证了 follower 的日志与自己匹配。由此迭代，后边的新 leader （旧 follower）也会保存有旧 leader 的所有已提交日志）</p>
<p>Raft 在复制之前任期内的日志时，会保留旧的任期号，这使日志提交更为复杂。但在其他一致性算法中，同样复制场景则会使用新的任期号。Raft 为已提交的日志维护了旧的任期号，因此在对比日志时更为简单，也让新 leader 发送更少的之前任期日志。</p>
<h4 id="5-4-3-安全性证明"><a href="#5-4-3-安全性证明" class="headerlink" title="5.4.3 安全性证明"></a>5.4.3 安全性证明</h4><p>如上给定了完整的 Raft 算法，本节将讨论 leader 完整性原则（<strong>9.2</strong> 详述）。通过反证法，假设完整性原则不存在，推导出会引发的矛盾。假设任期 T 的 leaderT 在自己任期内提交了一条日志，但本条日志未保存在随后的新 leader 中，比如任期 T 随后任期是 U，leaderU 上未保存该条 leaderT 提交的日志：</p>
<p> <a href="https://images.yinzige.com/2019-04-11-145954.jpg" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-11-145954.jpg" width="50%"></a></p>
<blockquote>
<p>图9：若节点 S1（任期 T 的 leader）在任期内提交了一条新日志，而 S5 在紧随的任期 U 内选为了新 leader，所以至少必有一个节点（S3）既接收了 leaderT 的新日志，还给 S5 投了一票。</p>
</blockquote>
<ol>
<li>leaderU 肯定缺少 leaderT 已提交的那条日志（leader 不会覆写或删除日志）</li>
<li>leaderT 成功将日志复制到大多数节点上，同时 leaderU 赢得了大多数节点的选票。因此至少会有 1 个节点（<strong>voter</strong>）及接收了 leaderT 发来的日志，还给 leaderU 投了一票。</li>
<li>voter 一定是先收到 leaderT 的日志，再给 leaderU 投票的。如果先收到 leaderU 的投票请求，则会因为 <code>T &lt;  U</code> 直接拒绝 leaderT 的日志 AppendEntries RPC</li>
<li>voter 在投票给 leaderU 时依旧会把该日志存下来，因为基于假设，T 任期后的任何 leader 都应包含该日志。leader 不删日志，而 follower 只会在与 leader 日志冲突时才删除自己的日志。</li>
<li>voter 给 leaderU 投了票，那 leaderU 的日志至少和 voter 的一样新。<strong>矛盾 1：leader 日志更旧，voter 不应该投票</strong></li>
<li>首先，若 voter 和 leaderU 的最后一条日志任期号一致，leaderU 的日志至少和 voter 的一样长。<strong>矛盾2：leaderU 的日志中并不包含 leaderT 复制到 voter 的那一条，不应该一样长</strong></li>
<li>否则，leaderU 最后一条日志的任期号就一定比 voter 的大，也定比 T 大，因为 voter 的最后一条日志任期号最小都是 T（保存有任期 T 提交的日志）。创建了 leaderU 上最后一条日志的上一任 leader，一定也保存了已提交的日志（基于假设）。由日志匹配原则，leaderU 的日志一定包含已提交的日志。<strong>矛盾 3：leaderU 未包含前一任 leader 已提交的日志</strong></li>
<li>矛盾论点推导完毕。根据反证法可得出：任期比 T 大的 leader 一定包含有任期 T 内提交的所有日志。</li>
<li><p>日志匹配原则保证了下一任新 leader 也会包含被间接提交的日志。如图 8 (d) 中索引为 2 的日志</p>
<p>通过 leader 完整性原则，能证明图 3 中的状态机安全原则成立。即某个节点将给定索引的日志应用到自己的状态机上，那其他节点在同一索引不可能应用其他日志。节点在应用某条日志到状态机时，那它在该条日志前的日志必定和 leader 一致，而且都处于已提交的状态。考虑在节点上应用的一条指定索引位置日志的最小任期号，Log 完整性原则能保证更高任期的 leaders 会存储相同的日志，即之后任期里某个索引位置的体质条目值也是相同的。由此，证明了状态机的安全特性。</p>
</li>
</ol>
<p>最后，Raft 要求节点按日志索引顺序地应用条目到状态机，结合状态机安全特性来看，可知所有节点会以相同顺序将相同日志应用到各自的状态机上。</p>
<h3 id="5-5-Follower-和-Cadidate-崩溃"><a href="#5-5-Follower-和-Cadidate-崩溃" class="headerlink" title="5.5 Follower 和 Cadidate 崩溃"></a>5.5 Follower 和 Cadidate 崩溃</h3><p>到目前只讨论了 leader 崩溃的情况，相比之下 follower 和候选人崩溃后的处理简单得多，二者处理方式相同：崩溃后，发来的 AppendEntries RPC 和 RequestVote RPC 都会调用失败，对于这种失败 Raft 直接无限次重试调用。</p>
<p>如果崩溃节点重启，那对它的 RPC 调用完全可以成功。若节点完成了 RPC 调用，但还没来得及响应就已崩溃，那等它重启后会再次接收到相同的 RPC 请求，由于 Raft 中的 RPC 调用是幂等的，不会造成什么问题。比如 follower 收到对一个已经保存了的日志的 AppendEntries RPC 请求，它会直接忽视该调用。</p>
<h3 id="5-6-时序性和可用性"><a href="#5-6-时序性和可用性" class="headerlink" title="5.6 时序性和可用性"></a>5.6 时序性和可用性</h3><p>Raft 的安全性不能依赖时序性（timing）来保证：系统不能因某些操作过快或过慢导致给客户端返回了错误的结果。但是，可用性（系统能及时响应客户端请求）是无可避免地要依赖时序性的。比如 RPC 调用时长比节点故障间隔（正常工作时长）还大，即每次调用还没成功就又宕机了，会导致候选人没有足够的时间赢得选举，而 Raft 没有可用的 leader 是无法工作的。</p>
<p>leader 选举是 Raft 对系统时序要求最高的地方，不过只要系统满足以下原则，Raft 就能选出并保持一个稳定的 leader：</p>
<blockquote>
<p>broadcastTime 广播时间 &lt;&lt; electionTimeout  选举超时时间 &lt;&lt; MTBF 平均故障间隔时间</p>
</blockquote>
<p>broadcastTime 是向其余节点开始并行调用 RPC 到收到响应的平均时间，electionTimeout 是 <strong>5.2</strong> 所述的选举超时时间，MTBF 则是节点失效间隔（正常运行时长）的平均时间。</p>
<ul>
<li><p>broadcastTime 应比 electionTimeout 小一个数量级，才能让 leader 能及时发送心跳信息给 followers 以防它们发起新选举，通过随机生成的 electionTimeout 能让选票被瓜分的概率极低。</p>
</li>
<li><p>electionTimeout 应比 MTBF 小多个数量级，才能让系统稳定运行。当 leader 崩溃后系统也只是在选举超时时段内不可用，我们系统不可用的时间只占运行时间的一小部分。</p>
</li>
</ul>
<p>broadcastTime 和 MTBF 的大小由系统环境决定，不过 electionTimeout 是由我们选定的。Raft 的 RPC 要求被调用方数据存储要可靠，即 broadcastTime 约在 0.5-20ms 范围内，具体是多少取决于系统的存储技术，对应的 electionTimeout 一般在 10-500ms 之间，而对应的 MTBF 时间则为几个月甚至更长。如上的三个时间量级才满足 Raft 时序性。</p>
<h2 id="6-集群成员变更"><a href="#6-集群成员变更" class="headerlink" title="6. 集群成员变更"></a>6. 集群成员变更</h2><p>截止目前假定所有节点的配置都不会修改。而现实中偶尔还是要调整节点的配置，如替换宕机的节点、调整日志的复制级别等。可以先将整个系统下线，调整配置后重启上线，但会导致调整期间系统对外不可用。如果是人工手动调整配置，那操作失误也是有可能的。为避免这些问题，我们将配置调整集成到了 Raft 算法中。</p>
<p>为保障调整配置的安全，在调整期间一定不能出现同一时间选出两个 leader 的情况。不幸的是，无论用什么办法，节点的配置从旧转新的过程都是不安全的，不可能同时一次性调整好所有节点的配置，所以节点在调整配置期间会被分到 2 个不同的大多数群体：</p>
<p> <a href="https://images.yinzige.com/2019-04-12-034501.jpg" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-12-034501.jpg" width="60%"></a></p>
<blockquote>
<p>图10：由于不同节点可在任何时间切换配置，导致节点直接切换配置是不安全的。</p>
<p>上图中，集群节点从 3 个增加到 5 个，不过在同一任期内与可能选举出 2 个不同的 leader，分别从旧配置节点 C_old 中选出，从新配置节点 C_new 中选出。</p>
</blockquote>
<p>为保证安全，配置的调整需分成两个阶段。目前两阶段调整的方案有很多，一些系统在第一阶段直接将旧配置节点停用，不处理客户端请求，随后在第二阶段才加载新配置。在 Raft 中，集群先切换到称为 <strong>joint consensus</strong>的过渡配置，再切换到新配置。joint consensus 其实是新旧配置的组合：</p>
<ul>
<li>日志依旧都会复制到新、旧配置的所有节点上</li>
<li>新旧配置的节点都能被选为 leader</li>
<li>针对选举和提交操作，要想赢得选举必须在新配置节点、旧配置节点中都获得大多数票</li>
</ul>
<p>joint consensus 机制能让节点在保证安全的前提下切换配置，不仅如此，它还能让集群在切换配置时依然能对客户端提供服务。</p>
<p> <a href="https://images.yinzige.com/2019-04-12-073737.jpg" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-12-073737.jpg" width="60%"></a></p>
<blockquote>
<p>图11：调整配置的时间线。虚线：创建日志但未提交；实线：最新提交的配置日志。</p>
<p>leader 先自己创建 C_old,new 配置日志并将其复制到大多数节点（C_old 的大多数，C_new 的大多数）。之后它再创建 C_new 配置日志并提交给 C_new 的大多数节点。如此，C_old 和 C_new 做决策的时间点就被岔开了。</p>
</blockquote>
<p>集群配置在复制日志中以特殊日志条目的形式进行存储和提交。上图 11 展示了集群配置变更的过程：</p>
<ul>
<li>当 leader 接收到配置从 C_old 切换到 C_new 的请求时，它先将 joint consensus（图中 C_old,new）存储并复制给大多数节点。</li>
<li><p>一旦某个节点将更新的配置存到它的日志中，其后所有决策都使用该配置（节点使用的配置总是最新的，不管是否已提交）；即 leader 要用 C_old,new 的规则来决定何时提交 C_old,new 配置日志。如果 leader 崩溃，那新 leader 的配置不是 C_old 就是 C_old,new。在这一阶段，C_new 的配置不会应用。</p>
</li>
<li><p>一旦 C_old,new 被提交，C_old 和 C_new 在没有其他节点的允许下都不会生效。且由 leader 完整性原则只有包含 C_old,new 配置的节点才有资格被选为新 leader。现在 leader 可以安全地将 C_new 配置日志复制到集群中，当节点收到新的配置后即刻生效。</p>
</li>
<li>当 C_new 日志被提交后，旧配置节点就无关紧了。</li>
</ul>
<p>如图 11 中，C_old 和 C_new 都无法单方面做出决策。由此保障了安全。</p>
<p>针对配置调整提出三个问题：</p>
<ol>
<li><p>新节点启动时不含日志，若以这种初始状态加入集群，那它得需要一段时间追平日志，追赶的时间内它还不能提交新日志。为避免该节点的可用性间隙，Raft 在配置调整前处于额外的一个阶段：这个阶段内新加入的节点没有投票权（虽然 leader 依旧会向它复制日志，但在选举时不把它算作大多数）。一旦新节点的日志与其他节点同步，就可以像上边那样调整配置了。</p>
</li>
<li><p>leader 的配置可能还是旧的，这种情况下一旦 leader 提交了 C_new 日志，就退位到 follower。这意为着在 leader 提交 C_new 日志的时间段内，leader 虽然管理集群但不管自己，虽然向大多数节点复制日志但不包括自己。C_new 提交后会发生 leader 更换，因为此时的 C_new 是新配置下能独立运行的最早时间点（C_new 下总是能选出新 leader）。在此之前，集群只能从 C_old 中选 leader</p>
</li>
<li><p>移除不在 C_new 中的节点会扰乱集群。这部分节点收不到心跳，超时后可能发起选举，即用一个新任期号发起 RequestVote RPC 请求，这会让当前 leader 退回到 follower 状态。最终选出新 leader 后，移除的节点会再次超时…这个过程周而复始，降低了系统可用性。</p>
<p>为解决此问题，当某个节点确信 leader 已存在的情况下，它会直接忽视 RequestVote RPC。若节点在最小选举超时时间内收到了 RequestVote RPC，它既不更新自己的当前任期号，也不投票。这种机制不会影响到正常的选举流程，每个节点在开始选举前都会等待最小选举超时时间，这避免了已移除节点的干扰：如果 leader 还能向集群中发送心跳，它就不会被更大的任期号所罢免。</p>
</li>
</ol>
<h2 id="7-日志压缩"><a href="#7-日志压缩" class="headerlink" title="7. 日志压缩"></a>7. 日志压缩</h2><p>Raft 生成的日志会不断增长，但在实际系统中不会无限制增长。日志累积得越多，占用空间也就越多，回放耗时也就越长。如果没有额外机制来清理那些积累在日志中的过期数据，长此以往会引发系统可用性问题。</p>
<p>系统快照是最简单的日志压缩方式。整个系统状态会被写入快照（snapshot）并存储在可靠介质中，这是日志可放心地清理掉。在 Chubby 和 Zookeeper 都用到了快照技术，本节将介绍它在 Raft 中的应用。</p>
<p>记录日志增量来实现压缩，如日志清理（log cleanin）、日志结构合并树（log-structured merge tree）都是可行的。这些方案每次都只处理部分日志，均分了日志压缩的负载。它们先选一个积累了大量已删除或已覆写的数据区域，随后重写该区域内还活跃的数据，最后释放该区域。相比于简单的快照操作，以上操作需要额外的复杂机制来实现。状态机可实现 LSM Tree 来使用和快照相同的接口，而日志清除的工作就得 Raft 自己实现了。</p>
<p> <a href="https://images.yinzige.com/2019-04-12-093049.jpg" target="_blank" class="fancybox fancybox.image" rel="group noopener"><img src="https://images.yinzige.com/2019-04-12-093049.jpg" width="60%"></a></p>
<blockquote>
<p>图12：节点用快照替换了索引 1-5 的日志，该快照只存储目前的状态（以 x, y 为例）、日志最后的索引和任期号</p>
</blockquote>
<p>上图便是 Raft 的基础快照思想：每个节点都维护了各自的快照信息，只有已提交的日志会被拍进快照，其中的主要工作是将节点状态完整地写入快照中。此外，Raft 还在快照中嵌入了少量 metadata：</p>
<ul>
<li><strong>last included index</strong>：快照初的最后一条日志，即状态机最后应用的那条日志</li>
<li><strong>last included term</strong>：快照最后一条日志的任期号</li>
</ul>
<p>metadata 中的这两个值，用于紧随快照的 AppendEntries RPC 进行日志一致性检查。为了让第 6 节的成员关系变更，该快照也会记录最后一条索引日志包含的配置。一旦节点完成快照存储，它可能会清理 last included index 之前的所有日志，之前的所有旧快照也要删除。</p>
<p>虽然节点一般都各自处理各自的快照，但 leader 必须时不时地给那些落后的 followers 发送自己的快照，这种发送操作一般发生在 leader 已丢弃了本该发送给 followers 的日志。好在一般情况下这种情况下不太可能发生：与 leader 保持同步的 follower 多半已复制本条日志，不过运行较慢的 follower 或新加入集群的节点不会有这条日志，此时通过网络发送快照的方式即可同步本条日志。</p>
<p>InstallSnapshot RPC：leader 调用它来向 follower 有序地发送日志 chunk 片段。</p>
<table>
<thead>
<tr>
<th style="text-align:center">入参</th>
<th style="text-align:center">注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>term</code></td>
<td style="text-align:center">当前 leader 的任期</td>
</tr>
<tr>
<td style="text-align:center"><code>leaderId</code></td>
<td style="text-align:center">follower 用此来重定向客户端的请求给 leader 处理</td>
</tr>
<tr>
<td style="text-align:center"><code>lastIncludedIndex</code></td>
<td style="text-align:center">快照中包含的最后一条日志的索引值</td>
</tr>
<tr>
<td style="text-align:center"><code>lastIncludedTerm</code></td>
<td style="text-align:center">快照中包含的最后一条日志的任期号</td>
</tr>
<tr>
<td style="text-align:center"><code>offset</code></td>
<td style="text-align:center">标识此日志 chunk 在快照中的字节偏移量</td>
</tr>
<tr>
<td style="text-align:center"><code>data[]</code></td>
<td style="text-align:center">从 offset 开始的二进制快照 chunk数据</td>
</tr>
<tr>
<td style="text-align:center"><code>done</code></td>
<td style="text-align:center">如果是最后一份 chunk 则为 true</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">返回值</th>
<th style="text-align:center">注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>term</code></td>
<td style="text-align:center">返回 currentTerm，用于 leader 更新自己的任期号</td>
</tr>
</tbody>
</table>
<p>被调用方（follower）需实现：</p>
<ol>
<li>若 term &lt; currentTerm 就立刻返回调用</li>
<li>若是 offset 为 0 的首份 chunk，则新建快照</li>
<li>从给定的 offset 开始将日志写入快照</li>
<li>响应调用，之后只要 done 参数为 false 就等待接收更多 chunk</li>
<li>保存快照文件，清理掉任何本地索引更小的日志</li>
<li>若节点现有的日志条目和快照中的最后一条日志的索引、任期都相同，则保留其之后的日志并响应</li>
<li>丢弃日志</li>
<li>使用快照来重置状态机的状态（装载快照到集群配置）</li>
</ol>
<blockquote>
<p>图13：关于 InstallSnapshot RPC 的总结，快照会被分割成 chunk 块传输。follower 接收到 chunk 后可认为当前 leader 依旧存活，会重置选举超时计时器。</p>
</blockquote>
<p>leader 使用新的 InstallSnapshot RPC 向过于落后的 follower 发送快照，如图 13 当 follower 收到此 RPC  发来的快照后，它得决定自己已有的日志怎么处理。</p>
<ul>
<li>通常日志会包含一些节点没有的新信息，这种情况下 follower 会直接丢弃自己的日志，用收到的快照来代替，不然本地未提交的日志可能与快照发生冲突。</li>
<li>若由于传输错误等原因导致 follower 收到快照已是本地日志的前一部分，那它会将该前一部分日志删除，用快照代替，但之后的日志依旧保留。</li>
</ul>
<p>每个 follower 都能在不知道 leader 情况时自己拍快照，这背离了 Raft 的强 leader 原则。不过我们认为这种背离是有用的。leader 是为了解决达成一致性时日志冲突而存在的，而拍快照时日志已一致，所以不会有冲突，由此拍快照时无 leader 介入也是可行的。不过数据依旧只有一个流动方向：从 leader 流动到 followers</p>
<p>我们也考虑过一种基于 leader 的快照方案：只有 leader 有权拍快照，随后将快照分发给 followers。此方案有 2 个大缺点：</p>
<ul>
<li>每次发送快照给 follower 都会消耗大量的网络带宽：followers 本地已有该快照的所有原料，它们在本地拍快照肯定比从 leader 拍好传过来代价要小得多</li>
<li>这样会让 leader 实现起来更复杂：leader 需在向 followers 复制日志的同时将 snapshots 也发给它们，这样才不会阻塞新的客户端请求。</li>
</ul>
<p>现在还有两个可能会影响快照性能的问题：</p>
<ul>
<li>节点需要决定何时拍快照：若拍得太频繁，则会浪费大量的磁盘空间和网络带宽；若拍得不及时，就会面临磁盘空间耗尽的风险，而且重启后重建日志耗时也会更长。一个简单的解决办法是在日志增长到一个固定大小的阈值后就拍快照，只要此阈值比快照大小大得多，那拍快照对磁盘、带宽的压力就会小很多。</li>
<li>将快照写入磁盘会消耗一定时间：我们不希望节点因为写快照影响了正常操作。解决方案是使用<strong>写时复制（copy-on-write）</strong>技术，这样就可以继续接受新的更新请求而不会影响到快照。比如，状态机内置的函数式数据结构就原生支持写时复制，有的操作系统在底层支持（如 Linux 的 fork 操作）可用来拍下内存中的状态机的快照。</li>
</ul>
<h2 id="8-与客户端的交互"><a href="#8-与客户端的交互" class="headerlink" title="8. 与客户端的交互"></a>8. 与客户端的交互</h2><p>本节描述 Raft 如何与客户端交互，比如客户端如何查找集群 leader、Raft 如何理解线性化语义，这些问题在大部分一致性系统中都存在，而 Raft 的解决方案也类似。</p>
<p>Raft 的客户端会将自己的所有请求都发送给 leader 处理，当客户端初次启动时，它会随机选择一个节点发送请求，如果此节点不是 leader，那节点会拒绝该请求并将它已知的 leader 信息返回（AppendEntries RPC 需带上 leader 地址），如果该 leader 早已宕机，那此请求会超时。客户端会再次随机选一个节点进行重试。</p>
<p>Raft 的设计目标之一是实现线性化语义（每次请求操作都立即执行，保证只执行一次）。然而到目前的实现中 Raft 会多次执行某个命令：当 leader 提交日志后还没来得及响应客户端就崩溃了，这时客户端会在新 leader 二次执行该命令。解决办法是客户端对每个请求命令都用唯一的序列号进行标识，leader 的状态机会追踪每个客户端的请求命令序号及其响应数据。若 leader 再次收到某个已执行过的命令，那就直接将响应返回而非二次执行。</p>
<p>只读（Read-Only）操作可以无需记录到日志而直接处理，但如果没有任何限制的话会有返回旧数据的风险：旧 leader 响应客户端只读操作时可能已被新 leader 作废，而它却不知。线性读操作一定不能返回旧数据，Raft 需使用两个额外的措施在不使用日志的前提下保证不返回旧数据：</p>
<ul>
<li>leader 必须拥有最新的一条已提交日志信息：leader 完整性原则已经能保证 leader 包含所有已提交的日志，但在任期开始时它可能并不知道哪些日志已经被提交了。为此每个 leader 在其任期开始时提交一条空的<strong>无操作（no-op）</strong>日志。</li>
<li>在处理只读请求时必须检查自己是否已被最新的 leader 罢免了（如果已选出新 leader 那它的数据就已经变旧了），Raft 让 leader 处理只读请求前先和大多数节点进行一次心跳交换来解决此问题。此外，leader 可通过心跳来实现租约机制，不过这种方案依赖时序性来保证安全性（假设时间误差有限）</li>
</ul>
<h2 id="9-实现与评价"><a href="#9-实现与评价" class="headerlink" title="9. 实现与评价"></a>9. 实现与评价</h2><p>Raft 的可理解性比 Paxos 要好得多，正确性已得到证明，而性能与 Paxos 不相上下。</p>
<h2 id="10-相关工作"><a href="#10-相关工作" class="headerlink" title="10. 相关工作"></a>10. 相关工作</h2><p>参考原论文或完整翻译即可。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/maemual/raft-zh_cn" target="_blank" rel="noopener">GitHub: raft-zh_cn</a></p>
<p><a href="https://www.infoq.cn/article/raft-paper" target="_blank" rel="noopener">InfoQ: Raft 一致性算法论文译文</a></p>


]]></content>
      <categories>
        <category>raft</category>
      </categories>
  </entry>
  <entry>
    <title>编写一个网络应用程序轮子-gotty</title>
    <url>/2019/11/23/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%BD%AE%E5%AD%90-gotty/</url>
    <content><![CDATA[<h1 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h1><p><img src="/images/gotty/steps.png" alt="upload successful"></p>
<h1 id="数据结构设计"><a href="#数据结构设计" class="headerlink" title="数据结构设计"></a>数据结构设计</h1><p><img src="/images/gotty/data_designs.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>gotty</category>
        <category>middleware</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式28-访问者模式</title>
    <url>/2019/11/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F28-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Netty源码分析[一]</title>
    <url>/2019/11/23/Netty%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>参考<a href="https://time.geekbang.org/course/intro/100036701" target="_blank" rel="noopener">极客时间-netty源码剖析</a><br/></p>
<h2 id="Netty-是什么"><a href="#Netty-是什么" class="headerlink" title="Netty 是什么"></a>Netty 是什么</h2>]]></content>
      <categories>
        <category>Netty</category>
        <category>middleware</category>
      </categories>
  </entry>
  <entry>
    <title>RocketMQ 源码分析[四]：NameServer</title>
    <url>/2019/11/23/RocketMQ-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%9B%9B-%EF%BC%9ANameServer/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>RocketMQ 源码分析[0]：综述</title>
    <url>/2019/11/23/RocketMQ-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-0-%EF%BC%9A%E7%BB%BC%E8%BF%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ 源码分析[三]：Consumer</title>
    <url>/2019/11/23/RocketMQ-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%89-%EF%BC%9AConsumer/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>RocketMQ 源码分析[二]：Broker</title>
    <url>/2019/11/23/RocketMQ-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BA%8C-%EF%BC%9ABroker/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>MessageQueue-go 自制MQ的轮子</title>
    <url>/2019/11/23/MessageQueue-go-%E8%87%AA%E5%88%B6MQ%E7%9A%84%E8%BD%AE%E5%AD%90/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>自制MQ</tag>
        <tag>MQ-go</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ 源码分析[一]：Producer</title>
    <url>/2019/11/23/RocketMQ-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%80-%EF%BC%9AProducer/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="#前言">前言</a></li>
<li><a href="#参考">参考</a></li>
<li><a href="#开篇">开篇</a><ul>
<li><a href="#从单元测试出发">从单元测试出发</a></li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经过几天时间，我想清楚目前我还是不走人工智能方面了。一是因为时间不够了，二是感觉做AI至少得读个博士，自己懒得待在学校，但现在不太想做研究，还是做工程方面的探索吧。</p>
<p>思前想后，之前从事了后台的实习,对ToC的业务开发完全没兴趣，对研发一些框架或者ToB的业务比较感兴趣，所以技术栈就往基础设施，中间件，架构，分布式，微服务紧靠。之前做完了MIT6.824的Raft部分，对分布式一致性协议有了一些了解，分布式逐渐成为自己的兴趣点。</p>
<p>现在打算做一些中间件的研究和开发，希望剖析一些开源的MQ，然后自己做开源的MQ项目，参加一些infras的比赛。之后kafka，zookeeper(分布式，微服务组件)相继会一一剖析：）</p>
<p>这就是这个RocketMQ剖析开篇的原因。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>极客时间是个好东西:)<br/><br><a href="https://time.geekbang.org/column/intro/100032301" target="_blank" rel="noopener">极客时间-消息队列高手课</a></p>
<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><h2 id="从单元测试出发"><a href="#从单元测试出发" class="headerlink" title="从单元测试出发"></a>从单元测试出发</h2>]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式27-解释器模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F27-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式26-享元模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F26-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式25-中介者模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F25-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式24-职责链模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F24-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式23-命令模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F23-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式22-桥接模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F22-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式21-迭代器模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F21-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式20-组合模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F20-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式19-备忘录模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F19-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式18-适配器模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F18-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式17-状态模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F17-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式16-抽象工厂模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F16-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式15-观察者模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F15-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式14-建造者模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F14-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式13-外观（facade）模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F13-%E5%A4%96%E8%A7%82%EF%BC%88facade%EF%BC%89%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式12-迪米特法则</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F12-%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式11-模板方法模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F11-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式10-原型模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F10-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式9-工厂方法模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F9-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式8-代理模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F8-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式7-装饰模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式6-依赖倒转原则</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F6-%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式5-开放-封闭原则</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F5-%E5%BC%80%E6%94%BE-%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式4-单一职责原则</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式3-策略模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><a href="https://github.com/shaojintian/DesignPattern/tree/master/src/strategy" target="_blank" rel="noopener">详细代码点此链接</a><br><br>介绍：相对于工厂模式，不将具体的类暴露给调用者，而是在工厂中判断需要哪个类，则提供调用该类的方法给调用者。</p>
<p>应用场景：</p>
<p>优势：类的特性相同，且频繁切换类，且只需要用到单一的算法。<br><br>劣势：加入新类需要重新编译打包，无法将多个类组合使用的情况。<br></p>
<p><img src="/images/strategy.png" alt="upload successful"></p>
]]></content>
  </entry>
  <entry>
    <title>设计模式1-单例模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>设计模式2-简单工厂模式</title>
    <url>/2019/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>1、简单工厂模式</p>
<p>简单工厂模式是属于创建型模式，又叫做静态工厂方法(static Factory Method)模式，简单工厂模式是由一个工厂对象决定创建出来哪一种产品类的实例.</p>
<p>简单工厂模式的实质是由一个工厂类根据传入的参数，动态决定应该创建哪一类产品类(这些产品类继承自一个父类或接口)的实例。打个比方</p>
<p>假设有一个工厂，他能生产出A、B两种产品。当客户需要产品的时候一定要告诉共产是哪种产品，是A还是B。当新增加一种新产品的时候，那么就要去修改工厂的类。　</p>
<p>简单工厂模式的核心是，对于一个父类的多个继承子类，工厂对象的工厂函数根据用户输入，自动new出一个子类对象并返回其父类的指针，这样利用父类的指针执行父类的虚函数，就可以动态绑定子类的重写函数，从而实现多态。</p>
<p>对于一个只拥有加减乘除运算的简单计算器，我们设计一个Operation的父类，并构造加减乘除四个类继承父类重写运算函数GetResult。然后定义工厂类中的工厂函数，其根据用户的输入new出相应的对象实例并返回其父类的指针。</p>
<p><img src="/images/fac.sim.png" alt="upload successful"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> factory.simple;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Operation <span class="title">createOperate</span><span class="params">(String operate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Operation ope ;</span><br><span class="line">        <span class="keyword">switch</span> (operate) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                ope = <span class="keyword">new</span> OperationAdd();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                ope = <span class="keyword">new</span> OperationSub();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">                ope = <span class="keyword">new</span> OperationMul();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">                ope = <span class="keyword">new</span> OperationDiv();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"illegal operator"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ope;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/shaojintian/DesignPattern/tree/master/src/factory/simple" target="_blank" rel="noopener">代码详见此链接</a></p>
]]></content>
      <categories>
        <category>design pattern</category>
      </categories>
      <tags>
        <tag>大话设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>第五周report</title>
    <url>/2019/11/19/%E7%AC%AC%E4%BA%94%E5%91%A8report/</url>
    <content><![CDATA[<p>1：搭建好了pytorch，并入门<br>2：阅览并翻译论文《attentive group recommendation》<br>3：了解了论文里的cold-start problem，Neural Collaborative Filtering，Neural attention network<br>总结：<a href="https://blog.csdn.net/qq_39871498/article/details/83306531" target="_blank" rel="noopener">https://blog.csdn.net/qq_39871498/article/details/83306531</a><br>4：阅读机器学习-周志华（1-3）章节加习题。</p>
]]></content>
  </entry>
  <entry>
    <title>cold-start problem（推荐系统）</title>
    <url>/2019/11/19/cold-start%20problem%EF%BC%88%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%EF%BC%89/</url>
    <content><![CDATA[<p>冷启动是在群体推荐系统中一个常见的问题。</p>
<p>简单来说它是推荐过程中没有足够的信息来对用户进行可靠的推荐。</p>
<p><strong>推荐系统</strong>是基于用户和产品的信息和交互，对信息进行过滤并达到向用户精准推荐其感兴趣的某些信息的一种技术。<br>推荐系统基于用户的个人资料，人—物交互过程及其条目的特征等进行推荐。</p>
<ul>
<li><p>如果是基于内容推荐（content—based ），则需要对items建模，分析其特征，将用户以往感兴趣的items与其他所有items比较，找到相似特征的items，来进行推荐。<br>如下图：<br><img src="https://img-blog.csdn.net/2018102314272251?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p>
</li>
<li><p>如果是基于协同过滤（collaborative filtering),则不考虑items的特征，只注重人—items的交互过程，利用行为的相似性来进行推荐。<br><img src="https://img-blog.csdn.net/20181023143412925?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p>
</li>
</ul>
<p>由于上述都需要借鉴历史数据，所以会造成冷启动问题。</p>
<p>==冷启动的三个类型：==</p>
<ol>
<li><p>新平台：<br> 例如一个新的网上购物网站，只有各种商品网站，但无用户，无商品购买记录，信息缺乏。</p>
</li>
<li><p>新条目：<br>   例如新商品，新书目等等<br>   由于新条目缺乏访问的次数，会导致推荐不准确，并缺少推荐过程，进而继续影响新条目的访问，造成复反馈。这样会导致一个流行偏见问题（popularity bias）</p>
</li>
<li><p>新用户：<br> 缺乏访问或购买记录，缺乏人—物交互过程</p>
</li>
</ol>
<p>==改善策略==<br>1:采用混合推荐器：<br>    常用的是组合协同过滤和内容推荐两种推荐器，协同过滤用于处理cold items，内容推荐用于处理warm items</p>
<p>2用户精准完善注册信息<br>     寻求一个方法让用户注册时就提供足够的信息来支持推荐系统，但是不至于过于繁琐，防止用户注册时抛弃这个产品。</p>
<p>3：特征映射<br>    用机器学习的方法将内容推荐和协同过滤整合到一个模型</p>
<p>4：多特征加权<br>    在特征映射的基础下，无论是items的特征还是用户的特征，都根据用户对items对其重要性的感知进行加权</p>
]]></content>
  </entry>
  <entry>
    <title>【转载】RGB常用</title>
    <url>/2019/11/19/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91RGB%E5%B8%B8%E7%94%A8/</url>
    <content><![CDATA[<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
                                            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f76675cdea.css">
                        <div class="htmledit_views">
                <p><strong>原文地址：</strong><a href="http://blog.sina.com.cn/s/blog_7a2ffd5c0100zii4.html" rel="nofollow" target="_blank">常用颜色的RGB值</a><strong>作者：</strong><a href="http://blog.sina.com.cn/u/2049965404" rel="nofollow" target="_blank">chase</a></p>



]]></content>
  </entry>
  <entry>
    <title>基于OpenCV的人脸识别_人脸检测</title>
    <url>/2019/11/19/%E5%9F%BA%E4%BA%8EOpenCV%E7%9A%84%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB_%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<p>1：==简介==<br><strong>人脸检测</strong>指从现实环境中识别出人脸的<strong>位置</strong>；</p>
<p><strong>人脸识别</strong>基于<strong>人脸检测</strong>，下一步才能辨析人脸的属性，从而判别这个人是谁。</p>
<p>2：==图像基本概念==<br><strong>帧</strong>：一张图<br><strong>帧数</strong>：一秒钟刷新多少张图片<br><strong>分辨率</strong>：单位大小所能承载的像素，能力为正相关<br><strong>图像插值</strong>：提高图像分辨率<br>OpenCV提供了5种插值方法：<strong>最邻近</strong>、<strong>双线性</strong>、基于像素区域、立方插值及兰索斯插值（加粗的两个时间复杂度低）<br>介绍：引用 <a href="https://blog.csdn.net/spw_1201/article/details/53544014" target="_blank" rel="noopener">图像插值</a><br><strong>灰度图</strong>：<strong>二值图像</strong>的拓展，在黑白两种颜色中取得灰色，黑，白，灰<br><strong>人脸ROI</strong><br>3：==应用==<br>用<strong>Haar级联</strong>来做人脸检测。 Haar级联通过在多个尺度上从图像中提取大量的简单特征来实现。<br>简单特征主要指边、线、矩形特征等，这些特征都非常易于计算，<br>然后通过创建一系列简单的分类器来做训练。<br>这里需要一个cascade_files去训练model。</p>
<p>先去我的Github取到需要的模型训练的.xml文件即cascade_file，下载到python脚本的文件夹下，下面的人脸检测及五官检测代码就直接可以运行了。<br>如果想看其他方面的人脸识别源码，请移步我的Github。</p>
<p>==<a href="https://github.com/shaojintian/Face_detection/tree/master==" target="_blank" rel="noopener">https://github.com/shaojintian/Face_detection/tree/master==</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#face_nose&amp;eyes_detection.py</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#import Haar files to train face detection model </span></span><br><span class="line"></span><br><span class="line">face_cascade=cv2.CascadeClassifier(<span class="string">'cascade_files/haarcascade_frontalface_alt.xml'</span>)</span><br><span class="line">nose_cascade=cv2.CascadeClassifier(<span class="string">'cascade_files/haarcascade_mcs_nose.xml'</span>)</span><br><span class="line">eye_cascade=cv2.CascadeClassifier(<span class="string">'cascade_files/haarcascade_eye.xml'</span>)</span><br><span class="line"><span class="comment"># check whether haar is done </span></span><br><span class="line"><span class="keyword">if</span> face_cascade.empty():</span><br><span class="line">	<span class="keyword">raise</span> IOError(<span class="string">'Unable to load haarcascade_frontalface_alt'</span>)</span><br><span class="line"><span class="keyword">if</span> nose_cascade.empty():</span><br><span class="line">	<span class="keyword">raise</span> IOError(<span class="string">'Unable to load haarcascade_mcs_nose.xml'</span>)</span><br><span class="line"><span class="keyword">if</span> eye_cascade.empty():</span><br><span class="line">	<span class="keyword">raise</span> IOError(<span class="string">'Unable to load haarcascade_eye.xml'</span>)	</span><br><span class="line"><span class="comment"># initialize camera from PC camera </span></span><br><span class="line"><span class="comment"># parameter 0 -&gt; PC camera</span></span><br><span class="line">camera=cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#image clearity scale </span></span><br><span class="line"></span><br><span class="line">scale_image=<span class="number">0.6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># infinite circle to capture images </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	<span class="comment">#capture current image</span></span><br><span class="line">	<span class="comment">#frame-&gt;帧</span></span><br><span class="line">	ret,frame=camera.read()</span><br><span class="line">	<span class="comment">#每次都调整一下帧的大小</span></span><br><span class="line">	<span class="comment">#interpolation（插值法）：最近邻时间复杂度最小</span></span><br><span class="line">	frame=cv2.resize(frame,<span class="literal">None</span>,fx=scale_image,fy=scale_image,</span><br><span class="line">					interpolation=cv2.INTER_NEAREST)</span><br><span class="line">	<span class="comment">#将图像转为灰度图</span></span><br><span class="line">	gray=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#灰度图像上运行人脸检测器-&gt;人脸矩形框</span></span><br><span class="line">		<span class="comment">#1.5-&gt;乘积系数，5-&gt;最小紧邻数量	</span></span><br><span class="line">	face_rects=face_cascade.detectMultiScale(gray,<span class="number">1.5</span>,<span class="number">5</span>)</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">#画出人脸矩形框 </span></span><br><span class="line">	<span class="comment">#nose ,eyes in face_rects</span></span><br><span class="line">	<span class="comment">#3-&gt;框的厚度</span></span><br><span class="line">	<span class="keyword">for</span>(x,y,w,h) <span class="keyword">in</span> face_rects:</span><br><span class="line">		cv2.rectangle(frame,(x,y),(x+w,y+h),(<span class="number">255</span>,<span class="number">128</span>,<span class="number">0</span>),<span class="number">2</span>)</span><br><span class="line">		<span class="comment">#require face ROI information</span></span><br><span class="line">		roi_gray=gray[y:y+h,x:x+w]</span><br><span class="line">		roi_color=frame[y:y+h,x:x+w]</span><br><span class="line"></span><br><span class="line">		eye_rects=eye_cascade.detectMultiScale(roi_gray)</span><br><span class="line">		nose_rects=nose_cascade.detectMultiScale(roi_gray)</span><br><span class="line">		<span class="comment">#draw eye  and nose rectangle</span></span><br><span class="line">		<span class="keyword">for</span>(x_eye,y_eye,w_eye,h_eye) <span class="keyword">in</span> eye_rects:</span><br><span class="line">			center=(int(x_eye+<span class="number">0.5</span>*w_eye),int(y_eye+<span class="number">0.5</span>*h_eye))</span><br><span class="line">			radius=int(<span class="number">0.3</span>*(w_eye+h_eye))</span><br><span class="line">			color=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>)</span><br><span class="line">			thickness=<span class="number">2</span></span><br><span class="line">			cv2.circle(roi_color,center,radius,color,thickness)</span><br><span class="line">		<span class="keyword">for</span>(x_nose,y_nose,w_nose,h_nose) <span class="keyword">in</span> nose_rects:</span><br><span class="line">			center=(int(x_nose+<span class="number">0.5</span>*w_nose),int(y_nose+<span class="number">0.5</span>*h_nose))</span><br><span class="line">			radius=int(<span class="number">0.3</span>*(w_nose+h_nose))</span><br><span class="line">			color=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>)</span><br><span class="line">			thickness=<span class="number">2</span></span><br><span class="line">			cv2.circle(roi_color,center,radius,color,thickness)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">#显示帧</span></span><br><span class="line">	cv2.namedWindow(<span class="string">'SJT_cam'</span>,<span class="number">0</span>)<span class="comment">#0-&gt;auto size window</span></span><br><span class="line">	cv2.imshow(<span class="string">'SJT_cam'</span>,frame)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 通过esc退出</span></span><br><span class="line">	<span class="comment">#wait 1ms to check key response</span></span><br><span class="line">	key=cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">if</span> key==<span class="number">27</span>:<span class="comment">#27==ESC</span></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line"><span class="comment">#释放摄像头</span></span><br><span class="line">camera.release()</span><br><span class="line"><span class="comment">#关闭所有窗体</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>









<p><img src="https://img-blog.csdnimg.cn/20181128022321986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>deep learning_深度前馈网络</title>
    <url>/2019/11/19/deep%20learning_%E6%B7%B1%E5%BA%A6%E5%89%8D%E9%A6%88%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p>深度学习是监督学习的一个分支。<br>简单来说就是当线性模型无法解决问题时，引入的一种方法。<br>它综合多种线行模型来从x空间——&gt;学习到h空间，h空间为可用线行模型解决的空间</p>
<p>深度前馈网络（deep feedforward network)又叫多层感知机，是深度学习最典型的模型。</p>
<p> 引入一个例子：<br> XOR异或问题</p>
<p><img src="https://img-blog.csdnimg.cn/20181108013846134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>当 x1不变时，x2递增，输出结果的趋势相反，即出现了递增，也出现了递减。这不是线性变化的，所以无法用线性模型来分类。<br><img src="https://img-blog.csdnimg.cn/20181108020035803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上图两个输出空间，黑；绿<br>引出神经网络核心思想，多线性模型一起工作。<br><img src="https://img-blog.csdnimg.cn/20181108021624255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="接下来使用python制作自己的神经网络："><a href="#接下来使用python制作自己的神经网络：" class="headerlink" title="接下来使用python制作自己的神经网络："></a>接下来使用python制作自己的神经网络：</h2><p>构架：<br>1：初始化函数：设定输入层节点，隐藏层节点和输出层节点（上图所示）<br>2：训练：学习给定训练集样本后，优化权重<br>3：查询：给定输入，从输出节点得到输出结果</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="comment"># scipy.special for the sigmoid function expit()</span></span><br><span class="line"><span class="keyword">import</span> scipy.special</span><br><span class="line"></span><br><span class="line"><span class="comment"># neural network class definition</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">neuralNetwork</span>:</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># initialise the neural network</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, inputnodes, hiddennodes, outputnodes, learningrate)</span>:</span></span><br><span class="line">        <span class="comment"># set number of nodes in each input, hidden, output layer</span></span><br><span class="line">        self.inodes = inputnodes</span><br><span class="line">        self.hnodes = hiddennodes</span><br><span class="line">        self.onodes = outputnodes</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># link weight matrices, wih and who</span></span><br><span class="line">        <span class="comment"># weights inside the arrays are w_i_j, where link is from node i to node j in the next layer</span></span><br><span class="line">        <span class="comment"># w11 w21</span></span><br><span class="line">        <span class="comment"># w12 w22 etc </span></span><br><span class="line">        self.wih = numpy.random.normal(<span class="number">0.0</span>, pow(self.inodes, <span class="number">-0.5</span>), (self.hnodes, self.inodes))</span><br><span class="line">        self.who = numpy.random.normal(<span class="number">0.0</span>, pow(self.hnodes, <span class="number">-0.5</span>), (self.onodes, self.hnodes))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># learning rate</span></span><br><span class="line">        self.lr = learningrate</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># activation function is the sigmoid function</span></span><br><span class="line">        self.activation_function = <span class="keyword">lambda</span> x: scipy.special.expit(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># train the neural network</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, inputs_list, targets_list)</span>:</span></span><br><span class="line">        <span class="comment"># convert inputs list to 2d array</span></span><br><span class="line">        inputs = numpy.array(inputs_list, ndmin=<span class="number">2</span>).T</span><br><span class="line">        targets = numpy.array(targets_list, ndmin=<span class="number">2</span>).T</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># calculate signals into hidden layer</span></span><br><span class="line">        hidden_inputs = numpy.dot(self.wih, inputs)</span><br><span class="line">        <span class="comment"># calculate the signals emerging from hidden layer</span></span><br><span class="line">        hidden_outputs = self.activation_function(hidden_inputs)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># calculate signals into final output layer</span></span><br><span class="line">        final_inputs = numpy.dot(self.who, hidden_outputs)</span><br><span class="line">        <span class="comment"># calculate the signals emerging from final output layer</span></span><br><span class="line">        final_outputs = self.activation_function(final_inputs)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># output layer error is the (target - actual)</span></span><br><span class="line">        output_errors = targets - final_outputs</span><br><span class="line">        <span class="comment"># hidden layer error is the output_errors, split by weights, recombined at hidden nodes</span></span><br><span class="line">        hidden_errors = numpy.dot(self.who.T, output_errors) </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># update the weights for the links between the hidden and output layers</span></span><br><span class="line">        self.who += self.lr * numpy.dot((output_errors * final_outputs * (<span class="number">1.0</span> - final_outputs)), numpy.transpose(hidden_outputs))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># update the weights for the links between the input and hidden layers</span></span><br><span class="line">        self.wih += self.lr * numpy.dot((hidden_errors * hidden_outputs * (<span class="number">1.0</span> - hidden_outputs)), numpy.transpose(inputs))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># query the neural network</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self, inputs_list)</span>:</span></span><br><span class="line">        <span class="comment"># convert inputs list to 2d array</span></span><br><span class="line">        inputs = numpy.array(inputs_list, ndmin=<span class="number">2</span>).T</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># calculate signals into hidden layer</span></span><br><span class="line">        hidden_inputs = numpy.dot(self.wih, inputs)</span><br><span class="line">        <span class="comment"># calculate the signals emerging from hidden layer</span></span><br><span class="line">        hidden_outputs = self.activation_function(hidden_inputs)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># calculate signals into final output layer</span></span><br><span class="line">        final_inputs = numpy.dot(self.who, hidden_outputs)</span><br><span class="line">        <span class="comment"># calculate the signals emerging from final output layer</span></span><br><span class="line">        final_outputs = self.activation_function(final_inputs)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> final_outputs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># number of input, hidden and output nodes</span></span><br><span class="line">    input_nodes =<span class="number">2</span>  </span><br><span class="line">    hidden_nodes = <span class="number">5</span></span><br><span class="line">    output_nodes = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># learning rate is 0.3</span></span><br><span class="line">    learning_rate =  <span class="number">00.3</span></span><br><span class="line">    n = neuralNetwork(input_nodes,hidden_nodes,output_nodes, learning_rate)</span><br><span class="line">    print(n.query([<span class="number">1</span>,<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>pytorch 入门之基础和线性模型入门</title>
    <url>/2019/11/19/pytorch%20%E5%85%A5%E9%97%A8%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%92%8C%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="一：pytorch基础"><a href="#一：pytorch基础" class="headerlink" title="一：pytorch基础"></a><strong>一：pytorch基础</strong></h1><p>1：张量：Tensor<br>    定义为：多维度的矩阵。<br>    例如：</p>
<pre><code>0维度：点；    一维：向量；    二维：普通矩阵

有torch.FloatTensor ;  torch.DoubleTensor; torch.IntTrnsor;</code></pre><p>2:变量：Variable<br>    <img src="https://img-blog.csdnimg.cn/2018112209372062.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>3：模组 torch.nn.Module</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">net_name</span><span class="params">(nn.Module)</span>:</span><span class="comment">#模型</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__int__</span><span class="params">(self,other_arguments)</span>:</span></span><br><span class="line">		super(net_name,self).__int__()</span><br><span class="line">		self.conv1=nn.Conv2d(in_channels,out_channels,kernel_size)<span class="comment">#训练器</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x)</span>:</span></span><br><span class="line">		x=self.conv1(x)</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line"><span class="comment">#loss function</span></span><br><span class="line">criterion=nn.CrossEntropyLoss()</span><br><span class="line">loss=criterion(output,target)</span><br></pre></td></tr></table></figure>



<h2 id="二：多形式回归"><a href="#二：多形式回归" class="headerlink" title="二：多形式回归"></a>二：多形式回归</h2><p>==<strong>1）理论简介</strong>==</p>
<p>对于一般的线性回归模型，由于该函数拟合出来的是一条直线，所以精度欠佳，我们可以考虑多项式回归来拟            合更多的模型。所谓多项式回归，其本质也是线性回归。也就是说，我们采取的方法是，提高每个属性的次数来增加维度数。比如，请看下面这样的例子：</p>
<p>如果我们想要拟合方程：</p>
<p>对于输入变量和输出值，我们只需要增加其平方项、三次方项系数即可。所以，我们可以设置如下参数方程：</p>
<p>可以看到，上述方程与线性回归方程并没有本质区别。所以我们可以采用线性回归的方式来进行多项式的拟合。下面请看代码部分。</p>
<p>==2）代码实现==</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy </span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_features</span><span class="params">(x)</span>:</span></span><br><span class="line">	</span><br><span class="line">	x=x.unsqueeze(<span class="number">1</span>)<span class="comment"># n -&gt; nx1 </span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> t.cat([x ** i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>)],<span class="number">1</span>) <span class="comment">#nx1--&gt;nx3</span></span><br><span class="line">	<span class="comment">#columns --&gt; x,x^2,x^3</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">#true fx</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> x.mm(W_target)+b_target[<span class="number">0</span>] <span class="comment"># nx1 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#建立（x,f(X)) pairs</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_batch</span><span class="params">(batch_size=<span class="number">32</span>)</span>:</span></span><br><span class="line">	random=t.randn(batch_size)</span><br><span class="line">	<span class="comment"># 32个 == 1x32</span></span><br><span class="line">	random=t.from_numpy(numpy.sort(random))</span><br><span class="line">	x=make_features(random) <span class="comment">#x--&gt;nx3</span></span><br><span class="line"></span><br><span class="line">	y=f(x) <span class="comment">#nx1</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> Variable(x),Variable(y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Define model</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">multi_linear_model</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">		super(multi_linear_model,self).__init__()</span><br><span class="line">		self.poly=nn.Linear(<span class="number">3</span>,<span class="number">1</span>) <span class="comment">#x 三维 y一维</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,x)</span>:</span></span><br><span class="line">		out=self.poly(x)</span><br><span class="line">		<span class="keyword">return</span> out <span class="comment">#nx1 prediction y</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	<span class="comment"># true parameter</span></span><br><span class="line">	W_target=t.FloatTensor([<span class="number">0.5</span>,<span class="number">3</span>,<span class="number">2.4</span>]).unsqueeze(<span class="number">1</span>)<span class="comment"># 3-&gt;3x1</span></span><br><span class="line">	b_target=t.FloatTensor([<span class="number">0.9</span>])</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	model =multi_linear_model()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 定义loss function --&gt; mean square error</span></span><br><span class="line">	criterion=nn.MSELoss()</span><br><span class="line"></span><br><span class="line">	<span class="comment">#优化器-&gt;随机梯度下降 learning rate 0.001</span></span><br><span class="line">	optimizer=t.optim.SGD(model.parameters(),lr=<span class="number">1e-3</span>)</span><br><span class="line"></span><br><span class="line">	epoch=<span class="number">0</span> <span class="comment"># 记录从开始到达模型最优化的训练次数</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		<span class="comment"># Get true data</span></span><br><span class="line">		batch_x,batch_y=get_batch()</span><br><span class="line">		<span class="comment">#out -&gt; predict y</span></span><br><span class="line">		output=model.forward(batch_x)</span><br><span class="line"></span><br><span class="line">		<span class="comment">#require loss</span></span><br><span class="line">		loss=criterion(output,batch_y)</span><br><span class="line"></span><br><span class="line">		print_loss=loss.item()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">#清0 梯度 </span></span><br><span class="line">		optimizer.zero_grad()</span><br><span class="line">	</span><br><span class="line">		<span class="comment">#反向传播-&gt;计算此时的x的梯度</span></span><br><span class="line">		loss.backward()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">#梯度下降</span></span><br><span class="line">		optimizer.step()</span><br><span class="line">		epoch+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">#达到最优</span></span><br><span class="line">		<span class="keyword">if</span> print_loss&lt;<span class="number">1e-3</span>:<span class="comment">#0.001</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	predict = model(batch_x)</span><br><span class="line">	x = batch_x.numpy()[:, <span class="number">0</span>]</span><br><span class="line">	plt.plot(x, batch_y.numpy(), <span class="string">'rx'</span>)</span><br><span class="line"></span><br><span class="line">	predict = predict.data.numpy()</span><br><span class="line">	plt.plot(x, predict, <span class="string">'b'</span>)</span><br><span class="line">	plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20181122093738257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="多项式回归"></p>
<p>结果发现拟合的很好，损失小于0.001.</p>
]]></content>
  </entry>
  <entry>
    <title>Mysql 5.x 入门 基于《Mysql 必知必会》</title>
    <url>/2019/11/19/Mysql%205.x%20%E5%85%A5%E9%97%A8%20%E5%9F%BA%E4%BA%8E%E3%80%8AMysql%20%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/</url>
    <content><![CDATA[<p>mysql 入门<br>虽然加黑字体在mysql命令行中大小写均可，但应该<strong>大写</strong>，这样更符合规范。</p>
<h2 id="一：入门及检索语句"><a href="#一：入门及检索语句" class="headerlink" title="一：入门及检索语句"></a>一：入门及检索语句</h2><p>1：创建数据库  -&gt; <strong>create database</strong>  database_name;</p>
<p>2:  加信息源 -&gt; <strong>source</strong>  文件的绝对路径;</p>
<p>3：使用数据库 -&gt; <strong>use database</strong> database_name ;</p>
<p>4: 展示选中库的所有表 -&gt; <strong>show tables;</strong></p>
<p>5: 展示所有表的其中一个 -&gt; <strong>describe table_name;</strong></p>
<p>6:选择某表中的某一列 -&gt; <strong>select</strong>  column_name  <strong>from</strong> ** table_name**</p>
<p>7选择某表中的多列 -&gt; <strong>select</strong>  column_name1 ,  column_name2 <strong>from</strong> **<br>table_name**</p>
<p>8:选择某表中的所有列 -&gt; <strong>select *  from</strong> table_name ;</p>
<h2 id="二：排序检索数据"><a href="#二：排序检索数据" class="headerlink" title="二：排序检索数据"></a>二：排序检索数据</h2><p>使用子句<strong>order by</strong><br>1: 按照某一列升序排序（默认为升序）：<br>    <strong>select</strong> column_name<br>    <strong>from</strong> table_name<br>    <strong>order by</strong>column_name;</p>
<p>2:降序排列：<br>    <strong>select</strong> column_name<br>    <strong>from</strong> table_name<br>    <strong>order by</strong> column_name <strong>DESC</strong>;</p>
<p>3:按某一列选中最大的item：<br>    <strong>select</strong> column_name<br>    <strong>from</strong> table_name<br>    <strong>order by</strong> column_name <strong>DESC</strong><br>    <strong>LIMIT</strong> 1；//注释：mysql中也是第0个为第一个 LIMIT 1 等价于 LIMIT 0,1</p>
]]></content>
  </entry>
  <entry>
    <title>进程和线程的区别与联系</title>
    <url>/2019/11/19/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB/</url>
    <content><![CDATA[<p>说进程和线程的区别</p>
<p>在理解进程和线程概念之前首选要对并发有一定的感性认识，如果服务器同一时间内只能服务于一个客户端，其他客户端都再那里傻等的话，可见其性能的低下估计会被客户骂出翔来，因此并发编程应运而生，并发是网络编程中必须考虑的问题。实现并发的方式有多种：比如多进程、多线程、IO多路复用。</p>
<p><strong>多进程</strong><br>进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。程序运行时系统就会创建一个进程，并为它分配资源，然后把该进程放入进程就绪队列，进程调度器选中它的时候就会为它分配CPU时间，程序开始真正运行。</p>
<p>Linux系统函数fork()可以在父进程中创建一个子进程，这样的话，在一个进程接到来自客户端新的请求时就可以复制出一个子进程让其来处理，父进程只需负责监控请求的到来，然后创建子进程让其去处理，这样就能做到并发处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(<span class="string">'当前进程:%s 启动中 ....'</span> % os.getpid())</span><br><span class="line">pid = os.fork()</span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'子进程:%s,父进程是:%s'</span> % (os.getpid(), os.getppid()))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'进程:%s 创建了子进程:%s'</span> % (os.getpid(),pid ))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出结果：</span><br><span class="line"></span><br><span class="line">当前进程:27223 启动中 ....</span><br><span class="line">进程:27223 创建了子进程:27224</span><br><span class="line">子进程:27224,父进程是:27223</span><br></pre></td></tr></table></figure>




<p>fork函数会返回两次结果，因为操作系统会把当前进程的数据复制一遍，然后程序就分两个进程继续运行后面的代码，fork分别在父进程和子进程中返回，在子进程返回的值pid永远是0，在父进程返回的是子进程的进程id。</p>
<p><strong>多线程</strong><br>线程是程序执行时的最小单位，它是进程的一个执行流，是CPU调度和分派的基本单位，一个进程可以由很多个线程组成，线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。线程由CPU独立调度执行，在多CPU环境下就允许多个线程同时运行。同样多线程也可以实现并发操作，每个请求分配一个线程来处理。</p>
<blockquote>
<p>线程和进程各自有什么区别和优劣呢？</p>
</blockquote>
<ul>
<li>进程是资源分配的最小单位，线程是程序执行的最小单位。</li>
<li>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。</li>
</ul>
<ul>
<li><p>线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。</p>
</li>
<li><p>但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>CSAPP《Computer System A Programmer&#39;s Perspective》笔记</title>
    <url>/2019/11/19/CSAPP%E3%80%8AComputer%20System%20A%20Programmer&#39;s%20Perspective%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>EAIPlus 技术缔造未来</p>
]]></content>
  </entry>
  <entry>
    <title>图像处理及计算机视觉入门</title>
    <url>/2019/11/19/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8F%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>

<p>因诸多学术理论及概念的原始论文都发表在英文期刊上，因此在尽可能将专业术语翻译成中文的情况下，都会在括号内保留其原始的英文短语以供参考。</p>

<hr>



<h2 id="目录"><a name="t1"></a>目录</h2>

<ul>
<li>简介</li>
<li>方向</li>
<li>热点</li>
</ul>

<hr>



<h2 id="简介"><a name="t2"></a>简介</h2>

<p>计算机视觉（Computer Vision）又称为机器视觉（Machine Vision），顾名思义是一门“教”会计算机如何去“看”世界的学科。在机器学习大热的前景之下，计算机视觉与自然语言处理（Natural Language Process， NLP）及语音识别（Speech Recognition）并列为机器学习方向的三大热点方向。而计算机视觉也由诸如梯度方向直方图（Histogram of Gradient， HOG）以及尺度不变特征变换（Scale-Invariant Feature Transform， SIFT）等传统的手办特征（Hand-Crafted Feature）与浅层模型的组合逐渐转向了以卷积神经网络（Convolutional Neural Network， CNN）为代表的深度学习模型。</p>

<div class="table-box"><table>
<thead>
<tr>
  <th>方式</th>
  <th align="center">特征提取</th>
  <th align="right">决策模型</th>
</tr>
</thead>
<tbody><tr>
  <td>传统方式</td>
  <td align="center">SIFT，HOG， Raw Pixel …</td>
  <td align="right">SVM， Random Forest， Linear Regression …</td>
</tr>
<tr>
  <td>深度学习</td>
  <td align="center">CNN …</td>
  <td align="right">CNN …</td>
</tr>
</tbody></table></div>


<p><em>svm（Support Vector Machine） ： 支持向量机</em> <br>
<em>Random Forest ： 随机森林</em> <br>
<em>Linear Regression ： 线性回归</em> <br>
<em>Raw Pixel ： 原始像素</em></p>

<p>传统的计算机视觉对待问题的解决方案基本上都是遵循： 图像预处理 → 提取特征 → 建立模型（分类器/回归器） → 输出 的流程。 而在深度学习中，大多问题都会采用端到端（End to End）的解决思路，即从输入到输出一气呵成。本次计算机视觉的入门系列，将会从浅层学习入手，由浅入深过渡到深度学习方面。</p>



<h2 id="方向"><a name="t3"></a>方向</h2>

<p>计算机视觉本身又包括了诸多不同的研究方向，比较基础和热门的几个方向主要包括了：物体识别和检测（Object Detection），语义分割（Semantic Segmentation），运动和跟踪（Motion &amp; Tracking），三维重建（3D Reconstruction），视觉问答（Visual Question &amp; Answering），动作识别（Action Recognition）等。</p>



<h3 id="物体识别和检测"><a name="t4"></a>物体识别和检测</h3>

<p>物体检测一直是计算机视觉中非常基础且重要的一个研究方向，大多数新的算法或深度学习网络结构都首先在物体检测中得以应用如VGG-net， GoogLeNet， ResNet等等，每年在imagenet数据集上面都不断有新的算法涌现，一次次突破历史，创下新的记录，而这些新的算法或网络结构很快就会成为这一年的热点，并被改进应用到计算机视觉中的其它应用中去，可以说很多灌水的文章也应运而生。</p>

<p>物体识别和检测，顾名思义，即给定一张输入图片，算法能够自动找出图片中的常见物体，并将其所属类别及位置输出出来。当然也就衍生出了诸如人脸检测（Face Detection），车辆检测（Viechle Detection）等细分类的检测算法。 <br>
<img src="https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAi-AAAAJDhhMGQwNGY2LTRiNzYtNDcwOC04YTU1LWI4ZmQ1NDVkOTZhZg.jpg" alt="这里写图片描述" title=""></p>



<h4 id="近年代表论文">近年代表论文</h4>

<ol>
<li>He, Kaiming, et al. “<a href="https://arxiv.org/abs/1512.03385" rel="nofollow" target="_blank">Deep residual learning for image recognition</a>.” Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. 2016.</li>
<li>Liu, Wei, et al. “<a href="https://arxiv.org/abs/1512.02325" rel="nofollow" target="_blank">SSD: Single shot multibox detector</a>.” European Conference on Computer Vision. Springer International Publishing, 2016.</li>
<li>Szegedy, Christian, et al. “<a href="http://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Szegedy_Going_Deeper_With_2015_CVPR_paper.pdf" rel="nofollow" target="_blank">Going deeper with convolutions</a>.” Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. 2015.</li>
<li>Ren, Shaoqing, et al. “<a href="http://papers.nips.cc/paper/5638-analysis-of-variational-bayesian-latent-dirichlet-allocation-weaker-sparsity-than-map.pdf" rel="nofollow" target="_blank">Faster r-cnn: Towards real-time object detection with region proposal networks</a>.” Advances in neural information processing systems. 2015.</li>
<li>Simonyan, Karen, and Andrew Zisserman. “<a href="Simonyan,%20Karen,%20and%20Andrew%20Zisserman.%20%22Very%20deep%20convolutional%20networks%20for%20large-scale%20image%20recognition.%22%20arXiv%20preprint%20arXiv:1409.1556%20%282014%29." rel="nofollow" target="_blank">Very deep convolutional networks for large-scale image recognition</a>.” arXiv preprint arXiv:1409.1556 (2014).</li>
<li>Krizhevsky, Alex, Ilya Sutskever, and Geoffrey E. Hinton. “<a href="http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf" rel="nofollow" target="_blank">Imagenet classification with deep convolutional neural networks</a>.” Advances in neural information processing systems. 2012.</li>
</ol>



<h4 id="数据集">数据集</h4>

<ol>
<li><a href="http://image-net.org/" rel="nofollow" target="_blank">IMAGENET</a></li>
<li><a href="http://host.robots.ox.ac.uk/pascal/VOC/" rel="nofollow" target="_blank">PASCAL VOC</a></li>
<li><a href="http://mscoco.org/" rel="nofollow" target="_blank">MS COCO</a></li>
<li><a href="http://www.vision.caltech.edu/Image_Datasets/Caltech256/" rel="nofollow" target="_blank">Caltech</a></li>
</ol>



<h3 id="语义分割"><a name="t5"></a>语义分割</h3>

<p>语义分割是近年来非常热门的方向，简单来说，它其实可以看做一种特殊的分类——将输入图像的每一个像素点进行归类，用一张图就可以很清晰地描述出来。 <br>
<img src="https://researchweb.iiit.ac.in/~dineshreddy.n/zerotype/assets/sms.png" alt="这里写图片描述" title=""> <br>
很清楚地就可以看出，物体检测和识别通常是将物体在原图像上框出，可以说是“宏观”上的物体，而语义分割是从每一个像素上进行分类，图像中的每一个像素都有属于自己的类别。</p>



<h4 id="近年代表论文-1">近年代表论文</h4>

<ol>
<li>Long, Jonathan, Evan Shelhamer, and Trevor Darrell. “<a href="https://people.eecs.berkeley.edu/~jonlong/long_shelhamer_fcn.pdf" rel="nofollow" target="_blank">Fully convolutional networks for semantic segmentation</a>.” Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. 2015.</li>
<li>Chen, Liang-Chieh, et al. “<a href="https://arxiv.org/pdf/1412.7062.pdf" rel="nofollow" target="_blank">Semantic image segmentation with deep convolutional nets and fully connected crfs</a>.” arXiv preprint arXiv:1412.7062 (2014).</li>
<li>Noh, Hyeonwoo, Seunghoon Hong, and Bohyung Han. “<a href="http://www.cv-foundation.org/openaccess/content_iccv_2015/papers/Noh_Learning_Deconvolution_Network_ICCV_2015_paper.pdf" rel="nofollow" target="_blank">Learning deconvolution network for semantic segmentation</a>.” Proceedings of the IEEE International Conference on Computer Vision. 2015.</li>
<li>Zheng, Shuai, et al. “<a href="http://www.cv-foundation.org/openaccess/content_iccv_2015/papers/Zheng_Conditional_Random_Fields_ICCV_2015_paper.pdf" rel="nofollow" target="_blank">Conditional random fields as recurrent neural networks</a>.” Proceedings of the IEEE International Conference on Computer Vision. 2015.</li>
</ol>



<h4 id="数据集-1">数据集</h4>

<ol>
<li><a href="http://host.robots.ox.ac.uk/pascal/VOC/" rel="nofollow" target="_blank">PASCAL VOC</a></li>
<li><a href="http://mscoco.org/" rel="nofollow" target="_blank">MS COCO</a></li>
</ol>



<h3 id="运动和跟踪"><a name="t6"></a>运动和跟踪</h3>

<p>跟踪也属于计算机视觉领域内的基础问题之一，在近年来也得到了非常充足的发展，方法也由过去的非深度算法跨越向了深度学习算法，精度也越来越高，不过实时的深度学习跟踪算法精度一直难以提升，而精度非常高的跟踪算法的速度又十分之慢，因此在实际应用中也很难派上用场。 <br>
那么什么是跟踪呢？就目前而言，学术界对待跟踪的评判标准主要是在一段给定的视频中，在第一帧给出被跟踪物体的位置及尺度大小，在后续的视频当中，跟踪算法需要从视频中去寻找到被跟踪物体的位置，并适应各类光照变换，运动模糊以及表观的变化等。但实际上跟踪是一个不适定问题（ill posed problem），比如跟踪一辆车，如果从车的尾部开始跟踪，若是车辆在行进过程中表观发生了非常大的变化，如旋转了180度变成了侧面，那么现有的跟踪算法很大的可能性是跟踪不到的，因为它们的模型大多基于第一帧的学习，虽然在随后的跟踪过程中也会更新，但受限于训练样本过少，所以难以得到一个良好的跟踪模型，在被跟踪物体的表观发生巨大变化时，就难以适应了。所以，就目前而言，跟踪算不上是计算机视觉内特别热门的一个研究方向，很多算法都改进自检测或识别算法。 <br>
<img src="http://www.cvl.isy.liu.se/research/objrec/visualtracking/colvistrack/CN_Tracking_CVPR14_fig.jpg" alt="这里写图片描述" title=""></p>



<h4 id="近年代表论文-2">近年代表论文</h4>

<ol>
<li>Nam, Hyeonseob, and Bohyung Han. “<a href="http://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Nam_Learning_Multi-Domain_Convolutional_CVPR_2016_paper.pdf" rel="nofollow" target="_blank">Learning multi-domain convolutional neural networks for visual tracking</a>.” Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. 2016.</li>
<li>Held, David, Sebastian Thrun, and Silvio Savarese. “<a href="https://arxiv.org/pdf/1604.01802.pdf" rel="nofollow" target="_blank">Learning to track at 100 fps with deep regression networks</a>.” European Conference on Computer Vision. Springer International Publishing, 2016.</li>
<li>Henriques, João F., et al. “<a href="https://arxiv.org/pdf/1404.7584.pdf" rel="nofollow" target="_blank">High-speed tracking with kernelized correlation filters</a>.” IEEE Transactions on Pattern Analysis and Machine Intelligence 37.3 (2015): 583-596.</li>
<li>Ma, Chao, et al. “<a href="http://www.cv-foundation.org/openaccess/content_iccv_2015/papers/Ma_Hierarchical_Convolutional_Features_ICCV_2015_paper.pdf" rel="nofollow" target="_blank">Hierarchical convolutional features for visual tracking</a>.” Proceedings of the IEEE International Conference on Computer Vision. 2015.</li>
<li>Bertinetto, Luca, et al. “<a href="https://arxiv.org/pdf/1606.09549.pdf" rel="nofollow" target="_blank">Fully-convolutional siamese networks for object tracking</a>.” European Conference on Computer Vision. Springer International Publishing, 2016.</li>
<li>Danelljan, Martin, et al. “<a href="https://arxiv.org/pdf/1608.03773.pdf" rel="nofollow" target="_blank">Beyond correlation filters: Learning continuous convolution operators for visual tracking</a>.” European Conference on Computer Vision. Springer International Publishing, 2016.</li>
<li>Li, Hanxi, Yi Li, and Fatih Porikli. “<a href="https://arxiv.org/pdf/1503.00072.pdf" rel="nofollow" target="_blank">Deeptrack: Learning discriminative feature representations online for robust visual tracking</a>.” IEEE Transactions on Image Processing 25.4 (2016): 1834-1848.</li>
</ol>



<h4 id="数据集-2">数据集</h4>

<ol>
<li><a href="http://cvlab.hanyang.ac.kr/tracker_benchmark/benchmark_v10.html" rel="nofollow" target="_blank">OTB(Object Tracking Benchmark)</a></li>
<li><a href="http://www.votchallenge.net/" rel="nofollow" target="_blank">VOT(Visual Object Tracking)</a></li>
</ol>



<h3 id="视觉问答"><a name="t7"></a>视觉问答</h3>

<p>视觉问答也简称VQA（Visual Question Answering），是近年来非常热门的一个方向，其研究目的旨在根据输入图像，由用户进行提问，而算法自动根据提问内容进行回答。除了问答以外，还有一种算法被称为标题生成算法（Caption Generation），即计算机根据图像自动生成一段描述该图像的文本，而不进行问答。对于这类跨越两种数据形态（如文本和图像）的算法，有时候也可以称之为多模态，或跨模态问题。 <br>
<img src="https://avisingh599.github.io/images/vqa/sample_results.jpg" alt="这里写图片描述" title=""></p>



<h4 id="近年代表论文-3">近年代表论文</h4>

<ol>
<li>Xiong, Caiming, Stephen Merity, and Richard Socher. “<a href="http://www.jmlr.org/proceedings/papers/v48/xiong16.pdf" rel="nofollow" target="_blank">Dynamic memory networks for visual and textual question answering</a>.” arXiv 1603 (2016).</li>
<li>Wu, Qi, et al. “<a href="http://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Wu_Ask_Me_Anything_CVPR_2016_paper.pdf" rel="nofollow" target="_blank">Ask me anything: Free-form visual question answering based on knowledge from external sources</a>.” Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. 2016.</li>
<li>Zhu, Yuke, et al. “<a href="http://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Zhu_Visual7W_Grounded_Question_CVPR_2016_paper.pdf" rel="nofollow" target="_blank">Visual7w: Grounded question answering in images</a>.” Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. 2016.</li>
</ol>



<h4 id="数据集-3">数据集</h4>

<ol>
<li><a href="http://visualqa.org/" rel="nofollow" target="_blank">VQA</a></li>
</ol>



<h2 id="热点"><a name="t8"></a>热点</h2>

<p>随着深度学习的大举侵入，现在几乎所有人工智能方向的研究论文几乎都被深度学习占领了，传统方法已经很难见到了。有时候在深度网络上改进一个非常小的地方，就可以发一篇还不错的论文。并且，随着深度学习的发展，很多领域的现有数据集内的记录都在不断刷新，已经向人类记录步步紧逼，有的方面甚至已经超越了人类的识别能力。那么，下一步的研究热点到底会在什么方向呢？就我个人的一些观点如下：</p>

<ol>
<li>多模态研究： 目前的许多领域还是仅仅停留在单一的模态上，如单一分物体检测，物体识别等，而众所周知的是现实世界就是有多模态数据构成的，语音，图像，文字等等。 VQA 在近年来兴起的趋势可见，未来几年内，多模态的研究方向还是比较有前景的，如语音和图像结合，图像和文字结合，文字和语音结合等等。</li>
<li>数据生成： 现在机器学习领域的许多数据还是由现实世界拍摄的视频及图片经过人工标注后用作于训练或测试数据的，标注人员的职业素养和经验，以及多人标注下的规则统一难度在一定程度上也直接影响了模型的最终结果。而利用深度模型自动生成数据已经成为了一个新的研究热点方向，如何使用算法来自动生成数据相信在未来一段时间内都是不错的研究热点。</li>
<li><p>无监督学习：人脑的在学习过程中有许多时间都是无监督（Un-supervised Learning）的，而现有的算法无论是检测也好识别也好，在训练上都是依赖于人工标注的有监督（Supervised Learning）。如何将机器学习从有监督学习转变向无监督学习，应该是一个比较有挑战性的研究方向，当然这里的无监督学习当然不是指简单的如聚类算法（Clustering）这样的无监督算法。而LeCun也曾说： 如果将人工智能比喻作一块蛋糕的话，有监督学习只能算是蛋糕上的糖霜，而增强学习（Reinforce Learning）则是蛋糕上的樱桃，无监督学习才是真正蛋糕的本体。</p>

<p>最后，想要把握领域内最新的研究成果和动态，还需要多看论文，多写代码。 <br>
计算机视觉领域内的三大顶级会议有：</p>

<p><strong><em><a href="http://cvpr2017.thecvf.com/" rel="nofollow" target="_blank">Conference on Computer Vision and Pattern Recognition （CVPR）</a></em></strong> <br>
<strong><em><a href="http://iccv2017.thecvf.com/" rel="nofollow" target="_blank">International Conference on Computer Vision （ICCV）</a></em></strong> <br>
<strong><em><a href="http://www.eccv2016.org/" rel="nofollow" target="_blank">European Conference on Computer Vision （ECCV）</a></em></strong></p>

<p>较好的会议有以下几个：</p>

<p><strong><em><a href="http://www.wacv16.org/" rel="nofollow" target="_blank">The British Machine Vision Conference （BMVC）</a></em></strong> <br>
<strong><em><a href="http://2017.ieeeicip.org/" rel="nofollow" target="_blank">International Conference on Image Processing （ICIP）</a></em></strong> <br>
<strong><em><a href="http://www.wacv16.org/" rel="nofollow" target="_blank">Winter Conference on Applications of Computer Vision （WACV）</a></em></strong> <br>
<strong><em><a href="http://www.accv2016.org/" rel="nofollow" target="_blank">Asian Conference on Computer Vision (ACCV)</a></em></strong></p></li>
</ol>

<p>当然，毕竟文章的发表需要历经审稿和出版的阶段，因此当会议论文集出版的时候很可能已经过了小半年了，如果想要了解最新的研究，建议每天都上<a href="https://arxiv.org/list/cs.CV/recent" rel="nofollow" target="_blank">ArXiv</a>的cv板块看看，ArXiv上都是预出版的文章，并不一定最终会被各类会议和期刊接收，所以质量也就良莠不齐，对于没有分辨能力的入门新手而言，还是建议从顶会和顶级期刊上的经典论文入手。</p>




]]></content>
  </entry>
  <entry>
    <title>2,3,4sum,Combination sum</title>
    <url>/2019/11/19/2,3,4sum,Combination%20sum/</url>
    <content><![CDATA[<p>3，4sum用双指针</p>
<p>CombinationSum 用递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithms_4th;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3sum,4sum,combination sum</span></span><br><span class="line"><span class="comment"> * 双指针法：先排序，sum&lt;target:p1++;sum&gt;target:p2--;移动范围减小--&gt;为了p1,p2碰头</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ksum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>,  <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span> ,<span class="number">3</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sum2(<span class="keyword">int</span> target) &#123;</span><br><span class="line">		HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">		<span class="keyword">int</span> index1, index2;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (map.containsKey(target - arr[i])) &#123;</span><br><span class="line">				index1 = map.get(target - arr[i]) + <span class="number">1</span>;</span><br><span class="line">				index2 = i + <span class="number">1</span>;</span><br><span class="line">				res[<span class="number">0</span>] = Math.min(index1, index2);</span><br><span class="line">				res[<span class="number">1</span>] = Math.max(index1, index2);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// initialize map</span></span><br><span class="line">			map.put(arr[i], i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; sum3(<span class="keyword">int</span> target) &#123;</span><br><span class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">		ArrayList&lt;Integer&gt; list = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">int</span> p1, p2, sum;</span><br><span class="line"></span><br><span class="line">		Arrays.sort(arr);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">			p1 = i + <span class="number">1</span>;</span><br><span class="line">			p2 = arr.length - <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span> || arr[i] &gt; arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">while</span> (p2 &gt; p1) &#123;</span><br><span class="line">					sum = arr[i] + arr[p1] + arr[p2];</span><br><span class="line"></span><br><span class="line">					<span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">						list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">						list.add(arr[i]);</span><br><span class="line">						list.add(arr[p1]);</span><br><span class="line">						list.add(arr[p2]);</span><br><span class="line">						</span><br><span class="line">						res.add(list);</span><br><span class="line">						p1++;</span><br><span class="line">						p2--;</span><br><span class="line">						<span class="keyword">while</span> (p1 &lt; p2 &amp;&amp; arr[p1] == arr[p1 - <span class="number">1</span>])</span><br><span class="line">							p1++;</span><br><span class="line">						<span class="keyword">while</span> (p1 &lt; p2 &amp;&amp; arr[p2] == arr[p2 + <span class="number">1</span>])</span><br><span class="line">							p2--;</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">						p2--;</span><br><span class="line">					&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">						p1++;</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; sum4(<span class="keyword">int</span> target) &#123;</span><br><span class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">		ArrayList&lt;Integer&gt; list = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">int</span> p1, p2, sum;</span><br><span class="line"></span><br><span class="line">		Arrays.sort(arr);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">				p1 = j + <span class="number">1</span>;</span><br><span class="line">				p2 = arr.length - <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (j == <span class="number">0</span> || arr[j] &gt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">while</span> (p2 &gt; p1) &#123;</span><br><span class="line">						sum = arr[i] +arr[j]+ arr[p1] + arr[p2];</span><br><span class="line"></span><br><span class="line">						<span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">							list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">							list.add(arr[i]);</span><br><span class="line">							list.add(arr[j]);</span><br><span class="line">							list.add(arr[p1]);</span><br><span class="line">							list.add(arr[p2]);</span><br><span class="line">							</span><br><span class="line">							res.add(list);</span><br><span class="line">							p1++;</span><br><span class="line">							p2--;</span><br><span class="line">							<span class="keyword">while</span> (p1 &lt; p2 &amp;&amp; arr[p1] == arr[p1 - <span class="number">1</span>])</span><br><span class="line">								p1++;</span><br><span class="line">							<span class="keyword">while</span> (p1 &lt; p2 &amp;&amp; arr[p2] == arr[p2 + <span class="number">1</span>])</span><br><span class="line">								p2--;</span><br><span class="line">						&#125; <span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">							p2--;</span><br><span class="line">						&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">							p1++;</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span> target) &#123;</span><br><span class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">		ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="keyword">int</span>[] candidates=arr;</span><br><span class="line">		Arrays.sort(candidates);</span><br><span class="line">		recursive_sum(<span class="number">0</span>,list,target,res,candidates);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursive_sum</span><span class="params">(<span class="keyword">int</span> i,ArrayList&lt;Integer&gt; sub_list,<span class="keyword">int</span> target,</span></span></span><br><span class="line"><span class="function"><span class="params">									ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res, <span class="keyword">int</span>[]candidates)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(target==<span class="number">0</span>) &#123;</span><br><span class="line">			res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(sub_list));</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; candidates.length; j++) &#123;               </span><br><span class="line">			<span class="keyword">if</span> (candidates[j]&lt;=target) &#123;</span><br><span class="line">				sub_list.add(candidates[j]);</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">				recursive_sum(j, sub_list, target-candidates[j], res,candidates );            </span><br><span class="line">				sub_list.remove(sub_list.size()-<span class="number">1</span>);</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">// int[] res=sum2(10);</span></span><br><span class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res3 = sum3(<span class="number">7</span>);</span><br><span class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res4 = sum4(<span class="number">10</span>);</span><br><span class="line">		ArrayList&lt;ArrayList&lt;Integer&gt;&gt; combination_sum=combinationSum(<span class="number">4</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"sum3:"</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res3.size(); i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">				System.out.print(res3.get(i).get(j) + <span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"sum4:"</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res4.size(); i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">				System.out.print(res4.get(i).get(j) + <span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"Combination_sum:"</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; combination_sum.size(); i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; combination_sum.get(i).size(); j++) &#123;</span><br><span class="line">				System.out.print(combination_sum.get(i).get(j) + <span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>单向链表反转</title>
    <url>/2019/11/19/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<p>非递归：<br>算法核心是：后一个节点指向前一个节点，循环实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> algorithms_4th;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Linked_list</span> </span>&#123;</span><br><span class="line">	Node first=<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> v;</span><br><span class="line">		Node next=<span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">public</span>  <span class="title">Node</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.v=v;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InsertNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (node!=<span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(first==<span class="keyword">null</span>) &#123;first=node;<span class="keyword">return</span>;&#125;</span><br><span class="line">			Node nodeTem=first;</span><br><span class="line">			<span class="keyword">while</span>(nodeTem.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line">				nodeTem=nodeTem.next;</span><br><span class="line">			&#125;</span><br><span class="line">			nodeTem.next=node;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReverseList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(first==<span class="keyword">null</span>)<span class="keyword">return</span>;</span><br><span class="line">		Node cur_node=first;</span><br><span class="line">		Node tem;</span><br><span class="line">		Node pre_node=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span>(cur_node!=<span class="keyword">null</span>) &#123;</span><br><span class="line">			tem=cur_node.next;<span class="comment">//store current.next</span></span><br><span class="line">			</span><br><span class="line">			cur_node.next=pre_node;<span class="comment">//back forward</span></span><br><span class="line">			</span><br><span class="line">			pre_node=cur_node;<span class="comment">//next recycle precondition</span></span><br><span class="line">			cur_node=tem;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		first=pre_node;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Linked_list list= <span class="keyword">new</span> Linked_list();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			</span><br><span class="line">			list.InsertNode(<span class="keyword">new</span> Node(i*<span class="number">2</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		Node node=list.first;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			</span><br><span class="line">			System.out.print(node.v+ <span class="string">" "</span>);</span><br><span class="line">			node=node.next;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		list.ReverseList();</span><br><span class="line">		node=list.first;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			</span><br><span class="line">			System.out.print(node.v+ <span class="string">" "</span>);</span><br><span class="line">			node=node.next;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>随笔：DeeCamp2019冬令营面试</title>
    <url>/2019/11/19/%E9%9A%8F%E7%AC%94%EF%BC%9ADeeCamp2019%E5%86%AC%E4%BB%A4%E8%90%A5%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<p>1：对机器人怎么看：<br>机器人实用主义：创造价值工作，优化，替代大量重复劳动力。<br>缺点：没有感情，无法创新<br>现有技术缺失，很难发展人形全能AI。没必要做全能AI<br>全能全知的AI没有必要，要充分利用人的优势：可计划，创新，社交。<br>2：一句好说为什么录用你！<br>自我驱动能力强，接受新知识能力快，并对AI，ML有浓厚的兴趣，执行力强。</p>
]]></content>
  </entry>
  <entry>
    <title>编译原理 homework1.6</title>
    <url>/2019/11/19/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20homework1.6/</url>
    <content><![CDATA[<p>1.6.1 :w = 13, x = 11, y = 13, z = 11.</p>
<p>1.6.2:w = 9, x = 7, y = 13, z = 11.</p>
<p>1.6.3:    Block B1:<br>    declarations:  -&gt;   scope<br>        w                B1-B3-B4<br>        x                B1-B2-B4<br>        y                B1-B5<br>        z                B1-B2-B5</p>
<p>Block B2:<br>    declarations:  -&gt;   scope<br>        x                B2-B3<br>        z                B2</p>
<p>Block B3:<br>    declarations:  -&gt;   scope<br>        w                B3<br>        x                B3</p>
<p>Block B4:<br>    declarations:  -&gt;   scope<br>        w                B4<br>        x                B4</p>
<p>Block B5:<br>    declarations:  -&gt;   scope<br>        y                B5<br>        z                B5</p>
<p>1.6.4:</p>
]]></content>
  </entry>
  <entry>
    <title>JVM-Garbage Collection Mechanism</title>
    <url>/2019/11/19/JVM-Garbage%20Collection%20Mechanism/</url>
    <content><![CDATA[<p>1</p>
]]></content>
  </entry>
  <entry>
    <title>设计模式之单例模式</title>
    <url>/2019/11/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>单例模式：<br>确保每一个类只有一个实例</p>
<p>优点：唯一受控访问<br>缺点：难以扩展</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span>  <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="function"><span class="keyword">private</span>  <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Linux命令（1）常用</title>
    <url>/2019/11/19/Linux%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89%E5%B8%B8%E7%94%A8/</url>
    <content><![CDATA[<p>常见系统命令<br>1：echo  打印字符串或变量<br>2：date 显示日期<br>3：reboot 重启<br>4：poweroff 关机<br>5：wget [网址]   下载网络文件<br>6：ps aux 查看进程状态<br>7：top 查看进程活动与系统负载<br>8:  pidof 查看进程PID值<br>9：kill [PID] 强制终止进程<br>10：killall [服务名] 关闭服务所有进程<br>11:  ifconfig 网络状态与网卡信息<br>12:uname -a  查看系统内核<br>13:uptime 查看系统负载</p>
<p>工作目录切换命令：<br>1：pwd 显示当前工作目录<br>2：cd 切换目录<br>3：ls 当前目录文件信息</p>
<p>文本编辑：<br>1：cat  [文件名]  查看小文件<br>2：more  [文件名] 查看大文件<br>3：tr  [a-z] [A-Z]    转换文本所有小写为大写<br>4：wc -l [文件名]  显示文件有多少行 ，[-c]显示字节数<br>5：stat [文件名] 显示文件当前储存信息</p>
<p>文件目录管理命令：<br>1：touch [文件名]  创建空白文件<br>2：mkdir  [名称]  空白文件夹<br>3：cp  [源文件] [目标文件]  拷贝文件<br>4：mv  [源文件] [目标文件] 重命名或者拷贝文件，但删除源文件<br>5：rm -f  [文件]  删除文件<br>6:     file [文件]  查看文件类型<br>7:  tar -czvf [压缩包名] [文件目录] 压缩目录下文件<br>8：tar -xzvf [压缩包名] -C [目录] 解压文件到指定目录<br>9：grep [信息] [文件名]   列举出当前文件出现要检索信息的整行<br>10: find  [目录]  -name [关键词]   搜索目录下关键词所有的文件</p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode 1 两数之和</title>
    <url>/2019/11/19/Leetcode%201%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span> ,<span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="comment">//(元素，位置)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(m.count(target-nums[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> &#123;i , m[target - nums[i]]&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//放后面避免同一元素计算两次如【3，2】target =6</span></span><br><span class="line">            m[nums[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>map基于红黑树，查找为O（logn）</p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode 2 两数相加</title>
    <url>/2019/11/19/Leetcode%202%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190404003529978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">      <span class="keyword">int</span> v1 =<span class="number">0</span> , v2 = <span class="number">0</span>,sum=<span class="number">0</span>,carry=<span class="number">0</span>;  </span><br><span class="line">        </span><br><span class="line">        ListNode* ans = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line">        ListNode* now =ans;</span><br><span class="line">        </span><br><span class="line">     <span class="keyword">while</span>( l1 || l2) &#123;</span><br><span class="line">         </span><br><span class="line">         v1 = l1 ? l1-&gt;val : <span class="number">0</span>;</span><br><span class="line">         v2 = l2 ? l2-&gt;val : <span class="number">0</span>;</span><br><span class="line">         </span><br><span class="line">         sum=v1+v2+carry;</span><br><span class="line">         <span class="comment">//更新 carry</span></span><br><span class="line">         carry=<span class="number">0</span>;</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(sum &gt;=<span class="number">10</span>)  </span><br><span class="line">         &#123;</span><br><span class="line">             sum-=<span class="number">10</span>;</span><br><span class="line">             carry=<span class="number">1</span>;</span><br><span class="line">             </span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         now-&gt;next = <span class="keyword">new</span> ListNode(sum);</span><br><span class="line">         </span><br><span class="line">         now = now-&gt;next;</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(l1 != <span class="literal">NULL</span>)  l1=l1-&gt;next;</span><br><span class="line">         <span class="keyword">if</span>(l2 != <span class="literal">NULL</span>)  l2=l2-&gt;next;</span><br><span class="line">     &#125;</span><br><span class="line">        <span class="comment">//如果此时carry==1，说明还需要往前进一位</span></span><br><span class="line">        <span class="keyword">if</span>(carry) now-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans-&gt;next;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190404003551848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>创建一个新链表(-1-&gt;null)</p>
<p>carry为标识位表示进制是否加1</p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode 3 无重复字符的最长字串</title>
    <url>/2019/11/19/Leetcode%203%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190404003712354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>,left=<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//（元素，位置）</span></span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();++i)</span><br><span class="line">        &#123;	<span class="comment">//维护一个滑动窗口，【left】【窗口】，left不属于窗口，紧挨窗口最左侧</span></span><br><span class="line">            <span class="keyword">if</span>(m.count(s[i]) &amp;&amp; (m[s[i]] &gt; left))</span><br><span class="line">            &#123;	</span><br><span class="line">                left=m[s[i]];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            m[s[i]] = i;</span><br><span class="line">            </span><br><span class="line">		<span class="comment">//更新ans</span></span><br><span class="line">            ans=max(ans,i-left);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20190404012556482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode 4寻找两个有序数组的中位数</title>
    <url>/2019/11/19/Leetcode%204%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190404012715887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; ans;</span><br><span class="line">        </span><br><span class="line">        ans.insert(ans.end(),nums1.begin(),nums1.end());</span><br><span class="line">        ans.insert(ans.end(),nums2.begin(),nums2.end());</span><br><span class="line">        </span><br><span class="line">        sort(ans.begin(),ans.end());</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> size = ans.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span> res;</span><br><span class="line">        <span class="keyword">if</span>(size %<span class="number">2</span> ==<span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            res=(ans[size/<span class="number">2</span>]+ans[size/<span class="number">2</span><span class="number">-1</span>])/<span class="number">2.0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            </span><br><span class="line">            res=ans[size/<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>取了巧合而已，看一下C++sort（）源码。。。<br><img src="https://img-blog.csdnimg.cn/20190404020008240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode 5最大回文字串</title>
    <url>/2019/11/19/Leetcode%205%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%96%87%E5%AD%97%E4%B8%B2/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190404032343593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=s.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(s.size() &lt;<span class="number">2</span> ) <span class="keyword">return</span> s;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>,right=<span class="number">0</span>,max_length=<span class="number">1</span>,start=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; n;)</span><br><span class="line">        &#123;</span><br><span class="line">          left = i,right =i;</span><br><span class="line">            </span><br><span class="line">          <span class="keyword">while</span>(right&lt;n<span class="number">-1</span> &amp;&amp; s[right]==s[right+<span class="number">1</span>]) </span><br><span class="line">              ++right;</span><br><span class="line">        </span><br><span class="line">          i=right+<span class="number">1</span>;</span><br><span class="line">         </span><br><span class="line">            </span><br><span class="line">          <span class="comment">//从中心扩展</span></span><br><span class="line">          <span class="keyword">while</span>(right &lt;n<span class="number">-1</span> &amp;&amp; left &gt; <span class="number">0</span> &amp;&amp; s[left<span class="number">-1</span>]==s[right+<span class="number">1</span>])</span><br><span class="line">          &#123;</span><br><span class="line">              --left;</span><br><span class="line">              ++right;</span><br><span class="line">             </span><br><span class="line">          &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(max_length &lt; right - left +<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                max_length = right - left + <span class="number">1</span>;</span><br><span class="line">                start = left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> s.substr(start,max_length);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190404032254882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>此为中心扩展法，自里向外搜索回文子串</p>
]]></content>
  </entry>
  <entry>
    <title>macOS 远程SSH连接  Linux</title>
    <url>/2019/11/19/macOS%20%E8%BF%9C%E7%A8%8BSSH%E8%BF%9E%E6%8E%A5%20%20Linux/</url>
    <content><![CDATA[<p>ssh 用户名@ip</p>
<p>ssh -X 用户名@ip   是调用服务器的GUI界面</p>
]]></content>
  </entry>
  <entry>
    <title>sklearn 常用 分类器皿</title>
    <url>/2019/11/19/sklearn%20%E5%B8%B8%E7%94%A8%20%E5%88%86%E7%B1%BB%E5%99%A8%E7%9A%BF/</url>
    <content><![CDATA[<h3 id="KNN-Classifier"><a href="#KNN-Classifier" class="headerlink" title="KNN Classifier"></a>KNN Classifier</h3><p>from sklearn.neighbors import KNeighborsClassifier</p>
<p>clf = KNeighborsClassifier()<br>clf.fit(train_x, train_y)</p>
<hr>
<h3 id="Logistic-Regression-Classifier"><a href="#Logistic-Regression-Classifier" class="headerlink" title="Logistic Regression Classifier"></a>Logistic Regression Classifier</h3><p>from sklearn.linear_model import LogisticRegression</p>
<p>clf = LogisticRegression(penalty=’l2’)<br>clf.fit(train_x, train_y)</p>
<hr>
<h3 id="Random-Forest-Classifier"><a href="#Random-Forest-Classifier" class="headerlink" title="Random Forest Classifier"></a>Random Forest Classifier</h3><p>from sklearn.ensemble import RandomForestClassifier</p>
<p>clf = RandomForestClassifier(n_estimators=8)<br>clf.fit(train_x, train_y)</p>
<hr>
<h3 id="Decision-Tree-Classifier"><a href="#Decision-Tree-Classifier" class="headerlink" title="Decision Tree Classifier"></a>Decision Tree Classifier</h3><p>from sklearn import tree</p>
<p>clf = tree.DecisionTreeClassifier()<br>clf.fit(train_x, train_y)</p>
<hr>
<h3 id="GBDT-Gradient-Boosting-Decision-Tree-Classifier"><a href="#GBDT-Gradient-Boosting-Decision-Tree-Classifier" class="headerlink" title="GBDT(Gradient Boosting Decision Tree) Classifier"></a>GBDT(Gradient Boosting Decision Tree) Classifier</h3><p>from sklearn.ensemble import GradientBoostingClassifier</p>
<p>clf = GradientBoostingClassifier(n_estimators=200)<br>clf.fit(train_x, train_y)</p>
<hr>
<p>###AdaBoost Classifier<br>from sklearn.ensemble import  AdaBoostClassifier</p>
<p>clf = AdaBoostClassifier()<br>clf.fit(train_x, train_y)</p>
<hr>
<h3 id="GaussianNB"><a href="#GaussianNB" class="headerlink" title="GaussianNB"></a>GaussianNB</h3><p>from sklearn.naive_bayes import GaussianNB</p>
<p>clf = GaussianNB()<br>clf.fit(train_x, train_y)</p>
<hr>
<h3 id="Linear-Discriminant-Analysis"><a href="#Linear-Discriminant-Analysis" class="headerlink" title="Linear Discriminant Analysis"></a>Linear Discriminant Analysis</h3><p>from sklearn.discriminant_analysis import LinearDiscriminantAnalysis</p>
<p>clf = LinearDiscriminantAnalysis()<br>clf.fit(train_x, train_y)</p>
<hr>
<h3 id="Quadratic-Discriminant-Analysis"><a href="#Quadratic-Discriminant-Analysis" class="headerlink" title="Quadratic Discriminant Analysis"></a>Quadratic Discriminant Analysis</h3><p>from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis</p>
<p>clf = QuadraticDiscriminantAnalysis()<br>clf.fit(train_x, train_y)</p>
<hr>
<h3 id="SVM-Classifier"><a href="#SVM-Classifier" class="headerlink" title="SVM Classifier"></a>SVM Classifier</h3><p>from sklearn.svm import SVC</p>
<p>clf = SVC(kernel=’rbf’, probability=True)<br>clf.fit(train_x, train_y)</p>
<hr>
<h3 id="Multinomial-Naive-Bayes-Classifier"><a href="#Multinomial-Naive-Bayes-Classifier" class="headerlink" title="Multinomial Naive Bayes Classifier"></a>Multinomial Naive Bayes Classifier</h3><p>from sklearn.naive_bayes import MultinomialNB</p>
<p>clf = MultinomialNB(alpha=0.01)<br>clf.fit(train_x, train_y)</p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode 6 Z型变换</title>
    <url>/2019/11/19/Leetcode%206%20Z%E5%9E%8B%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190406183836370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = s.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(numRows &lt;= <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> gap = <span class="number">2</span>*numRows <span class="number">-2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">string</span>  new_str = <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; numRows; i++)</span><br><span class="line">       &#123;<span class="comment">//i == row current </span></span><br><span class="line">           </span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j=i ; j&lt; size; j+=gap)</span><br><span class="line">         &#123;</span><br><span class="line">             </span><br><span class="line">             new_str+=s[j];</span><br><span class="line">             </span><br><span class="line">             <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; i &lt; numRows <span class="number">-1</span> )</span><br><span class="line">             &#123;</span><br><span class="line">               <span class="keyword">int</span> t = j + gap <span class="number">-2</span>*i;</span><br><span class="line">                 <span class="keyword">if</span>( t &lt; size)</span><br><span class="line">                new_str+=s[t];</span><br><span class="line">                 </span><br><span class="line">             &#125;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">         &#125;</span><br><span class="line">           </span><br><span class="line">       &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> new_str;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p><img src="https://img-blog.csdnimg.cn/20190406183821328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190406183916423.png" alt="在这里插入图片描述"><br>黑色的位置规律为 +2n-2  用 gap 表示规律，j表示当前黑色位置<br>i表示为当前行<br>红色的位置规律为  j+ gap - 2*i </p>
<p>两个循环：<br>外循环遍历行数，内循环遍历每一行的操作。</p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode  7整数反转</title>
    <url>/2019/11/19/Leetcode%20%207%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190406200617644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//only &lt; 10</span></span><br><span class="line">        <span class="keyword">if</span>(x/<span class="number">10</span> == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">long</span> xx=x;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;   </span><br><span class="line">            xx*=<span class="number">-1</span>;</span><br><span class="line">            flag=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> ans =<span class="number">0</span> ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(xx != <span class="number">0</span> )</span><br><span class="line">        &#123;   <span class="keyword">if</span>(ans*<span class="number">10</span>+xx%<span class="number">10</span> &gt; INT_MAX) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            ans=ans*<span class="number">10</span>+xx%<span class="number">10</span>;</span><br><span class="line">            xx=xx/<span class="number">10</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        &#123;</span><br><span class="line">           ans=ans*(<span class="number">-1</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190406200600678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>range int [-2^31     ,   2^31 -1]</p>
<p>like reverse  -2^31   ——–&gt; 2^31   ,that doesn’t work  .</p>
<p>so we need to use ==long== to store x</p>
<p>INT_MAX  —&gt;2^31 -1</p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode   8  atoi  字符串转整数</title>
    <url>/2019/11/19/Leetcode%20%20%208%20%20atoi%20%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190406205448509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size =str.size();</span><br><span class="line">        <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span> ,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(str[i] == <span class="string">' '</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>((str[i]&lt;<span class="string">'0'</span> || str[i] &gt; <span class="string">'9'</span>) &amp;&amp; str[i] != <span class="string">'+'</span> &amp;&amp; str[i] != <span class="string">'-'</span>  )&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'-'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag=<span class="literal">false</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[i]== <span class="string">'+'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(str[i]&gt;=<span class="string">'0'</span> &amp;&amp; str[i] &lt;=<span class="string">'9'</span> &amp;&amp; i &lt;size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = str[i] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>((ans*<span class="number">10</span> + tmp) &gt; INT_MAX ) &#123;</span><br><span class="line">                <span class="keyword">if</span>(flag) <span class="keyword">return</span> INT_MAX;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> INT_MIN;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=ans*<span class="number">10</span>+tmp;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        &#123;</span><br><span class="line">            ans*=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190406205436655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode 10  regular-expression-matching</title>
    <url>/2019/11/19/Leetcode%2010%20%20regular-expression-matching/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190406211406181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sl=s.size(), pl=p.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &gt; dp(sl+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(pl+<span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=sl; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=pl; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">1</span> &amp;&amp; p[j<span class="number">-1</span>]==<span class="string">'*'</span>)</span><br><span class="line">                    dp[i][j] = dp[i][j<span class="number">-2</span>] </span><br><span class="line">                    || (i&gt;<span class="number">0</span> &amp;&amp; (p[j<span class="number">-2</span>]==<span class="string">'.'</span> || s[i- <span class="number">1</span>]==p[j<span class="number">-2</span>])</span><br><span class="line">                     &amp;&amp; dp[i<span class="number">-1</span>][j]);</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = i&gt;<span class="number">0</span> </span><br><span class="line">                &amp;&amp; (s[i<span class="number">-1</span>]==p[j<span class="number">-1</span>] || p[j<span class="number">-1</span>]==<span class="string">'.'</span>) &amp;&amp; dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[sl][pl];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>dynamic programming :<br>time complexity : O(n^2)</p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode 11盛水最多的容器</title>
    <url>/2019/11/19/Leetcode%2011%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190407025819200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解法一：暴力法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt; height.size()<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span> ;j&lt;height.size();++j)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">int</span> minOfTwo=height[i]&lt;height[j] ? height[i] : height[j];</span><br><span class="line">               </span><br><span class="line">               <span class="keyword">int</span> tem=minOfTwo * (j-i);</span><br><span class="line">               <span class="keyword">if</span>(max&lt;tem) max = tem;</span><br><span class="line">               </span><br><span class="line">           &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190407032113963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>2：解法2—-贪心</p>
<p>双指针移动—–&gt;左右双指针，减少的距离换更长的长度</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>,i=<span class="number">0</span>,j=height.size()<span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">        &#123;   <span class="keyword">int</span> tmp = min(height[i],height[j]) * (j-i);</span><br><span class="line">            ans = max(ans,tmp);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>( height[i] &lt; height[j])</span><br><span class="line">                i++;</span><br><span class="line">            <span class="keyword">else</span> j--;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190407033652832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode 12 int -_ Rome</title>
    <url>/2019/11/19/Leetcode%2012%20int%20-_%20Rome/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190407033756773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">       <span class="built_in">string</span> str = <span class="string">""</span>;</span><br><span class="line">       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; number&#123;<span class="number">1000</span>,<span class="number">900</span>,<span class="number">500</span>,<span class="number">400</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;;</span><br><span class="line">       <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; rome&#123;<span class="string">"M"</span>,<span class="string">"CM"</span>,<span class="string">"D"</span>,<span class="string">"CD"</span>,<span class="string">"C"</span>,<span class="string">"XC"</span>,<span class="string">"L"</span>,<span class="string">"XL"</span>,<span class="string">"X"</span>,<span class="string">"IX"</span>,<span class="string">"V"</span>,<span class="string">"IV"</span>,<span class="string">"I"</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;number.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(num &gt;= number[i] )&#123;</span><br><span class="line">                num-=number[i];</span><br><span class="line">                str+=rome[i];</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(num == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>1:I<br>2:II<br>3:III<br>4:IV<br>5:V<br>6:VI<br>7:VII<br>8:VIII<br>9:IX<br>10:X<br>so: 5 种 I，IV，V，IX，X<br>各种位数均如上<br>从大到小遍历，如果大于某个数，就对它进行循环递减，Rome字符串递加。</p>
<p><img src="https://img-blog.csdnimg.cn/20190407041927386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode13罗马数字-_int</title>
    <url>/2019/11/19/Leetcode13%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97-_int/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190407042008244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; m&#123;&#123;<span class="string">'M'</span>,<span class="number">1000</span>&#125;,&#123;<span class="string">'D'</span>,<span class="number">500</span>&#125;,&#123;<span class="string">'C'</span>,<span class="number">100</span>&#125;,&#123;<span class="string">'L'</span>,<span class="number">50</span>&#125;,&#123;<span class="string">'X'</span>,<span class="number">10</span>&#125;,&#123; <span class="string">'V'</span>,<span class="number">5</span> &#125;,&#123;<span class="string">'I'</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ans =<span class="number">0</span> ,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;s.size()<span class="number">-1</span> &amp;&amp; m[s[i]] &lt; m[s[i+<span class="number">1</span>]])</span><br><span class="line">            &#123;</span><br><span class="line">                ans-=m[s[i]];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans+=m[s[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>从左往右遍历字符串，比较前后，如果小的话就先减再加<br>eg：IV  —–&gt;   4  ——&gt; -1 +5 </p>
<p>这样就可以避免“IV”整体匹配了</p>
<p><img src="https://img-blog.csdnimg.cn/20190407045704705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode 14 最长公共前缀</title>
    <url>/2019/11/19/Leetcode%2014%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190407050437880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> str = <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(strs.empty())<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(strs.size()==<span class="number">1</span>) <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span> ,i=<span class="number">0</span>,min_len=strs[j].size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;strs.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(strs[j].size() &lt; min_len)min_len=strs[j].size();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;min_len;j++)</span><br><span class="line">        &#123;   </span><br><span class="line">           <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;strs.size()<span class="number">-1</span>;i++)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(strs[i][j] != strs[i+<span class="number">1</span>][j])</span><br><span class="line">                   <span class="keyword">return</span> str;</span><br><span class="line">               <span class="keyword">if</span>(i==strs.size()<span class="number">-2</span>)</span><br><span class="line">                   str+=strs[<span class="number">0</span>][j];</span><br><span class="line">           &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><img src="https://img-blog.csdnimg.cn/20190407055027495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode 15三数之和</title>
    <url>/2019/11/19/Leetcode%2015%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190407055124317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3Sum problem</p>
<p>nums[i]+nums[j]=0-nums[k];</p>
<p>因为有可能会出现很多重复的数据，所以我们用双指针来避免重复，而不用两个for遍历</p>
<p>for虽然可以&gt;target的时候break；<br>但是无法处理过多的重复情况</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">if</span> (nums.empty() || nums.back() &lt; <span class="number">0</span> || nums.front() &gt; <span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; nums.size(); ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[k] &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; nums[k] == nums[k - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> target = -nums[k];</span><br><span class="line">            <span class="keyword">int</span> i = k + <span class="number">1</span>, j = nums.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    res.push_back(&#123;nums[k], nums[i], nums[j]&#125;);</span><br><span class="line">                    <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[i] == nums[i + <span class="number">1</span>]) ++i;</span><br><span class="line">                    <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) --j;</span><br><span class="line">                    ++i; --j;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[j] &lt; target) ++i;</span><br><span class="line">                <span class="keyword">else</span> --j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p><img src="https://img-blog.csdnimg.cn/20190407194611378.png" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode 16最接近的三个数字之和</title>
    <url>/2019/11/19/Leetcode%2016%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E4%B8%AA%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2019040811124447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>方法一：暴力遍历</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cpp</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        sort(nums.begin(),nums.end());</span><br><span class="line">        <span class="keyword">if</span>(nums.size() &lt; <span class="number">3</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> gap=INT_MAX;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-2</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>,k=nums.size()<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;k)</span><br><span class="line">            &#123;   <span class="keyword">int</span> now = nums[i]+nums[k]+nums[j] ;</span><br><span class="line">                <span class="keyword">if</span>(now == target) <span class="keyword">return</span> target;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(now -target) &lt; gap)</span><br><span class="line">                &#123;</span><br><span class="line">                    gap=<span class="built_in">abs</span>(now -target) ;</span><br><span class="line">                    ans=now;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(now &gt; target ) --k;</span><br><span class="line">                <span class="keyword">else</span> ++j;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p>固定一个数字，双指针，左右逼近，定一个gap为目前距离target的最小距离<br>更新gap到最小即为最接近的数字。</p>
<p><img src="https://img-blog.csdnimg.cn/20190408112715354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="!\[">)在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/20190408111100285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20190408111100285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70</a>)</p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode 17  电话号码的字母组合</title>
    <url>/2019/11/19/Leetcode%2017%20%20%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190408113225750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>首先你不知道有多少位数，因此用循环不知道嵌套多少层，那么就不能使用循环嵌套！<br>第一种：recursion</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line">        <span class="keyword">if</span>(digits.empty()) <span class="keyword">return</span> v;</span><br><span class="line">        <span class="built_in">string</span> tmp[]= &#123;<span class="string">""</span>,<span class="string">""</span>,<span class="string">"abc"</span>,<span class="string">"def"</span>,<span class="string">"ghi"</span>,<span class="string">"jkl"</span>,<span class="string">"mno"</span>,<span class="string">"pqrs"</span>,<span class="string">"tuv"</span>,<span class="string">"wxyz"</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> str = <span class="string">""</span>;</span><br><span class="line">        recursive(digits,index,tmp,v,str);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recursive</span> <span class="params">(<span class="built_in">string</span> digits,<span class="keyword">int</span> charsSize, <span class="built_in">string</span> tmp[] ,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;v,<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function">        </span>&#123;   </span><br><span class="line">            <span class="keyword">if</span>(charsSize == digits.size())</span><br><span class="line">            &#123; </span><br><span class="line">                v.push_back(str);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">string</span> num2chars = tmp[digits[charsSize]-<span class="string">'0'</span>];<span class="comment">//abc  ,def</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num2chars.size();++i)</span><br><span class="line">            &#123;</span><br><span class="line">                recursive(digits,charsSize+<span class="number">1</span>,tmp,v,str+<span class="built_in">string</span>(<span class="number">1</span>,num2chars[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20190408142025520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第二种：入队列出队列</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(digits.empty()) <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">string</span> tmp[]= &#123;<span class="string">""</span>,<span class="string">""</span>,<span class="string">"abc"</span>,<span class="string">"def"</span>,<span class="string">"ghi"</span>,<span class="string">"jkl"</span>,<span class="string">"mno"</span>,<span class="string">"pqrs"</span>,<span class="string">"tuv"</span>,<span class="string">"wxyz"</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; que;</span><br><span class="line">        que.push(<span class="string">""</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;digits.size();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = tmp[digits[i]-<span class="string">'0'</span>];<span class="comment">//,abc,pqrs</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> queLength=que.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;queLength;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> now = que.front();</span><br><span class="line">                que.pop();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;str.size();j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    que.push(now+str[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;<span class="comment">//1X3,3X3.......</span></span><br><span class="line">        <span class="keyword">while</span>(!que.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            ans.push_back(que.front());</span><br><span class="line">            que.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Leetcode 18</title>
    <url>/2019/11/19/Leetcode%2018/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190408170718909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; fourSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(nums.size() &lt;<span class="number">4</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        sort(nums.begin(),nums.end());<span class="comment">//find consistent duplications</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-3</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; target &amp;&amp; nums[i] &gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i<span class="number">-1</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> fixed = target - nums[i];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.size()<span class="number">-2</span>;j++)</span><br><span class="line">            &#123;   <span class="comment">//no duplications</span></span><br><span class="line">                <span class="keyword">if</span>(j &gt; i+<span class="number">1</span> &amp;&amp;  nums[j] == nums[j<span class="number">-1</span>])<span class="keyword">continue</span>;  </span><br><span class="line">                <span class="keyword">int</span> k=j+<span class="number">1</span>,l=nums.size()<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>(k&lt;l)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> tmp = nums[j]+nums[k]+nums[l];</span><br><span class="line">                    <span class="keyword">if</span>(tmp == fixed)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ans.push_back(&#123;nums[i],nums[j],nums[k],nums[l]&#125;);</span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">while</span>(k&lt;l &amp;&amp; nums[k]==nums[k+<span class="number">1</span>]) ++k;</span><br><span class="line">                        <span class="keyword">while</span>(k&lt;l &amp;&amp; nums[l]==nums[l<span class="number">-1</span>]) --l;</span><br><span class="line">                        --l;</span><br><span class="line">                        ++k;</span><br><span class="line">                        </span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tmp &gt; fixed ) --l;</span><br><span class="line">                    <span class="keyword">else</span> ++k;</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>4sum  和3sum原理一致</p>
<p>都是（n-2）层循环+双指针</p>
<p>注意每层循环都要比较是否fixed的数字有重复，有重复就continue<br>eg：==“if(j &gt; i+1 &amp;&amp;  nums[j] == nums[j-1])continue;  ”==<br>int j=i-1;<br>j&gt;i+1 是因为第1个j没有 j-1，第一个数字没有前一位数。</p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode19删除链表倒数第N个节点</title>
    <url>/2019/11/19/Leetcode19%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190408171315256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1:扫描两次</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next ==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            </span><br><span class="line">            ListNode *node = head;</span><br><span class="line">            <span class="keyword">int</span> size=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(node != <span class="literal">NULL</span> &amp;&amp; node-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">                node=node-&gt;next;</span><br><span class="line">                ++size;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n==size) <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">            node=head;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;size-n<span class="number">-1</span>;++i)</span><br><span class="line">            &#123;</span><br><span class="line">                node=node-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            node-&gt;next=node-&gt;next-&gt;next;</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><input checked="" disabled="" type="checkbox"> 先记录总共有多少个节点为size个</li>
<li><input checked="" disabled="" type="checkbox"> 随后找到倒数第n个然后删掉</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190408173511470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2：扫描一次,双指针，创建一个pre——head节点指向head，<br>倒数第N个之前的那个数字和最后一个数字规律两个相差n步，则和最后一个的next相差n+1步数。<br>找到规律以后往前推，创建快慢指针相差n+1步。<br>当快的为NULL时，则慢指针的NEXT为所要删掉的节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">NULL</span> ||head-&gt;next==<span class="literal">NULL</span> ) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode *pre_head =<span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        pre_head-&gt;next =head;</span><br><span class="line">        </span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        ListNode *q =pre_head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            q=q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        q-&gt;next=q-&gt;next-&gt;next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> pre_head-&gt;next;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190408180901360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>SSH localhost与remote host  互相传送文件</title>
    <url>/2019/11/19/SSH%20localhost%E4%B8%8Eremote%20host%20%20%E4%BA%92%E7%9B%B8%E4%BC%A0%E9%80%81%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<div id="content_views" class="markdown_views">
                            <!-- flowchart 箭头图标 勿删 -->
                            <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
                            <ul>
<li><p>安装 SSH(Secure Shell) 服务以提供远程管理服务 <br>
<code>sudo apt-get install ssh</code></p></li>
<li><p>SSH 远程登入 Ubuntu 机 <br>
<code>$ssh username@192.168.0.1</code></p></li>
<li><p>将 文件/文件夹 从远程 Ubuntu 机拷至本地(scp) <br>
<code>$scp -r username@192.168.0.1:/home/username/remotefile.txt</code></p></li>
<li><p>将 文件/文件夹 从本地拷至远程 Ubuntu 机(scp) <br>
<code>$scp -r localfile.txt username@192.168.0.1:/home/username/</code></p></li>
<li><p>将 文件/文件夹 从远程 Ubuntu 机拷至本地(rsync)</p></li>
</ul>



<pre class="prettyprint" name="code"><code class="hljs ruby has-numbering" onclick="mdcp.copyCode(event)">rsync -v -u -a --delete --rsh=ssh --stats username<span class="hljs-variable">@192</span>.<span class="hljs-number">168.0</span>.<span class="hljs-number">1</span><span class="hljs-symbol">:/home/username/remotefile</span>.txt .<div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li></ul></pre>

<ul>
<li>将 文件/文件夹 从本地拷至远程 Ubuntu 机(rsync)</li>
</ul>

<pre class="prettyprint" name="code"><code class="hljs ruby has-numbering" onclick="mdcp.copyCode(event)">rsync -v -u -a --delete --rsh=ssh --stats localfile.txt username<span class="hljs-variable">@192</span>.<span class="hljs-number">168.0</span>.<span class="hljs-number">1</span><span class="hljs-symbol">:/home/username/</span><div class="hljs-button {2}" data-title="复制"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li></ul></pre>

<p>在 Windows 机上用 SSH 远程登录 Ubuntu 机</p>

<p>下载 <a href="http://www.putty.org/" rel="nofollow" target="_blank">PuTTY</a></p>

<p>如何在 Windows 机上拷贝 文件/文件夹 从/到 远程 Ubuntu 机</p>

<p>下载 <a href="https://filezilla-project.org/" rel="nofollow" target="_blank">FileZilla</a></p>

<p>ssh -X guoshuang@192.168.100.4</p>

<p>支持 SSH 图形界面。也就是说，gedit 打开和另存都是在服务器端操作的。nautilus 打开服务器端的文件管理器。这下就比只用命令行方便多了。不知道 windows 下的 putty 支持不。</p>

<p>ssh -X guoshuang@192.168.100.4 ls</p>

<p>直接在服务器端执行 ls 返回结果到客户端</p>

<p>如何限制通过SSH远程连接的用户帐号</p>

<p>如，假如你启用了SSH服务，那么任何有有效帐号的用户都可以远程连接。这可能会导致一些安全问题，由于有一些远程密码破解工具可以尝试常见的用户名／密码</p>

<p>备份SSH服务的配置文件</p>

<p>sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.ORIGINAL</p>

<p>编辑配置文件</p>

<p>sudo gedit /etc/ssh/sshd_config</p>

<ul>
<li>将参数 PermitRootLogin 由 yes 更改为 no。 超级用户不能直接通过远程联机。</li>
<li>添加参数 AllowUsers 设定远程连接的用户名 (用空格来分割) 。</li>
<li>您也可以使用 DenyUsers for fine-grained selection of users.</li>
<li>If you enable the openssh server and you have no intention for now to enable remote connections, you may add AllowUsers nosuchuserhere to disable anyone connecting.</li>
</ul>

<p>SSH 命令</p>

<p>ssh 命令可以用来在远程机器上不经 shell 提示登录而执行命令。它的语法格式是： ssh hostname command。譬如，如果你想在远程主机 penguin.example.net 上执行 ls /usr/share/doc 命令，在 shell 提示下键入下面的命令：</p>

<p>ssh penguin.example.net ls /usr/share/doc</p>

<p>3.2. 使用 scp 命令</p>

<p>　　scp 命令可以用来通过安全、加密的连接在机器间传输文件。它与 rcp 相似。</p>

<p>　　把本地文件传输给远程系统的一般语法是：</p>

<p>　　scp localfile username@tohostname:/newfilename</p>

<p>　　localfile 指定源文件，username@tohostname:/newfilename 指定目标文件。</p>

<p>　　要把本地文件 shadowman 传送到你在 penguin.example.net 上的账号内，在 shell 提示下键入(把 username 替换成你的用户名)：</p>

<p>　　scp shadowman username@penguin.example.net:/home/username</p>

<p>　　这会把本地文件 shadowman 传输给 penguin.example.net 上的 /home/username/shadowman 文件。</p>

<p>　　把远程文件传输给本地系统的一般语法是：</p>

<p>　　scp username@tohostname:/remotefile /newlocalfile</p>

<p>　　remotefile 指定源文件，newlocalfile 指定目标文件。</p>

<p>　　源文件可以由多个文件组成。譬如，要把目录 /downloads 的内容传输到远程机器 penguin.example.net 上现存的 uploads 目录，在 shell 提示下键入下列命令：</p>

<p>　　scp /downloads/* username@penguin.example.net:/uploads/</p>

<p>　　3.3. 使用 sftp 命令</p>

<p>　 　sftp 工具可以用来打开一次安全互动的 FTP 会话。它与 ftp 相似，只不过，它使用安全、加密的连接。它的一般语法是：sftp username@hostname.com。一旦通过 验证，你可以使用一组和使用 FTP 相似的命令。请参阅 sftp 的说明书页(man)来获取这些 命令的列表。要阅读说明书页，在 shell 提示下执行 man sftp 命令。sftp 工具只在 OpenSSH 版本 2.5.0p1 以上才有。</p>

<p>SSH 概念</p>

<p>SSH是指Secure Shell，SSH协议族由IETF（Internet Engineering Task Force）的Network Working Group制定，SSH协议的内容SSH协议是建立在应用层和传输层基础上的安全协议。</p>

<p>传 统的网络服务程序，如FTP、Pop和Telnet其本质上都是不安全的；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人 （man-in-the-middle）攻击方式的攻击。就是存在另一个人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据 传给真正的服务器。</p>

<p>SSH(Secure Shell)是目前比较可靠的为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。通过SSH，可以把所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。 <br>
SSH，还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、Pop、甚至为PPP提供一个安全的”通道”。</p>            </div>
]]></content>
  </entry>
  <entry>
    <title>Attention注意力机制简介</title>
    <url>/2019/11/19/Attention%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2><a name="t0"></a>一、注意力机制回顾</h2>

<p>简单来说，注意力本质上就是一个经过softmax层输出的向量。</p>

<p>在早期机器翻译应用中，神经网络结构一般如下图，是一个RNN的Encoder-Decoder模型。左边是Encoder，代表输入的sentence。右边代表Decoder，是根据输入sentence对应的翻译。Encoder会通过RNN将最后一个step的隐藏状态向量c作为输出，Deocder利用向量c进行翻译。这样做有一个缺点，翻译时过分依赖于这个将整个sentence压缩成固定输入的向量。输入的sentence有可能包含上百个单词，这么做不可避免会造成信息的丢失，翻译结果也无法准确了。</p>

<p style="text-align:center;"><img alt="" class="has" height="328" src="https://img-blog.csdn.net/20181011165935693?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA5NjAxNTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="716"></p>

<p>注意力机制的引入就是为了解决此问题，注意力机制使得机器翻译中利用原始的sentence信息，减少信息损失。在解码层，生成每个时刻的y，都会利用到x1,x2,x3....，而不再仅仅利用最后时刻的隐藏状态向量。同时注意力机制还能使翻译器zoom in or out（使用局部或全局信息）。</p>

<p>注意力机制听起来很高大上、很神秘，其实它的整个实现只需要一些参数和简单的数学运算。那么注意力机制到底是如何实现的呢？</p>

<p style="text-align:center;"><img alt="" class="has" src="https://img-blog.csdnimg.cn/20190215104836321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA5NjAxNTU=,size_16,color_FFFFFF,t_70"></p>

<p>在基本的Encoder-Decoder模型中，注意力机制在Encoder和Decoder加入了上下文向量context vector，如上图所示，左边蓝色的代表Encoder，红色的代表Decoder。对于Decoder中每个要生成的y，都会生成一个上下文向量。这个上下文向量是由每个输入的words的信息加权求和得到的，其中权重向量就是注意力向量，它代表在此刻生成y时输入的单词的重要程度。最后将上下文向量和此刻的y的信息进行融合作为输出。</p>

<p>构建上下文向量过程也很简单，首先对于一个固定的target word，我们把这个target state跟所有的Encoder的state进行比较，这样对每个state得到了一个score;然后使用softmax对这些score进行归一化，这样就得到了基于target state的条件概率分布。最后，对source的state进行加权求和，得到上下文向量，将上下文向量与target state融合作为最终的输出。</p>

<p>具体流程的数学表达如下：</p>

<p style="text-align:center;"><img alt="" class="has" height="156" src="https://img-blog.csdnimg.cn/2019021510501288.JPG" width="579"></p>

<p>为了理解这个看起来有些复杂的数学公式，我们需要记住三点：</p>

<ol><li>在解码时，对于每个输出的word都需要计算上下文向量。所以，我们会得到一个<img alt="n\ast m" class="mathcode" src="https://private.codecogs.com/gif.latex?n%5Cast%20m">的2D矩阵，&nbsp;<img alt="n" class="mathcode" src="https://private.codecogs.com/gif.latex?n">代表source word数量，<img alt="m" class="mathcode" src="https://private.codecogs.com/gif.latex?m">代表target word数量</li>
    <li>我们可以通过context vector,target word,attention function&nbsp;<img alt="f" class="mathcode" src="https://private.codecogs.com/gif.latex?f">计算attention vevtor</li>
    <li>attention mechanism是可以训练的。</li>
</ol><h2><a name="t1"></a>二、BahdanauAttention与LuongAttention</h2>

<h3><a name="t2"></a>2.1&nbsp;BahdanauAttention</h3>

<p>BahdanauAttention是Bahdanau在论文<a href="https://arxiv.org/pdf/1409.0473.pdf" rel="nofollow" target="_blank">NEURAL MACHINE TRANSLATION BY JOINTLY LEARNING TO ALIGN AND TRANSLATE</a>中提出的，整体Attention结构如下图：</p>

<p style="text-align:center;"><img alt="" class="has" height="492" src="https://img-blog.csdn.net/20180926170405403?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA5NjAxNTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="292"></p>

<p>1）第<img alt="i" class="mathcode" src="https://private.codecogs.com/gif.latex?i">个target word上下文向量<img alt="c_i{}" class="mathcode" src="https://private.codecogs.com/gif.latex?c_i%7B%7D">会根据每个source word的隐向量<img alt="h_j{}" class="mathcode" src="https://private.codecogs.com/gif.latex?h_j%7B%7D">加权求和得到：</p>

<p><img alt="" class="has" height="77" src="https://img-blog.csdn.net/2018092617125253?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA5NjAxNTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="149"></p>

<p>2）对于每个&nbsp;<img alt="h_j{}" class="mathcode" src="https://private.codecogs.com/gif.latex?h_j%7B%7D">的<img alt="a_{ij}" class="mathcode" src="https://private.codecogs.com/gif.latex?a_%7Bij%7D">计算如下</p>

<p><img alt="" class="has" height="106" src="https://img-blog.csdn.net/20180926171933731?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA5NjAxNTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="293"></p>

<p>其中</p>

<p><img alt="" class="has" height="57" src="https://img-blog.csdn.net/20180926172008662?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA5NjAxNTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="217"></p>

<p><img alt="e_{ij}" class="mathcode" src="https://private.codecogs.com/gif.latex?e_%7Bij%7D">是对齐模型，代表位置<img alt="j" class="mathcode" src="https://private.codecogs.com/gif.latex?j">的输入和位置<img alt="i" class="mathcode" src="https://private.codecogs.com/gif.latex?i">的输出匹配程度的分数，这个分数基于RNN的 i-1 位置的隐含状态<img alt="s_{i-1}" class="mathcode" src="https://private.codecogs.com/gif.latex?s_%7Bi-1%7D">和 j 位置的<img alt="h_{j}" class="mathcode" src="https://private.codecogs.com/gif.latex?h_%7Bj%7D">计算得到。</p>

<h3><a name="t3"></a>2.2&nbsp;LuongAttention</h3>

<p>LuongAttention是Luong在论文<a href="https://arxiv.org/pdf/1508.04025.pdf" rel="nofollow" target="_blank">Effective Approaches to Attention-based Neural Machine Translation</a>中提出的。整体结构如下</p>

<p style="text-align:center;"><img alt="" class="has" height="386" src="https://img-blog.csdn.net/20180926173621689?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA5NjAxNTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="428"></p>

<p>&nbsp;与BahdanauAttention整体结构类似，LuongAttention对原结构进行了一些调整，其中Attention向量计算方法如下</p>

<p><img alt="" class="has" height="117" src="https://img-blog.csdn.net/20180926174909188?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA5NjAxNTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="333"></p>

<p>&nbsp;其中与BahdanauAttention机制有以下几点改进：</p>

<ol><li>BahdanauAttention对Encoder和Decoder的双向的RNN的state拼接起来作为输出，LuongAttention仅使用最上层的RNN输出</li>
    <li>BahdanauAttention的计算流程为 ht−1 → at → ct → ht，它使用前一个位置t-1的state计算t时刻的ht。LuongAttention计算流程为&nbsp; ht → at → ct → h˜t 使用t位置的state当前位置的ht</li>
    <li>BahdanauAttention只在concat对齐函数上进行了实验，LuongAttention在多种对齐函数进行了实验，下图为LuongAttention设计的三种对齐函数</li>
</ol><p style="text-align:center;"><img alt="" class="has" height="137" src="https://img-blog.csdn.net/20180926191629666?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA5NjAxNTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="475"></p>

<h3><a name="t4"></a>2.3 总结&nbsp;</h3>

<p>BahdanauAttention与LuongAttention两种注意力机制大体结构类似，都是基于第一节中的attention框架设计，主要的不同点就是在对齐函数上，在计算第 <img alt="i" class="mathcode" src="https://private.codecogs.com/gif.latex?i">个位置的score，前者是需要使用&nbsp;<img alt="s_{i-1}" class="mathcode" src="https://private.codecogs.com/gif.latex?s_%7Bi-1%7D">和<img alt="h_{j}" class="mathcode" src="https://private.codecogs.com/gif.latex?h_%7Bj%7D">&nbsp;来进行计算，后者使用<img alt="s_{i}" class="mathcode" src="https://private.codecogs.com/gif.latex?s_%7Bi%7D">和<img alt="h_{j}" class="mathcode" src="https://private.codecogs.com/gif.latex?h_%7Bj%7D">计算，这么来看还是后者直观上更合理些，逻辑上也更顺滑。两种机制在不同任务上的性能貌似差距也不是很大，具体的细节还待进一步做实验比较。</p>            </div>
                      </div>
    </article>
</div>
]]></content>
  </entry>
  <entry>
    <title>SVM支持向量机</title>
    <url>/2019/11/19/SVM%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190411154846966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190411154939723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190411154955767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>Structure and Interpretation of Computer Programs笔记</title>
    <url>/2019/11/19/Structure%20and%20Interpretation%20of%20Computer%20Programs%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>1</p>
]]></content>
  </entry>
  <entry>
    <title>C++ select() 多路复用</title>
    <url>/2019/11/19/C++%20select()%20%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">
            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css">
                              <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css">
          <div class="htmledit_views" id="content_views">

<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
<strong>函数作用：</strong></p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
系统提供select函数来实现多路复用输入/输出模型。select系统调用是用来让我们的程序监视多个文件句柄的状态变化的。程序会停在select这里等待，直到被监视的文件句柄有一个或多个发生了状态改变。关于文件句柄，其实就是一个整数，我们最熟悉的句柄是0、1、2三个，0是标准输入，1是标准输出，2是标准错误输出。0、1、2是整数表示的，对应的FILE *结构的表示就是stdin、stdout、stderr。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
函数原型：</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
</p>
<div class="dp-highlighter bg_cpp" style="font-family:Consolas,'Courier New',Courier,mono,serif; border:1px solid rgb(30,73,117); width:687.049987792969px; overflow:auto; padding-top:1px; color:rgb(51,51,51); line-height:26px; margin:18px 0px!important; background-color:rgb(231,229,220)">
<ol class="dp-cpp" start="1" style="padding:0px; border:none; position:relative; list-style-position:initial; color:rgb(92,92,92); margin:0px 0px 1px 45px!important; background-color:rgb(255,255,255)">
<li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">int</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;select(</span><span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">int</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;maxfd,fd_set&nbsp;*rdset,fd_set&nbsp;*wrset,&nbsp;\&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd_set&nbsp;*exset,<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">struct</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;timeval&nbsp;*timeout);&nbsp;&nbsp;</span></span></li></ol>
</div>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
<strong>参数说明：</strong></p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
</p>
<span style="font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">参数maxfd是需要监视的最大的文件描述符值+1；rdset,wrset,exset分别对应于需要检测的可读文件描述符的集合，可写文件描述符的集 合及异常文件描述符的集合。struct timeval结构用于描述一段时间长度，如果在这个时间内，需要监视的描述符没有事件发生则函数返回，返回值为0。</span><span style="font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)"></span><span style="font-family:Arial; font-size:14px; line-height:26px"></span>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
<span style="white-space:pre"></span>下面的宏提供了处理这三种描述词组的方式:<br>
<span style="white-space:pre"></span>FD_CLR(inr fd,fd_set* set)；用来清除描述词组set中相关fd 的位<br>
<span style="white-space:pre"></span>FD_ISSET(int fd,fd_set *set)；用来测试描述词组set中相关fd 的位是否为真<br>
<span style="white-space:pre"></span>FD_SET（int fd,fd_set*set）；用来设置描述词组set中相关fd的位<br>
<span style="white-space:pre"></span>FD_ZERO（fd_set *set）；用来清除描述词组set的全部位</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
参数timeout为结构timeval，用来设置select()的等待时间，其结构定义如下：</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
</p>
<div class="dp-highlighter bg_cpp" style="font-family:Consolas,'Courier New',Courier,mono,serif; border:1px solid rgb(30,73,117); width:687.049987792969px; overflow:auto; padding-top:1px; color:rgb(51,51,51); line-height:26px; margin:18px 0px!important; background-color:rgb(231,229,220)">
<ol class="dp-cpp" start="1" style="padding:0px; border:none; position:relative; list-style-position:initial; color:rgb(92,92,92); margin:0px 0px 1px 45px!important; background-color:rgb(255,255,255)">
<li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">struct</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;timeval&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">{&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">time_t</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;tv_sec;</span><span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//second</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">time_t</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;tv_usec;</span><span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//minisecond</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">};&nbsp;&nbsp;</span></li></ol>
</div>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
如果参数timeout设为：</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
NULL，则表示select（）没有timeout，select将一直被阻塞，直到某个文件描述符上发生了事件。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
0：仅检测描述符集合的状态，然后立即返回，并不等待外部事件的发生。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
特定的时间值：如果在指定的时间段里没有事件发生，select将超时返回。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
<strong>函数返回值：</strong></p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
执行成功则返回文件描述词状态已改变的个数，如果返回0代表在描述词状态改变前已超过timeout时间，没有返回；当有错误发生时则返回-1，错误原因存于errno，此时参数readfds，writefds，exceptfds和timeout的值变成不可预测。错误值可能为：<br>
EBADF 文件描述词为无效的或该文件已关闭<br>
EINTR 此调用被信号所中断<br>
EINVAL 参数n 为负值。<br>
ENOMEM 核心内存不足</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
常见的程序片段如下：</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
fs_set readset；<br>
FD_ZERO(&amp;readset);<br>
FD_SET(fd,&amp;readset);<br>
select(fd+1,&amp;readset,NULL,NULL,NULL);<br>
if(FD_ISSET(fd,readset){……}</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
<strong>理解select模型：</strong></p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
<span style="white-space:pre"></span>理解select模型的关键在于理解fd_set,为说明方便，取fd_set长度为1字节，fd_set中的每一bit可以对应一个文件描述符fd。则1字节长的fd_set最大可以对应8个fd。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
（1）执行fd_set set; FD_ZERO(&amp;set);则set用位表示是0000,0000。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
（2）若fd＝5,执行FD_SET(fd,&amp;set);后set变为0001,0000(第5位置为1)</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
（3）若再加入fd＝2，fd=1,则set变为0001,0011</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
（4）执行select(6,&amp;set,0,0,0)阻塞等待</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
（5）若fd=1,fd=2上都发生可读事件，则select返回，此时set变为0000,0011。注意：没有事件发生的fd=5被清空。</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
　基于上面的讨论，可以轻松得出select模型的特点：</p>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
　　（1)可监控的文件描述符个数取决与sizeof(fd_set)的值。我这边服务 器上sizeof(fd_set)＝512，每bit表示一个文件描述符，则我服务器上支持的最大文件描述符是512*8=4096。据说可调，另有说虽 然可调，但调整上限受于编译内核时的变量值。本人对调整fd_set的大小不太感兴趣，参考<a target="_blank" href="http://home.eeworld.com.cn/my/link.php?url=http://www.cppblog.com%2F" rel="nofollow" style="color:rgb(44,98,158); text-decoration:none; word-break:break-all; word-wrap:break-word">http://www.cppblog.com</a>&nbsp;/CppExplore/archive/2008/03/21/45061.html中的模型2（1）可以有效突破select可监控的文件描述符上
 限。</p>
<p style="margin-top:1.5em; margin-bottom:1.5em; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51); word-break:break-all; word-wrap:break-word">
　　（2）将fd加入select监控集的同时，还要再使用一个数据结构array保存放到select监控集中的fd，一是用于再select 返回后，array作为源数据和fd_set进行FD_ISSET判断。二是select返回后会把以前加入的但并无事件发生的fd清空，则每次开始 select前都要重新从array取得fd逐一加入（FD_ZERO最先），扫描array的同时取得fd最大值maxfd，用于select的第一个 参数。</p>
<p style="margin-top:1.5em; margin-bottom:1.5em; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51); word-break:break-all; word-wrap:break-word">
　　（3）可见select模型必须在select前循环array（加fd，取maxfd），select返回后循环array（FD_ISSET判断是否有时间发生）。</p>
<p style="margin-top:1.5em; margin-bottom:1.5em; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51); word-break:break-all; word-wrap:break-word">
下面给一个伪码说明基本select模型的服务器模型：</p>
<p style="margin-top:1.5em; margin-bottom:1.5em; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51); word-break:break-all; word-wrap:break-word">
</p>
<div class="dp-highlighter bg_cpp" style="font-family:Consolas,'Courier New',Courier,mono,serif; border:1px solid rgb(30,73,117); width:687.049987792969px; overflow:auto; padding-top:1px; color:rgb(51,51,51); line-height:26px; margin:18px 0px!important; background-color:rgb(231,229,220)">
<ol class="dp-cpp" start="1" style="padding:0px; border:none; position:relative; list-style-position:initial; color:rgb(92,92,92); margin:0px 0px 1px 45px!important; background-color:rgb(255,255,255)">
<li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">array[slect_len];&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　nSock=0;&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　array[nSock++]=listen_fd;(之前listen&nbsp;port已绑定并listen)&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　maxfd=listen_fd;&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">while</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">(1){&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　　FD_ZERO(&amp;set);&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　　foreach&nbsp;(fd&nbsp;in&nbsp;array)&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　　{&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;　　fd大于maxfd，则maxfd=fd&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;　　FD_SET(fd,&amp;set)&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　　}&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　　res=select(maxfd+1,&amp;set,0,0,0)；&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　　<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">(FD_ISSET(listen_fd,&amp;set))&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　　{&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;　　newfd=accept(listen_fd);&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;　　array[nsock++]=newfd;&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;　　<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">(--res&lt;=0)&nbsp;</span><span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">continue</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">;&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　　}&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　　foreach&nbsp;下标1开始&nbsp;(fd&nbsp;in&nbsp;array)&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　　{&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;　　<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">(FD_ISSET(fd,&amp;tyle=</span><span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"COLOR:&nbsp;#ff0000"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&gt;set))&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;　　执行读等相关操作&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;　　如果错误或者关闭，则要删除该fd，将array中相应位置和最后一个元素互换就好，nsock减一&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;　　<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">(--res&lt;=0)&nbsp;</span><span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">continue</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">;&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　　}&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">　}&nbsp;&nbsp;</span></li></ol>
</div>
<span style="font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">检测键盘有无输入，完整的程序如下：</span><span style="font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)"></span><span style="font-family:Arial; font-size:14px; line-height:26px"></span>
<p style="margin-top:1.5em; margin-bottom:1.5em; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51); word-break:break-all; word-wrap:break-word">
</p>
<div class="dp-highlighter bg_cpp" style="font-family:Consolas,'Courier New',Courier,mono,serif; border:1px solid rgb(30,73,117); width:687.049987792969px; overflow:auto; padding-top:1px; color:rgb(51,51,51); line-height:26px; margin:18px 0px!important; background-color:rgb(231,229,220)">
<ol class="dp-cpp" start="1" style="padding:0px; border:none; position:relative; list-style-position:initial; color:rgb(92,92,92); margin:0px 0px 1px 45px!important; background-color:rgb(255,255,255)">
<li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&lt;sys/time.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&lt;sys/types.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&lt;unistd.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&lt;string.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&lt;stdlib.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&lt;stdio.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">int</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;main()&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">{&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">char</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;buf[10]=</span><span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">""</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">;&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd_set&nbsp;rdfds;&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">struct</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;timeval&nbsp;tv;&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">int</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;ret;&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FD_ZERO(&amp;rdfds);&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FD_SET(0,&amp;rdfds);&nbsp;&nbsp;&nbsp;<span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//文件描述符0表示stdin键盘输入</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tv.tv_sec&nbsp;=&nbsp;3;&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tv.tv_usec&nbsp;=&nbsp;500;&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;select(1,&amp;rdfds,NULL,NULL,&amp;tv);&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">(ret&lt;0)&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"\n&nbsp;selcet"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">else</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;</span><span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">(ret&nbsp;==&nbsp;0)&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"\n&nbsp;timeout"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">else</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"\n&nbsp;ret&nbsp;=&nbsp;%d"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">,ret);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">(FD_ISSET(1,&amp;rdfds))&nbsp;&nbsp;</span><span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//如果有输入，从stdin中获取输入字符</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"\n&nbsp;reading"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fread(buf,9,1,stdin);&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(1,buf,strlen(buf));&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"\n&nbsp;%d&nbsp;\n"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">,strlen(buf));&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">return</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;0;&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">}&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//执行结果ret&nbsp;=&nbsp;1.</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li></ol>
</div>
<p style="margin-top:1.5em; margin-bottom:1.5em; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51); word-break:break-all; word-wrap:break-word">
利用Select模型，设计的web服务器：</p>
<p style="margin-top:1.5em; margin-bottom:1.5em; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51); word-break:break-all; word-wrap:break-word">
</p>
<div class="dp-highlighter bg_cpp" style="font-family:Consolas,'Courier New',Courier,mono,serif; border:1px solid rgb(30,73,117); width:687.049987792969px; overflow:auto; padding-top:1px; color:rgb(51,51,51); line-height:26px; margin:18px 0px!important; background-color:rgb(231,229,220)">
<ol class="dp-cpp" start="1" style="padding:0px; border:none; position:relative; list-style-position:initial; color:rgb(92,92,92); margin:0px 0px 1px 45px!important; background-color:rgb(255,255,255)">
<li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&nbsp;&lt;stdio.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&nbsp;&lt;stdlib.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&nbsp;&lt;unistd.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&nbsp;&lt;errno.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&nbsp;&lt;string.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&nbsp;&lt;sys/types.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&nbsp;&lt;sys/socket.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&nbsp;&lt;netinet/in.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#include&nbsp;&lt;arpa/inet.h&gt;</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#define&nbsp;MYPORT&nbsp;88960&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;the&nbsp;port&nbsp;users&nbsp;will&nbsp;be&nbsp;connecting&nbsp;to</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#define&nbsp;BACKLOG&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;how&nbsp;many&nbsp;pending&nbsp;connections&nbsp;queue&nbsp;will&nbsp;hold</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="preprocessor" style="margin:0px; padding:0px; border:none; color:gray; background-color:inherit">#define&nbsp;BUF_SIZE&nbsp;200</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">int</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;fd_A[BACKLOG];&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;accepted&nbsp;connection&nbsp;fd</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">int</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;conn_amount;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;current&nbsp;connection&nbsp;amount</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">void</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;showclient()&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">{&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">int</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;i;&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"client&nbsp;amount:&nbsp;%d\n"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">,&nbsp;conn_amount);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">for</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;BACKLOG;&nbsp;i++)&nbsp;{&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"[%d]:%d&nbsp;&nbsp;"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">,&nbsp;i,&nbsp;fd_A[i]);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"\n\n"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">}&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"><span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">int</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;main(</span><span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">void</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">)&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">{&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">int</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;sock_fd,&nbsp;new_fd;&nbsp;&nbsp;</span><span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;listen&nbsp;on&nbsp;sock_fd,&nbsp;new&nbsp;connection&nbsp;on&nbsp;new_fd</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">struct</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;sockaddr_in&nbsp;server_addr;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;server&nbsp;address&nbsp;information</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">struct</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;sockaddr_in&nbsp;client_addr;&nbsp;</span><span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;connector's&nbsp;address&nbsp;information</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;socklen_t&nbsp;sin_size;&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">int</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;yes&nbsp;=&nbsp;1;&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">char</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;buf[BUF_SIZE];&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">int</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;ret;&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">int</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;i;&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;((sock_fd&nbsp;=&nbsp;socket(AF_INET,&nbsp;SOCK_STREAM,&nbsp;0))&nbsp;==&nbsp;-1)&nbsp;{&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perror(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"socket"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">);&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1);&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(setsockopt(sock_fd,&nbsp;SOL_SOCKET,&nbsp;SO_REUSEADDR,&nbsp;&amp;yes,&nbsp;</span><span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">sizeof</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">(</span><span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">int</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">))&nbsp;==&nbsp;-1)&nbsp;{&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perror(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"setsockopt"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1);&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;server_addr.sin_family&nbsp;=&nbsp;AF_INET;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;host&nbsp;byte&nbsp;order</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;server_addr.sin_port&nbsp;=&nbsp;htons(MYPORT);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;short,&nbsp;network&nbsp;byte&nbsp;order</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;server_addr.sin_addr.s_addr&nbsp;=&nbsp;INADDR_ANY;&nbsp;<span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;automatically&nbsp;fill&nbsp;with&nbsp;my&nbsp;IP</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;memset(server_addr.sin_zero,&nbsp;<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">'\0'</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">,&nbsp;</span><span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">sizeof</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">(server_addr.sin_zero));&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(bind(sock_fd,&nbsp;(</span><span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">struct</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;sockaddr&nbsp;*)&amp;server_addr,&nbsp;</span><span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">sizeof</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">(server_addr))&nbsp;==&nbsp;-1)&nbsp;{&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perror(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"bind"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1);&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(listen(sock_fd,&nbsp;BACKLOG)&nbsp;==&nbsp;-1)&nbsp;{&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perror(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"listen"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">);&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1);&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"listen&nbsp;port&nbsp;%d\n"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">,&nbsp;MYPORT);&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;fd_set&nbsp;fdsr;&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">int</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;maxsock;&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">struct</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;timeval&nbsp;tv;&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;conn_amount&nbsp;=&nbsp;0;&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;sin_size&nbsp;=&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">sizeof</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">(client_addr);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;maxsock&nbsp;=&nbsp;sock_fd;&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">while</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(1)&nbsp;{&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;initialize&nbsp;file&nbsp;descriptor&nbsp;set</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FD_ZERO(&amp;fdsr);&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FD_SET(sock_fd,&nbsp;&amp;fdsr);&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;timeout&nbsp;setting</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tv.tv_sec&nbsp;=&nbsp;30;&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tv.tv_usec&nbsp;=&nbsp;0;&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;add&nbsp;active&nbsp;connection&nbsp;to&nbsp;fd&nbsp;set</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">for</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;BACKLOG;&nbsp;i++)&nbsp;{&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(fd_A[i]&nbsp;!=&nbsp;0)&nbsp;{&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FD_SET(fd_A[i],&nbsp;&amp;fdsr);&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;select(maxsock&nbsp;+&nbsp;1,&nbsp;&amp;fdsr,&nbsp;NULL,&nbsp;NULL,&nbsp;&amp;tv);&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(ret&nbsp;&lt;&nbsp;0)&nbsp;{&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perror(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"select"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">break</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">;&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">else</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;</span><span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(ret&nbsp;==&nbsp;0)&nbsp;{&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"timeout\n"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">);&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">continue</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">;&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;check&nbsp;every&nbsp;fd&nbsp;in&nbsp;the&nbsp;set</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">for</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;conn_amount;&nbsp;i++)&nbsp;{&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(FD_ISSET(fd_A[i],&nbsp;&amp;fdsr))&nbsp;{&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;recv(fd_A[i],&nbsp;buf,&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">sizeof</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">(buf),&nbsp;0);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); font-weight:bold; background-color:inherit">char</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;str[]&nbsp;=&nbsp;</span><span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"Good,very&nbsp;nice!\n"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">;&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;send(fd_A[i],str,<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">sizeof</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">(str)&nbsp;+&nbsp;1,&nbsp;0);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(ret&nbsp;&lt;=&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;client&nbsp;close</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"client[%d]&nbsp;close\n"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">,&nbsp;i);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close(fd_A[i]);&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FD_CLR(fd_A[i],&nbsp;&amp;fdsr);&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd_A[i]&nbsp;=&nbsp;0;&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">else</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;receive&nbsp;data</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(ret&nbsp;&lt;&nbsp;BUF_SIZE)&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memset(&amp;buf[ret],&nbsp;<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">'\0'</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">,&nbsp;1);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"client[%d]&nbsp;send:%s\n"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">,&nbsp;i,&nbsp;buf);&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;check&nbsp;whether&nbsp;a&nbsp;new&nbsp;connection&nbsp;comes</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(FD_ISSET(sock_fd,&nbsp;&amp;fdsr))&nbsp;{&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_fd&nbsp;=&nbsp;accept(sock_fd,&nbsp;(<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">struct</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;sockaddr&nbsp;*)&amp;client_addr,&nbsp;&amp;sin_size);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(new_fd&nbsp;&lt;=&nbsp;0)&nbsp;{&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perror(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"accept"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">continue</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">;&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;add&nbsp;to&nbsp;fd&nbsp;queue</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(conn_amount&nbsp;&lt;&nbsp;BACKLOG)&nbsp;{&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd_A[conn_amount++]&nbsp;=&nbsp;new_fd;&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"new&nbsp;connection&nbsp;client[%d]&nbsp;%s:%d\n"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">,&nbsp;conn_amount,&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inet_ntoa(client_addr.sin_addr),&nbsp;ntohs(client_addr.sin_port));&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(new_fd&nbsp;&gt;&nbsp;maxsock)&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxsock&nbsp;=&nbsp;new_fd;&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">else</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;{&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"max&nbsp;connections&nbsp;arrive,&nbsp;exit\n"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">);&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;send(new_fd,&nbsp;<span class="string" style="margin:0px; padding:0px; border:none; color:blue; background-color:inherit">"bye"</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">,&nbsp;4,&nbsp;0);&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close(new_fd);&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">break</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">;&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showclient();&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit">//&nbsp;close&nbsp;other&nbsp;connections</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">for</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;BACKLOG;&nbsp;i++)&nbsp;{&nbsp;&nbsp;</span></span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit">if</span><span style="margin:0px; padding:0px; border:none; background-color:inherit">&nbsp;(fd_A[i]&nbsp;!=&nbsp;0)&nbsp;{&nbsp;&nbsp;</span></span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close(fd_A[i]);&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;</span></li><li style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; background-color:rgb(248,248,248)">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">&nbsp;&nbsp;&nbsp;&nbsp;exit(0);&nbsp;&nbsp;</span></li><li class="alt" style="margin:0px!important; padding:0px 3px 0px 10px!important; border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; line-height:18px; color:inherit">
<span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit">}&nbsp;&nbsp;</span></li></ol>
</div>
<span style="font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)"><span style="font-size:18px; color:rgb(255,0,0)">补充部分：</span></span><span style="font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)"></span><span style="font-family:Arial; font-size:14px; line-height:26px"></span>
<p style="margin-top:1.5em; margin-bottom:1.5em; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51); word-break:break-all; word-wrap:break-word">
</p>
<h2 style="margin:20px 0px 10px; padding:0px; font-family:Arial; line-height:26px; color:rgb(51,51,51); border-bottom-width:1px; border-bottom-style:solid; border-bottom-color:rgb(204,204,204); font-size:24px"><a name="t0"></a>
<a target="_blank" name="t0" style="color:rgb(202,0,0)"></a><a target="_blank" name="t0" style="color:rgb(51,102,153)"></a><a target="_blank" name="t0" style="color:rgb(51,102,153)"></a>1 基本原理</h2>
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
</p>
<p style="margin-top:0px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
<img src="http://hi.csdn.net/attachment/201203/11/2429699_1331492431cuPx.gif" alt="Resize icon" style="border:none; max-width:100%"></p>
<p style="margin-top:10px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
<em>注：select 原理图，摘自&nbsp;<a target="_blank" href="http://publib.boulder.ibm.com/infocenter/iseries/v5r3/index.jsp?topic=%2Frzab6%2Frzab6xnonblock.htm" rel="nofollow" style="color:rgb(202,0,0); text-decoration:none">IBM iSeries 信息中心</a></em>。</p>
<h2 style="margin:20px 0px 10px; padding:0px; font-family:Arial; line-height:26px; color:rgb(51,51,51); border-bottom-width:1px; border-bottom-style:solid; border-bottom-color:rgb(204,204,204); font-size:24px"><a name="t1"></a>
<a target="_blank" name="t1" style="color:rgb(202,0,0)"></a><a target="_blank" name="t1" style="color:rgb(51,102,153)"></a><a target="_blank" name="t1" style="color:rgb(51,102,153)"></a>1 数据结构与函数原型</h2>
<h3 style="margin:20px 0px 10px; padding:0px; font-family:Arial; line-height:26px; color:rgb(51,51,51); font-size:18px"><a name="t2"></a>
<a target="_blank" name="t2" style="color:rgb(202,0,0)"></a><a target="_blank" name="t2" style="color:rgb(51,102,153)"></a><a target="_blank" name="t2" style="color:rgb(51,102,153)"></a>1.1 select</h3>
<ul style="font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51); margin:10px 0px; padding-left:30px">
<li style="margin:10px 0px">函数原型
<blockquote style="margin:0px; border-left-width:4px; border-left-style:solid; border-left-color:rgb(221,221,221); color:rgb(68,68,68); padding:0px 15px">
<pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:0px; margin-bottom:0px; border:1px solid rgb(204,204,204); font-size:13px; line-height:19px; overflow:auto; padding:6px 10px; background-color:rgb(248,248,248)"><code style="border-width:medium; border-style:none; margin:0px; padding:0px; white-space:pre; background-color:transparent" class="hljs sql"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   int <span class="hljs-keyword">select</span>(</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-built_in">int</span> nfds,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      fd_set *readset,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      fd_set *writeset,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      fd_set* exceptset,</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-keyword">struct</span> timeval *<span class="hljs-keyword">timeout</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">   );</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
</blockquote>
</li><li style="margin:10px 0px">头文件
<blockquote style="margin:0px; border-left-width:4px; border-left-style:solid; border-left-color:rgb(221,221,221); color:rgb(68,68,68); padding:0px 15px">
<ul style="margin:0px; padding-left:30px">
<li style="margin:10px 0px"><code style="border:1px solid rgb(234,234,234); margin:0px 2px; padding:0px 5px; white-space:nowrap; background-color:rgb(248,248,248)">select</code>位于：
<blockquote style="margin:10px 0px 0px; border-left-width:4px; border-left-style:solid; border-left-color:rgb(221,221,221); padding:0px 15px">
<pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:0px; margin-bottom:0px; border:1px solid rgb(204,204,204); font-size:13px; line-height:19px; overflow:auto; padding:6px 10px; background-color:rgb(248,248,248)"><code style="border-width:medium; border-style:none; margin:0px; padding:0px; white-space:pre; background-color:transparent" class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/select.h&gt;</span></span>
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
</blockquote>
</li><li style="margin:10px 0px"><code style="border:1px solid rgb(234,234,234); margin:0px 2px; padding:0px 5px; white-space:nowrap; background-color:rgb(248,248,248)">struct timeval</code>位于：
<blockquote style="margin:10px 0px 0px; border-left-width:4px; border-left-style:solid; border-left-color:rgb(221,221,221); padding:0px 15px">
<pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:0px; margin-bottom:0px; border:1px solid rgb(204,204,204); font-size:13px; line-height:19px; overflow:auto; padding:6px 10px; background-color:rgb(248,248,248)"><code style="border-width:medium; border-style:none; margin:0px; padding:0px; white-space:pre; background-color:transparent" class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;</span></span>
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
</blockquote>
</li></ul>
</blockquote>
</li><li style="margin:10px 0px">返回值
<blockquote style="margin:0px; border-left-width:4px; border-left-style:solid; border-left-color:rgb(221,221,221); color:rgb(68,68,68); padding:0px 15px">
<p style="margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px">
返回对应位仍然为1的fd的总数。</p>
</blockquote>
</li><li style="margin:10px 0px">参数
<blockquote style="margin:0px; border-left-width:4px; border-left-style:solid; border-left-color:rgb(221,221,221); color:rgb(68,68,68); padding:0px 15px">
<ul style="margin:0px; padding-left:30px">
<li style="margin:10px 0px">nfds：第一个参数是：最大的文件描述符值+1；</li><li style="margin:10px 0px">readset：可读描述符集合；</li><li style="margin:10px 0px">writeset：可写描述符集合；</li><li style="margin:10px 0px">exceptset：异常描述符；</li><li style="margin:10px 0px">timeout：select 的监听时长，如果这短时间内所监听的 socket 没有事件发生。</li></ul>
</blockquote>
</li></ul>
<h3 style="margin:20px 0px 10px; padding:0px; font-family:Arial; line-height:26px; color:rgb(51,51,51); font-size:18px"><a name="t3"></a>
<a target="_blank" name="t3" style="color:rgb(202,0,0)"></a><a target="_blank" name="t3" style="color:rgb(51,102,153)"></a><a target="_blank" name="t3" style="color:rgb(51,102,153)"></a>1.2 fd_set</h3>
<h4 style="margin:20px 0px 10px; padding:0px; font-family:Arial; line-height:26px; color:rgb(51,51,51); font-size:16px">
<a target="_blank" name="t4" style="color:rgb(202,0,0)"></a><a target="_blank" name="t4" style="color:rgb(51,102,153)"></a><a target="_blank" name="t4" style="color:rgb(51,102,153)"></a>1.2.1 清空描述符集合</h4>
<pre style="white-space:pre-wrap; word-wrap:break-word; color:rgb(51,51,51); margin-top:10px; margin-bottom:10px; border:1px solid rgb(204,204,204); font-size:13px; line-height:19px; overflow:auto; padding:6px 10px; background-color:rgb(248,248,248)"><code style="border-width:medium; border-style:none; margin:0px; padding:0px; white-space:pre; background-color:transparent" class="hljs">FD_ZERO(fd_set *)
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<h4 style="margin:20px 0px 10px; padding:0px; font-family:Arial; line-height:26px; color:rgb(51,51,51); font-size:16px">
<a target="_blank" name="t5" style="color:rgb(202,0,0)"></a><a target="_blank" name="t5" style="color:rgb(51,102,153)"></a><a target="_blank" name="t5" style="color:rgb(51,102,153)"></a>1.2.2 向描述符集合添加指定描述符</h4>
<pre style="white-space:pre-wrap; word-wrap:break-word; color:rgb(51,51,51); margin-top:10px; margin-bottom:10px; border:1px solid rgb(204,204,204); font-size:13px; line-height:19px; overflow:auto; padding:6px 10px; background-color:rgb(248,248,248)"><code style="border-width:medium; border-style:none; margin:0px; padding:0px; white-space:pre; background-color:transparent" class="hljs java">FD_SET(<span class="hljs-keyword">int</span>, fd_set *)
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<h4 style="margin:20px 0px 10px; padding:0px; font-family:Arial; line-height:26px; color:rgb(51,51,51); font-size:16px">
<a target="_blank" name="t6" style="color:rgb(202,0,0)"></a><a target="_blank" name="t6" style="color:rgb(51,102,153)"></a><a target="_blank" name="t6" style="color:rgb(51,102,153)"></a>1.2.3 从描述符集合删除指定描述符</h4>
<pre style="white-space:pre-wrap; word-wrap:break-word; color:rgb(51,51,51); margin-top:10px; margin-bottom:10px; border:1px solid rgb(204,204,204); font-size:13px; line-height:19px; overflow:auto; padding:6px 10px; background-color:rgb(248,248,248)"><code style="border-width:medium; border-style:none; margin:0px; padding:0px; white-space:pre; background-color:transparent" class="hljs java">FD_CLR(<span class="hljs-keyword">int</span>, fd_set *)
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<h4 style="margin:20px 0px 10px; padding:0px; font-family:Arial; line-height:26px; color:rgb(51,51,51); font-size:16px">
<a target="_blank" name="t7" style="color:rgb(202,0,0)"></a><a target="_blank" name="t7" style="color:rgb(51,102,153)"></a><a target="_blank" name="t7" style="color:rgb(51,102,153)"></a>1.2.4 检测指定描述符是否在描述符集合中</h4>
<pre style="white-space:pre-wrap; word-wrap:break-word; color:rgb(51,51,51); margin-top:10px; margin-bottom:10px; border:1px solid rgb(204,204,204); font-size:13px; line-height:19px; overflow:auto; padding:6px 10px; background-color:rgb(248,248,248)"><code style="border-width:medium; border-style:none; margin:0px; padding:0px; white-space:pre; background-color:transparent" class="hljs java">FD_ISSET(<span class="hljs-keyword">int</span>, fd_set *)
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<h4 style="margin:20px 0px 10px; padding:0px; font-family:Arial; line-height:26px; color:rgb(51,51,51); font-size:16px">
<a target="_blank" name="t8" style="color:rgb(202,0,0)"></a><a target="_blank" name="t8" style="color:rgb(51,102,153)"></a><a target="_blank" name="t8" style="color:rgb(51,102,153)"></a>1.2.5 描述符最大数量</h4>
<pre style="white-space:pre-wrap; word-wrap:break-word; color:rgb(51,51,51); margin-top:10px; margin-bottom:10px; border:1px solid rgb(204,204,204); font-size:13px; line-height:19px; overflow:auto; padding:6px 10px; background-color:rgb(248,248,248)"><code style="border-width:medium; border-style:none; margin:0px; padding:0px; white-space:pre; background-color:transparent" class="hljs cs"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FD_SETSIZE 1024</span>
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<h3 style="margin:20px 0px 10px; padding:0px; font-family:Arial; line-height:26px; color:rgb(51,51,51); font-size:18px"><a name="t4"></a>
<a target="_blank" name="t9" style="color:rgb(202,0,0)"></a><a target="_blank" name="t9" style="color:rgb(51,102,153)"></a><a target="_blank" name="t9" style="color:rgb(51,102,153)"></a>1.3 描述符集合</h3>
<p style="margin-top:0px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
可读描述符集合中可读的描述符，为1，其他为0；可写也类似。异常描述符集合中有异常等待处理的描述符的值为1，其他为0。</p>
<h3 style="margin:20px 0px 10px; padding:0px; font-family:Arial; line-height:26px; color:rgb(51,51,51); font-size:18px"><a name="t5"></a>
<a target="_blank" name="t10" style="color:rgb(202,0,0)"></a><a target="_blank" name="t10" style="color:rgb(51,102,153)"></a><a target="_blank" name="t10" style="color:rgb(51,102,153)"></a>1.4 ioctl</h3>
<ul style="font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51); margin:10px 0px; padding-left:30px">
<li style="margin:10px 0px">
<p style="margin-top:0px; margin-bottom:10px; padding-top:0px; padding-bottom:0px">
函数原型：</p>
<pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:10px; margin-bottom:0px; border:1px solid rgb(204,204,204); font-size:13px; line-height:19px; overflow:auto; padding:6px 10px; background-color:rgb(248,248,248)"><code style="border-width:medium; border-style:none; margin:0px; padding:0px; white-space:pre; background-color:transparent" class="hljs java">  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ioctl</span><span class="hljs-params">(<span class="hljs-keyword">int</span> handle, <span class="hljs-keyword">int</span> cmd,[<span class="hljs-keyword">int</span> *argdx, <span class="hljs-keyword">int</span> argcx])</span></span>;
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
</li><li style="margin:10px 0px">
<p style="margin-top:0px; margin-bottom:10px; padding-top:0px; padding-bottom:0px">
头文件：</p>
<pre style="white-space:pre-wrap; word-wrap:break-word; margin-top:10px; margin-bottom:0px; border:1px solid rgb(204,204,204); font-size:13px; line-height:19px; overflow:auto; padding:6px 10px; background-color:rgb(248,248,248)"><code style="border-width:medium; border-style:none; margin:0px; padding:0px; white-space:pre; background-color:transparent" class="hljs cpp">  <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ioctl.h&gt;</span></span>
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
</li><li style="margin:10px 0px">
<p style="margin-top:0px; margin-bottom:10px; padding-top:0px; padding-bottom:0px">
返回值：</p>
<blockquote style="margin:10px 0px 0px; border-left-width:4px; border-left-style:solid; border-left-color:rgb(221,221,221); color:rgb(68,68,68); padding:0px 15px">
<ul style="margin:0px; padding-left:30px">
<li style="margin:10px 0px">0 - 成功</li><li style="margin:10px 0px">1 - 失败</li></ul>
</blockquote>
</li></ul>
<h2 style="margin:20px 0px 10px; padding:0px; font-family:Arial; line-height:26px; color:rgb(51,51,51); border-bottom-width:1px; border-bottom-style:solid; border-bottom-color:rgb(204,204,204); font-size:24px"><a name="t6"></a>
<a target="_blank" name="t11" style="color:rgb(202,0,0)"></a><a target="_blank" name="t11" style="color:rgb(51,102,153)"></a><a target="_blank" name="t11" style="color:rgb(51,102,153)"></a>2 示例</h2>
<p style="margin-top:0px; margin-bottom:10px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px; color:rgb(51,51,51)">
程序各部分的解释在注释中。</p>
<pre style="white-space:pre-wrap; word-wrap:break-word; color:rgb(51,51,51); margin-top:10px; margin-bottom:10px; border:1px solid rgb(204,204,204); font-size:13px; line-height:19px; overflow:auto; padding:6px 10px; background-color:rgb(248,248,248)"><code style="border-width:medium; border-style:none; margin:0px; padding:0px; white-space:pre; background-color:transparent" class="hljs cpp"><ol class="hljs-ln hundred"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ioctl.h&gt;</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TRUE  1</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FALSE 0</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">int</span> i, len, rc, on = TRUE;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">int</span> listen_sd, new_sd = <span class="hljs-number">0</span>, max_sd;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">int</span> desc_ready;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">80</span>];</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">int</span> close_conn, end_server = FALSE;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">timeout</span>;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd_set</span> <span class="hljs-title">master_set</span>, <span class="hljs-title">working_set</span>;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">// Listen</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    listen_sd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">if</span> (listen_sd &lt; <span class="hljs-number">0</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        perror(<span class="hljs-string">"socket() failed"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">// Set socket options</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    rc = setsockopt(listen_sd, SOL_SOCKET, SO_REUSEADDR, (<span class="hljs-keyword">char</span> *) &amp;on, <span class="hljs-keyword">sizeof</span>(on));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        perror(<span class="hljs-string">"setsockopt() failed"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        close(listen_sd);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">// Set IO control</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    rc = ioctl(listen_sd, FIONBIO, (<span class="hljs-keyword">char</span> *) &amp;on);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        perror(<span class="hljs-string">"ioctl() failed"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        close(listen_sd);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">// Bind</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-built_in">memset</span>(&amp;server_addr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(server_addr));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    server_addr.sin_family = AF_INET;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    server_addr.sin_port = htons(atoi(argv[<span class="hljs-number">1</span>]));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    rc = bind(listen_sd, (struct sockaddr *) &amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        perror(<span class="hljs-string">"bind() failed\n"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        close(listen_sd);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="63"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="64"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">// Listen</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="65"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    rc = listen(listen_sd, <span class="hljs-number">32</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="66"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="67"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="68"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        perror(<span class="hljs-string">"listen() failed\n"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="69"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        close(listen_sd);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="70"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="71"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="72"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="73"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">// Intialize sd set</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="74"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    FD_ZERO(&amp;master_set);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="75"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    max_sd = listen_sd;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="76"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    FD_SET(listen_sd, &amp;master_set);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="77"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="78"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    timeout.tv_sec = <span class="hljs-number">3</span> * <span class="hljs-number">60</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="79"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    timeout.tv_usec = <span class="hljs-number">0</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="80"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="81"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">// Start</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="82"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">do</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="83"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="84"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">// Copy master_set into working_set</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="85"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-built_in">memcpy</span>(&amp;working_set, &amp;master_set, <span class="hljs-keyword">sizeof</span>(master_set));</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="86"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="87"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Waiting on select()...\n"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="88"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        rc = select(max_sd + <span class="hljs-number">1</span>, &amp;working_set, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;timeout);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="89"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="90"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="91"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            perror(<span class="hljs-string">"  select() failed\n"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="92"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">break</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="93"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="94"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (rc == <span class="hljs-number">0</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="95"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="96"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"  select() timed out. End program.\n"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="97"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">break</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="98"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="99"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="100"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        desc_ready = rc; <span class="hljs-comment">// number of sds ready in working_set</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="101"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="102"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">// Check each sd in working_set</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="103"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= max_sd &amp;&amp; desc_ready &gt; <span class="hljs-number">0</span>; ++i)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="104"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="105"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment">// Check to see if this sd is ready</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="106"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">if</span> (FD_ISSET(i, &amp;working_set))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="107"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="108"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                --desc_ready;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="109"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="110"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// Check to see if this is the listening sd</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="111"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-keyword">if</span> (i == listen_sd)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="112"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="113"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"  Listeing socket is readable\n"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="114"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-keyword">do</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="115"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="116"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">// Accept</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="117"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        new_sd = accept(listen_sd, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="118"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="119"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">// Nothing to be accepted</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="120"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-keyword">if</span> (new_sd &lt; <span class="hljs-number">0</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="121"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="122"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            <span class="hljs-comment">// All have been accepted</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="123"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            <span class="hljs-keyword">if</span> (errno != EWOULDBLOCK)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="124"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="125"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                                perror(<span class="hljs-string">"  accept() failed\n"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="126"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                                end_server = TRUE;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="127"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="128"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            <span class="hljs-keyword">break</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="129"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="130"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="131"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">// Insert new_sd into master_set</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="132"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"  New incoming connection - %d\n"</span>, new_sd);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="133"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        FD_SET(new_sd, &amp;master_set);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="134"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-keyword">if</span> (new_sd &gt; max_sd)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="135"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="136"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            max_sd = new_sd;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="137"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="138"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="139"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-keyword">while</span> (new_sd != <span class="hljs-number">-1</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="140"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="141"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment">// This is not the listening sd</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="142"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-keyword">else</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="143"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="144"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    close_conn = FALSE;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="145"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"  Descriptor %d is avaliable\n"</span>, i);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="146"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-keyword">do</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="147"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="148"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        rc = recv(i, buffer, <span class="hljs-keyword">sizeof</span>(buffer), <span class="hljs-number">0</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="149"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="150"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">// Receive data on sd "i", until failure occurs</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="151"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="152"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="153"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            <span class="hljs-comment">// Normal failure</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="154"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            <span class="hljs-keyword">if</span> (errno != EWOULDBLOCK)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="155"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="156"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                                perror(<span class="hljs-string">"  recv() failed\n"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="157"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                                close_conn = TRUE;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="158"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="159"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            <span class="hljs-keyword">break</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="160"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="161"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="162"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">// The connection has been closed by the client</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="163"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-keyword">if</span> (rc == <span class="hljs-number">0</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="164"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="165"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"  Connection closed\n"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="166"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            close_conn = TRUE;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="167"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            <span class="hljs-keyword">break</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="168"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="169"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="170"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment"><span class="hljs-comment">/* Receiving data succeeded and echo it back</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="171"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">                           the to client */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="172"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        len = rc;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="173"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"  %d bytes received\n"</span>, len);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="174"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        rc = send(i, buffer, len, <span class="hljs-number">0</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="175"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="176"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="177"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            perror(<span class="hljs-string">"  send() failed"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="178"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            close_conn = TRUE;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="179"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            <span class="hljs-keyword">break</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="180"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="181"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="182"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-keyword">while</span> (TRUE);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="183"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="184"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-comment">// If unknown failure occured</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="185"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="hljs-keyword">if</span> (close_conn)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="186"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="187"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">// Close the sd and remove it from master_set</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="188"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        close(i);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="189"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        FD_CLR(i, &amp;master_set);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="190"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="191"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-comment">// If this is the max sd</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="192"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="hljs-keyword">if</span> (i == max_sd)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="193"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="194"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            <span class="hljs-comment">// Find the max sd in master_set now</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="195"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            <span class="hljs-keyword">while</span> (FD_ISSET(max_sd, &amp;master_set) == FALSE)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="196"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="197"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                                --max_sd;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="198"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                            }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="199"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        } <span class="hljs-comment">// End of if (i == max_sd)</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="200"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    } <span class="hljs-comment">// End of if (close_conn)</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="201"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="202"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="203"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="204"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="205"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">while</span> (end_server == FALSE);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="206"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="207"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-comment">/* Close each sd in master_set */</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="208"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; max_sd; ++i)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="209"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="210"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> (FD_ISSET(i, &amp;master_set))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="211"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="212"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            close(i);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="213"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="214"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="215"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="216"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="217"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">}</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
          </div>
                  </div>
]]></content>
  </entry>
  <entry>
    <title>计算机网络期末复习大纲</title>
    <url>/2019/11/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/</url>
    <content><![CDATA[<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post" style="height: 2598px; overflow: hidden;">
            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css">
                              <div id="content_views" class="markdown_views prism-atom-one-dark">
            <!-- flowchart 箭头图标 勿删 -->
            <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
              <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
            </svg>
            <p></p><div class="toc"><div class="toc">
<ul>
<li><a href="#概述" rel="nofollow" target="_self">概述</a><ul>
<li><a href="#网络的基本指标及其概念" rel="nofollow" target="_self">网络的基本指标及其概念?</a></li>
<li><a href="#iostcpip五层协议体系结构" rel="nofollow" target="_self">IOS，TCP/IP，五层协议体系结构。</a></li>
</ul>
</li>
<li><a href="#物理层" rel="nofollow" target="_self">物理层</a><ul>
<li><a href="#物理层基本概念和最小单位" rel="nofollow" target="_self">物理层基本概念和最小单位。</a></li>
<li><a href="#编码" rel="nofollow" target="_self">编码</a></li>
<li><a href="#调制" rel="nofollow" target="_self">调制</a></li>
<li><a href="#计算评价网络性能指标" rel="nofollow" target="_self">计算评价网络性能指标</a></li>
<li><a href="#复用概念" rel="nofollow" target="_self">复用概念</a></li>
</ul>
</li>
<li><a href="#数据链路层" rel="nofollow" target="_self">数据链路层</a><ul>
<li><a href="#基本功能最小单位" rel="nofollow" target="_self">基本功能，最小单位</a></li>
<li><a href="#循环冗余码" rel="nofollow" target="_self">循环冗余码</a></li>
<li><a href="#基本的网络拓扑" rel="nofollow" target="_self">基本的网络拓扑</a></li>
<li><a href="#csmacd协议" rel="nofollow" target="_self">CSMA/CD协议</a></li>
<li><a href="#mac地址" rel="nofollow" target="_self">MAC地址</a></li>
<li><a href="#数据链路层特有的硬件设备集线器和交换机的工作原理之间的区别" rel="nofollow" target="_self">数据链路层特有的硬件设备集线器和交换机的工作原理，之间的区别？</a></li>
<li><a href="#什么是单播多播广播" rel="nofollow" target="_self">什么是单播，多播，广播？</a></li>
</ul>
</li>
<li><a href="#网络层" rel="nofollow" target="_self">网络层</a><ul>
<li><a href="#基本功能最小单位-1" rel="nofollow" target="_self">基本功能，最小单位？</a></li>
<li><a href="#包含哪些协议最主要的ip协议三个子协议" rel="nofollow" target="_self">包含哪些协议，最主要的IP协议，三个子协议。</a></li>
<li><a href="#ip地址是什么起什么作用和mac地址区别怎么对应起来" rel="nofollow" target="_self">IP地址是什么，起什么作用，和MAC地址区别，怎么对应起来。</a></li>
<li><a href="#特有的硬件设备路由器是什么功能是什么靠路由表来转发数据路由表怎么起作用基本工作原理是什么" rel="nofollow" target="_self">特有的硬件设备，路由器是什么，功能是什么，靠路由表来转发数据，路由表怎么起作用，基本工作原理是什么？</a></li>
<li><a href="#子网掩码是什么" rel="nofollow" target="_self">子网掩码，是什么？</a></li>
<li><a href="#ipv4和ipv6是什么区别" rel="nofollow" target="_self">IPV4和IPV6是什么，区别？</a></li>
<li><a href="#几个比较经典的路由协议" rel="nofollow" target="_self">几个比较经典的路由协议</a></li>
<li><a href="#隧道技术" rel="nofollow" target="_self">隧道技术</a></li>
</ul>
</li>
<li><a href="#运输层" rel="nofollow" target="_self">运输层</a><ul>
<li><a href="#运输层的基本功能和最小单位" rel="nofollow" target="_self">运输层的基本功能和最小单位？</a></li>
<li><a href="#udp和tcp两种运输协议的区别" rel="nofollow" target="_self">UDP和TCP两种运输协议的区别?</a></li>
<li><a href="#端口复用和分用概念" rel="nofollow" target="_self">端口、复用和分用概念？</a></li>
<li><a href="#停止等待协议和arq协议会考" rel="nofollow" target="_self">停止等待协议和ARQ协议(会考)</a><ul>
<li><a href="#停止等待" rel="nofollow" target="_self">停止等待：</a></li>
<li><a href="#arqautomatic-repeat-request协议" rel="nofollow" target="_self">ARQ(Automatic Repeat reQuest)协议:</a></li>
</ul>
</li>
<li><a href="#流量控制和拥塞控制的作用和区别" rel="nofollow" target="_self">流量控制和拥塞控制的作用和区别</a></li>
<li><a href="#满开始拥塞避免快重传快回复的概念和切换" rel="nofollow" target="_self">满开始、拥塞避免、快重传、快回复的概念和切换</a></li>
<li><a href="#tpc连接的建立和释放" rel="nofollow" target="_self">TPC连接的建立和释放</a></li>
</ul>
</li>
<li><a href="#应用层" rel="nofollow" target="_self">应用层</a><ul>
<li><a href="#域名系统dns的概念和作用" rel="nofollow" target="_self">域名系统DNS的概念和作用？</a></li>
<li><a href="#文件传送协议ftp" rel="nofollow" target="_self">文件传送协议FTP</a></li>
<li><a href="#万维网www" rel="nofollow" target="_self">万维网WWW</a></li>
<li><a href="#电子邮件" rel="nofollow" target="_self">电子邮件</a></li>
<li><a href="#动态主机配置协议dhcp" rel="nofollow" target="_self">动态主机配置协议DHCP</a></li>
<li><a href="#p2p应用" rel="nofollow" target="_self">P2P应用</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p></p>

<h1 id="概述"><a name="t0"></a>概述</h1>



<h2 id="网络的基本指标及其概念"><a name="t1"></a>网络的基本指标及其概念?</h2>

<ol>
<li>传输速率：速率是计算机网络中最重要的一个性能指标，指的是数据的传送速率，它也称为数据率 (data rate)或比特率 (bit rate)。</li>
<li>带宽：在计算机网络中，带宽用来表示网络中某通道传送数据的能力。表示在单位时间内网络中的某信道所能通过的“最高数据率”。单位是 bit/s ，即 “比特每秒”。</li>
<li>吞吐量：吞吐量 (throughput) 表示在单位时间内通过某个网络（或信道、接口）的数据量。</li>
<li>时延：时延 (delay 或 latency) 是指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。</li>
</ol>

<h2 id="iostcpip五层协议体系结构"><a name="t2"></a>IOS，TCP/IP，五层协议体系结构。</h2>

<p><img src="https://upload-images.jianshu.io/upload_images/11519006-0bd34d7ebffd4867.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="体系结构模型" title=""></p>

<h1 id="物理层"><a name="t3"></a>物理层</h1>



<h2 id="物理层基本概念和最小单位"><a name="t4"></a>物理层基本概念和最小单位。</h2>

<p>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据流，而不仅仅是指具体的传输媒体，其最小单位为比特。</p>



<h2 id="编码"><a name="t5"></a>编码</h2>

<p>简单的编码方法如曼彻斯特编码、差分曼彻斯特编码。</p>

<h2 id="调制"><a name="t6"></a>调制</h2>

<p>ASK，FSK，PSK</p>

<h2 id="计算评价网络性能指标"><a name="t7"></a>计算评价网络性能指标</h2>

<p>比如，速率在无线网络中，比如WIFI中怎么计算的。</p>

<h2 id="复用概念"><a name="t8"></a>复用概念</h2>

<p>时分复用，码分复用，频分复用分别是什么意思？</p>

<h1 id="数据链路层"><a name="t9"></a>数据链路层</h1>



<h2 id="基本功能最小单位"><a name="t10"></a>基本功能，最小单位</h2>

<p>数据链路层是OSI参考模型中的第二层，介乎于物理层和网络层之间。数据链路层在物理层提供的服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。</p>

<p>最小单位是帧。</p>

<h2 id="循环冗余码"><a name="t11"></a>循环冗余码</h2>

<p><img src="https://img-blog.csdn.net/20180530215311990?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NoaWFoc2luV3U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""></p>

<h2 id="基本的网络拓扑"><a name="t12"></a>基本的网络拓扑</h2>

<p>总线网，星形网，环形网。</p>

<h2 id="csmacd协议"><a name="t13"></a>CSMA/CD协议</h2>



<h2 id="mac地址"><a name="t14"></a>MAC地址</h2>

<p>MAC地址是什么，起的什么作用，后面的网络层IP地址什么，起什么作用，区别是什么，通过什么协议相互映射。</p>

<h2 id="数据链路层特有的硬件设备集线器和交换机的工作原理之间的区别"><a name="t15"></a>数据链路层特有的硬件设备集线器和交换机的工作原理，之间的区别？</h2>



<h2 id="什么是单播多播广播"><a name="t16"></a>什么是单播，多播，广播？</h2>

<h1 id="网络层"><a name="t17"></a>网络层</h1>



<h2 id="基本功能最小单位-1"><a name="t18"></a>基本功能，最小单位？</h2>



<h2 id="包含哪些协议最主要的ip协议三个子协议"><a name="t19"></a>包含哪些协议，最主要的IP协议，三个子协议。</h2>

<p>ARP，ICMP，IGMP</p>

<h2 id="ip地址是什么起什么作用和mac地址区别怎么对应起来"><a name="t20"></a>IP地址是什么，起什么作用，和MAC地址区别，怎么对应起来。</h2>

<p>通过ARP协议</p>

<h2 id="特有的硬件设备路由器是什么功能是什么靠路由表来转发数据路由表怎么起作用基本工作原理是什么"><a name="t21"></a>特有的硬件设备，路由器是什么，功能是什么，靠路由表来转发数据，路由表怎么起作用，基本工作原理是什么？</h2>

<h2 id="子网掩码是什么"><a name="t22"></a>子网掩码，是什么？</h2>

<p>子网掩码(subnet mask)又叫网络掩码、地址掩码、子网络遮罩，它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。可以作计算题，基本运算。</p>

<h2 id="ipv4和ipv6是什么区别"><a name="t23"></a>IPV4和IPV6是什么，区别？</h2>

<p>一个32位，一个128位</p>

<h2 id="几个比较经典的路由协议"><a name="t24"></a>几个比较经典的路由协议</h2>

<p>不一定需要知道具体，但要知道基本思想。</p>

<h2 id="隧道技术"><a name="t25"></a>隧道技术</h2>

<h1 id="运输层"><a name="t26"></a>运输层</h1>



<h2 id="运输层的基本功能和最小单位"><a name="t27"></a>运输层的基本功能和最小单位？</h2>

<p>功能：传输层提供了<strong>主机应用程序进程之间的端到端的服务</strong> <br>
最小单位：<strong>运输协议数据单元**TPDU(Transport Protocol Data Unit)，TCP 传送的数据单位协议是 **TCP 报文段(segment)</strong> <br>
 UDP 传送的数据单位协议是 <strong>UDP 报文</strong>。 </p>



<h2 id="udp和tcp两种运输协议的区别"><a name="t28"></a>UDP和TCP两种运输协议的区别?</h2>

<p>(1) 用户数据报协议 UDP (User Datagram Protocol) <br>
(2) 传输控制协议 TCP (Transmission Control Protocol) <br>
TCP是面向连接的协议，不提供广播或多播服务，其逻辑通信信道是一条可靠信道，开销大，有拥塞控制机制。 <br>
UDP是无连接的协议，支持一对一，多对一，多对多的通信，是面向报文的，其逻辑通信信道是一条不可靠信道，开销小，不可拥塞控制。</p>



<h2 id="端口复用和分用概念"><a name="t29"></a>端口、复用和分用概念？</h2>

<p>端口：一个16位的存在于应用层与传输层的标志，只具有本地意义，即标志本计算机应用层中的各个进程，不同计算机应用层进程之间的通信通过各自的传输层的端口来传输 <br>
复用：传输层中数据打包给 <br>
分用：</p>



<h2 id="停止等待协议和arq协议会考"><a name="t30"></a>停止等待协议和ARQ协议(会考)</h2>



<h3 id="停止等待"><a name="t31"></a>停止等待：</h3>

<p>就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组。 <br>
全双工通信的双方既是发送方也是接收方。 <br>
可以保证两个特点： <br>
(1)传输通道不会产生差错。 <br>
(2)不管发送方以多快的速度发送数据，接收方总是来得及处理。</p>

<h3 id="arqautomatic-repeat-request协议"><a name="t32"></a>ARQ(Automatic Repeat reQuest)协议:</h3>

<p>自动重传请求，是指重传的请求是自动进行的，接收方不需要请求发送方重传某个出错的分组。</p>



<h2 id="流量控制和拥塞控制的作用和区别"><a name="t33"></a>流量控制和拥塞控制的作用和区别</h2>



<h2 id="满开始拥塞避免快重传快回复的概念和切换"><a name="t34"></a>满开始、拥塞避免、快重传、快回复的概念和切换</h2>



<h2 id="tpc连接的建立和释放"><a name="t35"></a>TPC连接的建立和释放</h2>

<p>三次握手四次握手</p>

<h1 id="应用层"><a name="t36"></a>应用层</h1>



<h2 id="域名系统dns的概念和作用"><a name="t37"></a>域名系统DNS的概念和作用？</h2>

<p>互联网采用层次结构的命名树作为主机的名字，并使用分布式的域名系统 DNS。 <br>
名字到 IP 地址的解析是由若干个域名服务器程序完成的。域名服务器程序在专设的结点上运行，运行该程序的机器称为域名服务器。  </p>



<h2 id="文件传送协议ftp"><a name="t38"></a>文件传送协议FTP</h2>



<h2 id="万维网www"><a name="t39"></a>万维网WWW</h2>



<h2 id="电子邮件"><a name="t40"></a>电子邮件</h2>



<h2 id="动态主机配置协议dhcp"><a name="t41"></a>动态主机配置协议DHCP</h2>



<h2 id="p2p应用"><a name="t42"></a>P2P应用</h2>          </div>
          <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                  </div>
]]></content>
  </entry>
  <entry>
    <title>并查集入门</title>
    <url>/2019/11/18/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><strong>写在前面</strong>：<br><br/>话说江湖上散落着各式各样的大侠，有上千个之多。他们没有什么正当职业，整天背着剑在外面走来走去，碰到和自己不是一路人的，就免不了要打一架。但大侠们有一个优点就是讲义气，绝对不打自己的朋友。而且他们信奉“朋友的朋友就是我的朋友”，只要是能通过朋友关系串联起来的，不管拐了多少个弯，都认为是自己人。</p>
<p>这样一来，江湖上就形成了一个一个的群落，通过两两之间的朋友关系串联起来。而不在同一个群落的人，无论如何都无法通过朋友关系连起来，于是就可以放心往死了打。但是两个原本互不相识的人，如何判断是否属于一个朋友圈呢？</p>
<p>我们可以在每个朋友圈内推举出一个比较有名望的人，作为该圈子的代表人物，这样，每个圈子就可以这样命名“齐达内朋友之队”“罗纳尔多朋友之队”……两人只要互相对一下自己的队长是不是同一个人，就可以确定敌友关系了。 但是还有问题啊，大侠们只知道自己直接的朋友是谁，很多人压根就不认识队长，要判断自己的队长是谁，只能漫无目的的通过朋友的朋友关系问下去：“你是不是队长？你是不是队长？” 这样一来，队长面子上挂不住了，而且效率太低，还有可能陷入无限循环中。</p>
<p>于是队长下令，重新组队。队内所有人实行分等级制度，形成树状结构，我队长就是根节点，下面分别是二级队员、三级队员。每个人只要记住自己的上级是谁就行了。遇到判断敌友的时候，只要一层层向上问，直到最高层，就可以在短时间内确定队长是谁了。由于我们关心的只是两个人之间是否连通，至于他们是如何连通的，以及每个圈子内部的结构是怎样的，甚至队长是谁，并不重要。所以我们可以放任队长随意重新组队，只要不搞错敌友关系就好了。于是，门派产生了。</p>
<p>并查集<br>并查集（Union-find Sets）是一种非常精巧而实用的数据结构，它主要用于处理一些不相交集合的合并问题。一些常见的用途有求连通子图、求最小生成树的 Kruskal 算法和求最近公共祖先（Least Common Ancestors, LCA）等。</p>
<p>使用并查集时，首先会存在一组不相交的动态集合，一般都会使用一个整数表示集合中的一个元素。</p>
<p>每个集合可能包含一个或多个元素，并选出集合中的某个元素作为代表，称为集合的代表元。</p>
<p>每个集合中具体包含了哪些元素是不关心的，具体选择哪个元素作为代表一般也是不关心的。我们关心的是，对于给定的元素，可以很快的找到这个元素所在的集合（的代表），以及合并两个元素所在的集合，而且这些操作的时间复杂度都是常数级的。</p>
<p>并查集的实现原理也比较简单，就是使用树来表示集合，树的每个节点就表示集合中的一个元素，树根对应的元素就是该集合的代表元，如图 1 所示。</p>
<p>图1 并查集的树型表示<br>图中有两棵树，分别对应两个集合，其中第一个集合为 ，代表元素是 ；第二个集合为 ，代表元素是 。</p>
<p>并查集的基本操作有三个：</p>
<p>makeSet(s)：建立一个新的并查集，其中包含 s 个单元素集合。【初始化】</p>
<p>unionSet(x, y)：把元素 x 和元素 y 所在的集合合并，要求 x 和 y 所在的集合不相交，如果相交则不合并。【合并】</p>
<p>find(x)：找到元素 x 所在的集合的代表，该操作也可以用于判断两个元素是否位于同一个集合，只要将它们各自的代表比较一下就可以了。【查找】</p>
<p>这也就是为什么叫并查集的原因，顾名思义，就是为了进行查和并操作。</p>
<p>【初始化】<br>树的节点表示集合中的元素，指针表示指向父节点的指针，根节点的指针指向自己，表示其没有父节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">图<span class="number">2</span> 构造、初始化并查集</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 105</span></span><br><span class="line"><span class="keyword">int</span> parent[N];<span class="comment">// 树型结构的根节点</span></span><br><span class="line"><span class="keyword">int</span> r[N];<span class="comment">// 树的秩 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span>     <span class="comment">//对n个结点初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        parent[i] = i;     <span class="comment">// 每个结点的上级都是自己</span></span><br><span class="line">        r[i] = <span class="number">0</span>;    <span class="comment">// 每个结点构成的树的秩为0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">【查找】</span><br><span class="line">沿着每个结点的父节点不断向上查找，最终就可以找到该树的根结点，即该集合的代表元素。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_parent</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// 查找结点x的根结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(parent[x] == x) <span class="comment">// 递归出口：x的上级为x本身，即x为根结点</span></span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="keyword">return</span> x;      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> find_parent(parent[x]);<span class="comment">// 递归查找</span></span><br><span class="line">&#125;</span><br><span class="line">通过下面的图，我们发现，普通的查找过程相对较麻烦，例如寻找d结点的根节点，我们需要通过才能最终找到。</span><br><span class="line"></span><br><span class="line">但是，如果我们使用路径压缩算法，那么只需要查找一次，就能确定d结点的结点，即。</span><br><span class="line">图<span class="number">3</span> 路径压缩（优化一）</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//【递归版本】</span></span><br><span class="line"><span class="comment">// 改进查找算法：完成路径压缩，将x的上级直接变为根结点，那么树的高度就会大大降低</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_parent</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// 查找结点x的根结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(parent[x] == x) <span class="comment">// 递归出口：x的上级为x本身，即x为根结点</span></span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="keyword">return</span> x;      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parent[x] = find_parent(parent[x]);<span class="comment">// 递归查找，此代码相当于先找到根结点rootx，然后pre[x]=rootx</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【路径压缩的另一种写法】</span></span><br><span class="line"><span class="comment">//【个人更偏向于这种写法】 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_parent</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(parent[x]!=x)parent[x]=find_parent(parent[x]);</span><br><span class="line">    <span class="keyword">return</span> parent[x];</span><br><span class="line">&#125; </span><br><span class="line">【合并】</span><br><span class="line">并查集的合并也非常简单，就是将一个集合的树根指向另一个集合的树根。</span><br><span class="line"></span><br><span class="line">图<span class="number">4</span> 并查集的合并</span><br><span class="line"><span class="comment">//【并】</span></span><br><span class="line"><span class="comment">// 朴素合并 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root_x, root_y;</span><br><span class="line">    root_x = find_parent(x);</span><br><span class="line">    root_y = find_parent(y);</span><br><span class="line">    <span class="keyword">if</span>(root_x!=root_y)parent[root_y]=root_x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以采用一种优化方法——按秩合并，注意初始化的时候需要将全部置0。<br>图5 按秩合并（优化二）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//【并】</span></span><br><span class="line"><span class="comment">// 按秩合并 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root_x, root_y;</span><br><span class="line">    root_x = find_parent(x);</span><br><span class="line">    root_y = find_parent(y);</span><br><span class="line">    <span class="comment">// 属于同一个集合 </span></span><br><span class="line">    <span class="keyword">if</span>(root_x == root_y)<span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 属于不同集合 </span></span><br><span class="line">    <span class="comment">//令 y的根结点的上级为 root_x</span></span><br><span class="line">    <span class="keyword">if</span>(r[root_x] &gt; r[root_y])parent[root_y] = root_x;         </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 秩相等，合并之后秩需要加 1 </span></span><br><span class="line">        <span class="keyword">if</span>(r[root_x] == r[root_y])r[root_y]++;</span><br><span class="line">        parent[root_x] = root_y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并查集的分析与用法：<br>时空复杂度：<br>时间复杂度：<br>同时使用路径压缩、按秩（rank）合并优化的程序每个操作的平均时间仅为，其中是的反函数，是急速增加的阿克曼函数。因为是其反函数，故在十分巨大时还是小于 5。因此，平均运行时间是一个极小的常数。实际上，这是渐近最优算法：Fredman 和 Saks 在 1989 年解释了的平均时间内可以获得任何并查集。</p>
<p>空间复杂度：<br>（n为元素个数）<br>按秩合并会多一个保存秩的辅助空间，即。</p>
<p>——《维基百科：并查集》</p>
<p>用途：<br>判断是否是同一类：<br>这个很简单，给定要判定的两个节点，find_parent()一下就可以了</p>
<p>判断有多少个类/是否连通：<br>这个就基本上要遍历一下所有的节点，然后再把它们的父亲节点加入到set集合里，然后再统计一下个数即可。</p>
<p>最小生成树：Kruskal算法</p>
]]></content>
  </entry>
  <entry>
    <title>树状数组入门</title>
    <url>/2019/11/18/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<div id="mainContent">
    <div class="forFlow">
        <div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">

<p><a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/xenny/p/9739600.html" target="_blank" rel="noopener">树状数组详解</a></p>
<div id="cnblogs_post_body" class="blogpost-body ">
    <p><span style="font-size: 14pt;">先来看几个问题吧。</span></p>
<h2 id="autoid-0-0-0">1.什么是树状数组？</h2>
<p><span style="font-size: 14pt;">顾名思义，就是用数组来模拟树形结构呗。那么衍生出一个问题，为什么不直接建树？答案是没必要，因为树状数组能处理的问题就没必要建树。和Trie树的构造方式有类似之处。</span></p>
<h2 id="autoid-0-0-0">2.树状数组可以解决什么问题</h2>
<p><span style="font-size: 14pt;">可以解决大部分基于区间上的更新以及求和问题。</span></p>
<h2 id="autoid-0-0-0">3.树状数组和线段树的区别在哪里</h2>
<p><span style="font-size: 14pt;">树状数组可以解决的问题都可以用线段树解决，这两者的区别在哪里呢？树状数组的系数要少很多，就比如字符串模拟大数可以解决大数问题，也可以解决1+1的问题，但没人会在1+1的问题上用大数模拟。</span></p>
<h2 id="autoid-0-0-0">4.树状数组的优点和缺点</h2>
<p><span style="font-size: 14pt;">修改和查询的复杂度都是O(logN)，而且相比线段树系数要少很多，比传统数组要快，而且容易写。</span></p>
<p><span style="font-size: 14pt;">缺点是遇到复杂的区间问题还是不能解决，功能还是有限。</span></p>
<hr>
<h1 id="autoid-0-0-0">一、树状数组介绍<span style="font-size: 14pt;"><br></span></h1>
<p><span style="font-size: 14pt;">二叉树大家一定都知道，如下图</span></p>
<p><span style="font-size: 14pt;"><img src="https://img2018.cnblogs.com/blog/1448672/201810/1448672-20181003121208845-81274925.png" alt=""></span></p>
<p><span style="font-size: 14pt;">如果每个父亲都存的是两个儿子的值，是不是就可以解决这类区间问题了呢。是的没错，但是这样的树形结构，叫做线段树。</span></p>
<p><span style="font-size: 14pt;">那真的的树形结构是怎样的，和上图类似，但省去了一些节点，以达到用数组建树。</span></p>
<p><span style="font-size: 14pt;"><img src="https://img2018.cnblogs.com/blog/1448672/201810/1448672-20181003121604644-268531484.png" alt=""></span></p>
<p><span style="font-size: 14pt;">黑色数组代表原来的数组（下面用A[i]代替），红色结构代表我们的树状数组(下面用C[i]代替)，发现没有，每个位置只有一个方框，令每个位置存的就是子节点的值的和，则有</span></p>
<ul>
<li><span style="font-size: 14pt;">C[1] = A[1];</span></li>
<li><span style="font-size: 14pt;">C[2] = A[1] + A[2];</span></li>
<li><span style="font-size: 14pt;">C[3] = A[3];</span></li>
<li><span style="font-size: 14pt;">C[4] = A[1] + A[2] + A[3] + A[4];</span></li>
<li><span style="font-size: 14pt;">C[5] = A[5];</span></li>
<li><span style="font-size: 14pt;">C[6] = A[5] + A[6];</span></li>
<li><span style="font-size: 14pt;">C[7] = A[7];</span></li>
<li><span style="font-size: 14pt;">C[8] = A[1] + A[2] + A[3] + A[4] + A[5] + A[6] + A[7] + A[8];</span></li>



</ul>
<p><span style="font-size: 14pt;">可以发现，这颗树是有规律的</span></p>
<p><span style="font-size: 14pt;"><strong>C[i] = A[i - 2<sup>k</sup>+1] + A</strong><span style="font-size: 14pt;"><strong>[i - 2<sup>k</sup>+2] + ... + A[i];&nbsp;&nbsp; //k为i的二进制中从最低位到高位连续零的长度</strong></span></span></p>
<p><span style="font-size: 14pt;"><span style="font-size: 14pt;">例如i = 8(1000)时候，k = 3，可自行验证。<br></span></span></p>
<p><span style="font-size: 14pt;">这个怎么实现求和呢，比如我们要找前7项和，那么应该是</span><span style="font-size: 14pt;">SUM = C[7] + C[6] + C[4];</span></p>
<p><span style="font-size: 14pt;">而根据上面的式子，容易的出<strong>SUM<sub>i</sub> = C[i] + C[i-2<sup>k1</sup>] + C[(i - 2<sup>k1</sup>) - 2<sup>k2</sup>] + .....；</strong></span></p>
<p><span style="font-size: 14pt;">其实树状数组就是一个二进制上面的应用。</span></p>
<p><span style="font-size: 14pt;">现在新的问题来了2^k该怎么求呢，不难得出2^k = i&amp;(i^(i-1));但这个还是不好求出呀，前辈的智慧就出来了，2^k = i&amp;(-i);</span></p>
<p><span style="font-size: 14pt;">为什么呢？</span></p>
<p><span style="font-size: 14pt; color: #008080;">这里利用的负数的存储特性，负数是以补码存储的，对于整数运算 x&amp;(-x)有<br>
&nbsp; &nbsp; &nbsp; &nbsp;<span style="font-size: 14pt; color: #008080;">●</span> 当x为0时，即 0 &amp; 0，结果为0；<br>
&nbsp; &nbsp; &nbsp; &nbsp;●当x为奇数时，最后一个比特位为1，取反加1没有进位，故x和-x除最后一位外前面的位正好相反，按位与结果为0。结果为1。<br>
&nbsp; &nbsp; &nbsp; &nbsp;●当x为偶数，且为2的m次方时，x的二进制表示中只有一位是1（从右往左的第m+1位），其右边有m位0，故x取反加1后，从右到左第有m个0，第m+1位及其左边全是1。这样，x&amp; (-x) 得到的就是x。&nbsp;<br>
&nbsp; &nbsp; &nbsp; &nbsp;●当x为偶数，却不为2的m次方的形式时，可以写作x= y * (2^k)。其中，y的最低位为1。实际上就是把x用一个奇数左移k位来表示。这时，x的二进制表示最右边有k个0，从右往左第k+1位为1。当对x取反时，最右边的k位0变成1，第k+1位变为0；再加1，最右边的k位就又变成了0，第k+1位因为进位的关系变成了1。左边的位因为没有进位，正好和x原来对应的位上的值相反。二者按位与，得到：第k+1位上为1，左边右边都为0。结果为2^k。<br>
&nbsp; &nbsp; &nbsp; &nbsp; 总结一下：x&amp;(-x)，当x为0时结果为0；x为奇数时，结果为1；x为偶数时，结果为x中2的最大次方的因子。</span></p>
<p><span style="font-size: 14pt; color: #000000;">而且这个有一个专门的称呼，叫做lowbit，即取2^k。</span></p>
<h1 id="autoid-0-0-0"><span style="color: #000000;">二、如何建立树状数组</span></h1>
<p><span style="color: #000000; font-size: 14pt;">上面已经解释了如何用树状数组求区间和，那么如果我们要更新某一个点的值呢，还是一样的，上面说了<span style="font-size: 14pt;"><strong>C[i] = A[i - 2<sup>k</sup>+1] + A</strong><span style="font-size: 14pt;"><strong>[i - 2<sup>k</sup>+2] + ... + A[i]</strong></span></span>，那么如果我们更新某个A[i]的值，则会影响到所有包含有A[i]位置。如果求A[i]包含哪些位置里呢，同理有</span></p>
<p><span style="color: #000000; font-size: 14pt;">A[i] 包含于 C[i + 2<sup>k</sup>]、C[(i + 2<sup>k</sup>) + 2<sup>k</sup>]...；</span></p>
<p>&nbsp;</p>
<p><span style="color: #000000; font-size: 14pt;">好，现在已经搞清楚了更新和求和，就可以来建树状数组了。如果上面的求和、更新或者lowbit步骤还没搞懂的化，建议再思考弄懂再往下看。</span></p>
<p><span style="color: #000000; font-size: 14pt;">那么构造一个树状数组则为</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" target="_blank" rel="noopener" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre class="prettyprint prettyprinted" style=""><span style="color: #008080;"><span class="pln"> </span><span class="lit">1</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span style="color: #000000;"><span class="pln"> n</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">2</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> a</span><span class="pun">[</span><span style="color: #800080;"><span class="lit">1005</span></span><span class="pun">],</span><span class="pln">c</span><span class="pun">[</span><span style="color: #800080;"><span class="lit">1005</span></span><span class="pun">];</span><span class="pln"> </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">对应原数组和树状数组</span></span><span class="pln">
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">3</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">4</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> lowbit</span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span style="color: #000000;"><span class="pln"> x</span><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">5</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">return</span></span><span class="pln"> x</span><span class="pun">&amp;(-</span><span style="color: #000000;"><span class="pln">x</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">6</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">7</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">8</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">void</span></span><span class="pln"> updata</span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> i</span><span class="pun">,</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> k</span><span class="pun">){</span><span class="pln">    </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">在i位置加上k</span></span><span class="pln">
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">9</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">while</span></span><span class="pun">(</span><span class="pln">i </span><span class="pun">&lt;=</span><span style="color: #000000;"><span class="pln"> n</span><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">10</span></span><span class="pln">         c</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span style="color: #000000;"><span class="pln"> k</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">11</span></span><span class="pln">         i </span><span class="pun">+=</span><span style="color: #000000;"><span class="pln"> lowbit</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">12</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">    </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">13</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">14</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">15</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> getsum</span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> i</span><span class="pun">){</span><span class="pln">        </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">求A[1 - i]的和</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">16</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> res </span><span class="pun">=</span><span class="pln"> </span><span style="color: #800080;"><span class="lit">0</span></span><span style="color: #000000;"><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">17</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">while</span></span><span class="pun">(</span><span class="pln">i </span><span class="pun">&gt;</span><span class="pln"> </span><span style="color: #800080;"><span class="lit">0</span></span><span style="color: #000000;"><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">18</span></span><span class="pln">         res </span><span class="pun">+=</span><span style="color: #000000;"><span class="pln"> c</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">19</span></span><span class="pln">         i </span><span class="pun">-=</span><span style="color: #000000;"><span class="pln"> lowbit</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">20</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">    </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">21</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">return</span></span><span style="color: #000000;"><span class="pln"> res</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">22</span></span><span class="pln"> </span><span class="pun">}</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" target="_blank" rel="noopener" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div>
<p><span style="font-size: 14pt;">这样就构造了一个树状数组。下面看一道模板题目吧。</span></p>
<p><span style="font-size: 14pt;">题目链接：<a href="https://vjudge.net/problem/HDU-1166" target="_blank">https://vjudge.net/problem/HDU-1166</a></span></p>
<p><span style="font-size: 14pt;">直接看代码吧</span></p>
<p>&nbsp;</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" target="_blank" rel="noopener" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre class="prettyprint prettyprinted" style=""><span style="color: #008080;"><span class="pln"> </span><span class="lit">1</span></span><span class="pln"> </span><span class="com">#include</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">bits</span><span class="pun">/</span><span class="pln">stdc</span><span class="pun">++.</span><span class="pln">h</span><span class="pun">&gt;</span><span class="pln">
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">2</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">using</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">namespace</span></span><span style="color: #000000;"><span class="pln"> std</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">3</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">4</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span style="color: #000000;"><span class="pln"> n</span><span class="pun">,</span><span class="pln">m</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">5</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> a</span><span class="pun">[</span><span style="color: #800080;"><span class="lit">50005</span></span><span class="pun">],</span><span class="pln">c</span><span class="pun">[</span><span style="color: #800080;"><span class="lit">50005</span></span><span class="pun">];</span><span class="pln"> </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">对应原数组和树状数组</span></span><span class="pln">
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">6</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">7</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> lowbit</span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span style="color: #000000;"><span class="pln"> x</span><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">8</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">return</span></span><span class="pln"> x</span><span class="pun">&amp;(-</span><span style="color: #000000;"><span class="pln">x</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">9</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">10</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">11</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">void</span></span><span class="pln"> updata</span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> i</span><span class="pun">,</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> k</span><span class="pun">){</span><span class="pln">    </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">在i位置加上k</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">12</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">while</span></span><span class="pun">(</span><span class="pln">i </span><span class="pun">&lt;=</span><span style="color: #000000;"><span class="pln"> n</span><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">13</span></span><span class="pln">         c</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span style="color: #000000;"><span class="pln"> k</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">14</span></span><span class="pln">         i </span><span class="pun">+=</span><span style="color: #000000;"><span class="pln"> lowbit</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">15</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">    </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">16</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">17</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">18</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> getsum</span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> i</span><span class="pun">){</span><span class="pln">        </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">求A[1 - i]的和</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">19</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> res </span><span class="pun">=</span><span class="pln"> </span><span style="color: #800080;"><span class="lit">0</span></span><span style="color: #000000;"><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">20</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">while</span></span><span class="pun">(</span><span class="pln">i </span><span class="pun">&gt;</span><span class="pln"> </span><span style="color: #800080;"><span class="lit">0</span></span><span style="color: #000000;"><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">21</span></span><span class="pln">         res </span><span class="pun">+=</span><span style="color: #000000;"><span class="pln"> c</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">22</span></span><span class="pln">         i </span><span class="pun">-=</span><span style="color: #000000;"><span class="pln"> lowbit</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">23</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">    </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">24</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">return</span></span><span style="color: #000000;"><span class="pln"> res</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">25</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">26</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">27</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span style="color: #000000;"><span class="pln"> main</span><span class="pun">(){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">28</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span style="color: #000000;"><span class="pln"> t</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">29</span></span><span class="pln">     cin</span><span class="pun">&gt;&gt;</span><span style="color: #000000;"><span class="pln">t</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">30</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">for</span></span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> tot </span><span class="pun">=</span><span class="pln"> </span><span style="color: #800080;"><span class="lit">1</span></span><span class="pun">;</span><span class="pln"> tot </span><span class="pun">&lt;=</span><span class="pln"> t</span><span class="pun">;</span><span class="pln"> tot</span><span class="pun">++</span><span style="color: #000000;"><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">31</span></span><span class="pln">         cout </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span style="color: #800000;"><span class="str">"</span></span><span style="color: #800000;"><span class="str">Case </span></span><span style="color: #800000;"><span class="str">"</span></span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> tot </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span style="color: #800000;"><span class="str">"</span></span><span style="color: #800000;"><span class="str">:</span></span><span style="color: #800000;"><span class="str">"</span></span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span style="color: #000000;"><span class="pln"> endl</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">32</span></span><span class="pln">         memset</span><span class="pun">(</span><span class="pln">a</span><span class="pun">,</span><span class="pln"> </span><span style="color: #800080;"><span class="lit">0</span></span><span class="pun">,</span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">sizeof</span></span><span style="color: #000000;"><span class="pln"> a</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">33</span></span><span class="pln">         memset</span><span class="pun">(</span><span class="pln">c</span><span class="pun">,</span><span class="pln"> </span><span style="color: #800080;"><span class="lit">0</span></span><span class="pun">,</span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">sizeof</span></span><span style="color: #000000;"><span class="pln"> c</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">34</span></span><span class="pln">         cin</span><span class="pun">&gt;&gt;</span><span style="color: #000000;"><span class="pln">n</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">35</span></span><span class="pln">         </span><span style="color: #0000ff;"><span class="kwd">for</span></span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span style="color: #800080;"><span class="lit">1</span></span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;=</span><span class="pln"> n</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span style="color: #000000;"><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">36</span></span><span class="pln">             cin</span><span class="pun">&gt;&gt;</span><span style="color: #000000;"><span class="pln">a</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">37</span></span><span class="pln">             updata</span><span class="pun">(</span><span class="pln">i</span><span class="pun">,</span><span class="pln">a</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]);</span><span class="pln">   </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">输入初值的时候，也相当于更新了值</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">38</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">        </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">39</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">40</span></span><span class="pln">         </span><span style="color: #0000ff;"><span class="kwd">string</span></span><span style="color: #000000;"><span class="pln"> s</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">41</span></span><span class="pln">         </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span style="color: #000000;"><span class="pln"> x</span><span class="pun">,</span><span class="pln">y</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">42</span></span><span class="pln">         </span><span style="color: #0000ff;"><span class="kwd">while</span></span><span class="pun">(</span><span class="pln">cin</span><span class="pun">&gt;&gt;</span><span class="pln">s </span><span class="pun">&amp;&amp;</span><span class="pln"> s</span><span class="pun">[</span><span style="color: #800080;"><span class="lit">0</span></span><span class="pun">]</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span style="color: #800000;"><span class="str">'</span></span><span style="color: #800000;"><span class="str">E</span></span><span style="color: #800000;"><span class="str">'</span></span><span style="color: #000000;"><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">43</span></span><span class="pln">             cin</span><span class="pun">&gt;&gt;</span><span class="pln">x</span><span class="pun">&gt;&gt;</span><span style="color: #000000;"><span class="pln">y</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">44</span></span><span class="pln">             </span><span style="color: #0000ff;"><span class="kwd">if</span></span><span class="pun">(</span><span class="pln">s</span><span class="pun">[</span><span style="color: #800080;"><span class="lit">0</span></span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span style="color: #800000;"><span class="str">'</span></span><span style="color: #800000;"><span class="str">Q</span></span><span style="color: #800000;"><span class="str">'</span></span><span class="pun">){</span><span class="pln">    </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">求和操作</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">45</span></span><span class="pln">                 </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> sum </span><span class="pun">=</span><span class="pln"> getsum</span><span class="pun">(</span><span class="pln">y</span><span class="pun">)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> getsum</span><span class="pun">(</span><span class="pln">x</span><span class="pun">-</span><span style="color: #800080;"><span class="lit">1</span></span><span class="pun">);</span><span class="pln">    </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">x-y区间和也就等于1-y区间和减去1-(x-1)区间和</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">46</span></span><span class="pln">                 cout </span><span class="pun">&lt;&lt;</span><span class="pln"> sum </span><span class="pun">&lt;&lt;</span><span style="color: #000000;"><span class="pln"> endl</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">47</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">            </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">48</span></span><span class="pln">             </span><span style="color: #0000ff;"><span class="kwd">else</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">if</span></span><span class="pun">(</span><span class="pln">s</span><span class="pun">[</span><span style="color: #800080;"><span class="lit">0</span></span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span style="color: #800000;"><span class="str">'</span></span><span style="color: #800000;"><span class="str">A</span></span><span style="color: #800000;"><span class="str">'</span></span><span style="color: #000000;"><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">49</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">                updata</span><span class="pun">(</span><span class="pln">x</span><span class="pun">,</span><span class="pln">y</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">50</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">            </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">51</span></span><span class="pln">             </span><span style="color: #0000ff;"><span class="kwd">else</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">if</span></span><span class="pun">(</span><span class="pln">s</span><span class="pun">[</span><span style="color: #800080;"><span class="lit">0</span></span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span style="color: #800000;"><span class="str">'</span></span><span style="color: #800000;"><span class="str">S</span></span><span style="color: #800000;"><span class="str">'</span></span><span style="color: #000000;"><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">52</span></span><span class="pln">                 updata</span><span class="pun">(</span><span class="pln">x</span><span class="pun">,-</span><span class="pln">y</span><span class="pun">);</span><span class="pln">    </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">减去操作，即为加上相反数</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">53</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">            </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">54</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">        </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">55</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">56</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">    </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">57</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">return</span></span><span class="pln"> </span><span style="color: #800080;"><span class="lit">0</span></span><span style="color: #000000;"><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">58</span></span><span class="pln"> </span><span class="pun">}</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" target="_blank" rel="noopener" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div>
<p>&nbsp;</p>
<p><span style="font-size: 14pt;">这就是最简单的点更新区间求和了。</span></p>
<h1 id="autoid-0-0-0">三、树状数组的几种变式(区间更新，区间查询)</h1>
<p><span style="font-size: 14pt;">上面介绍的是最普通的单点更新，区间查询，但如果有些时候是区间更新，单点求和怎么半，又或是区间更新，区间求和怎么办。这里将介绍各种情况该怎么写。</span></p>
<p><span style="font-size: 14pt;">如果上面的单点更新，区间查询还没看懂，建议再思考再往下看。</span></p>
<h2 id="autoid-0-0-0"><span style="font-size: 14pt;">1.单点更新、单点查询</span></h2>
<p><span style="font-size: 14pt;">传统数组可做</span></p>
<h2 id="autoid-0-0-0"><span style="font-size: 14pt;">2.单点更新、区间查询</span></h2>
<p><span style="font-size: 14pt;">已讲解，详细看上面</span></p>
<h2 id="autoid-0-0-0"><span style="font-size: 14pt;">3.区间更新、单点查询</span></h2>
<p><span style="font-size: 14pt;">这就是第一个问题，如果题目是让你把x-y区间内的所有值全部加上k或者减去k，然后查询操作是问某个点的值，这种时候该怎么做呢。如果是像上面的树状数组来说，就必须把x-y区间内每个值都更新，这样的复杂度肯定是不行的，这个时候，就不能再用数据的值建树了，这里我们引入差分，利用差分建树。</span></p>
<p><span style="font-size: 14pt;">假设我们规定A[0] = 0;</span></p>
<p><span style="font-size: 14pt;">则有 <strong>A[i] = Σ<sup>i</sup><sub>j = 1</sub>D[j];(D[j] = A[j] - A[j-1])，</strong>即前面i项的差值和，这个有什么用呢？例如对于下面这个数组</span></p>
<ul>
<li><span style="font-size: 14pt;">A[] = 1 2 3 5 6 9<br></span></li>
<li><span style="font-size: 14pt;">D[] = 1 1 1 2 1 3</span></li>


</ul>
<p><span style="font-size: 14pt;">如果我们把[2,5]区间内值加上2，则变成了</span></p>
<ul>
<li><span style="font-size: 14pt;">A[] = 1 4 5 7 8 9</span></li>
<li><span style="font-size: 14pt;">D[] = 1 3 <span style="color: #ff0000;">1 2 1</span> 1</span></li>


</ul>
<p><span style="font-size: 14pt;">发现了没有，当某个区间[x,y]值改变了，区间内的差值是不变的，只有D[x]和D[y+1]的值发生改变，至于为什么我想我就不用解释了吧。</span></p>
<p><span style="font-size: 14pt;">所以我们就可以利用这个性质对D[]数组建立树状数组，代码为：</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" target="_blank" rel="noopener" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre class="prettyprint prettyprinted" style=""><span style="color: #008080;"><span class="pln"> </span><span class="lit">1</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span style="color: #000000;"><span class="pln"> n</span><span class="pun">,</span><span class="pln">m</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">2</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> a</span><span class="pun">[</span><span style="color: #800080;"><span class="lit">50005</span></span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="lit">0</span><span class="pun">},</span><span class="pln">c</span><span class="pun">[</span><span style="color: #800080;"><span class="lit">50005</span></span><span class="pun">];</span><span class="pln"> </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">对应原数组和树状数组</span></span><span class="pln">
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">3</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">4</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> lowbit</span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span style="color: #000000;"><span class="pln"> x</span><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">5</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">return</span></span><span class="pln"> x</span><span class="pun">&amp;(-</span><span style="color: #000000;"><span class="pln">x</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">6</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">7</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">8</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">void</span></span><span class="pln"> updata</span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> i</span><span class="pun">,</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> k</span><span class="pun">){</span><span class="pln">    </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">在i位置加上k</span></span><span class="pln">
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">9</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">while</span></span><span class="pun">(</span><span class="pln">i </span><span class="pun">&lt;=</span><span style="color: #000000;"><span class="pln"> n</span><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">10</span></span><span class="pln">         c</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span style="color: #000000;"><span class="pln"> k</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">11</span></span><span class="pln">         i </span><span class="pun">+=</span><span style="color: #000000;"><span class="pln"> lowbit</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">12</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">    </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">13</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">14</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">15</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> getsum</span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> i</span><span class="pun">){</span><span class="pln">        </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">求D[1 - i]的和，即A[i]值</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">16</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> res </span><span class="pun">=</span><span class="pln"> </span><span style="color: #800080;"><span class="lit">0</span></span><span style="color: #000000;"><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">17</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">while</span></span><span class="pun">(</span><span class="pln">i </span><span class="pun">&gt;</span><span class="pln"> </span><span style="color: #800080;"><span class="lit">0</span></span><span style="color: #000000;"><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">18</span></span><span class="pln">         res </span><span class="pun">+=</span><span style="color: #000000;"><span class="pln"> c</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">19</span></span><span class="pln">         i </span><span class="pun">-=</span><span style="color: #000000;"><span class="pln"> lowbit</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">20</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">    </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">21</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">return</span></span><span style="color: #000000;"><span class="pln"> res</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">22</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">23</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">24</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span style="color: #000000;"><span class="pln"> main</span><span class="pun">(){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">25</span></span><span class="pln">     cin</span><span class="pun">&gt;&gt;</span><span style="color: #000000;"><span class="pln">n</span><span class="pun">;</span></span><span style="color: #008080;"><span class="lit">27</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">for</span></span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span style="color: #800080;"><span class="lit">1</span></span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;=</span><span class="pln"> n</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span style="color: #000000;"><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">28</span></span><span class="pln">         cin</span><span class="pun">&gt;&gt;</span><span style="color: #000000;"><span class="pln">a</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">29</span></span><span class="pln">         updata</span><span class="pun">(</span><span class="pln">i</span><span class="pun">,</span><span class="pln">a</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> a</span><span class="pun">[</span><span class="pln">i</span><span class="pun">-</span><span class="lit">1</span><span class="pun">]);</span><span class="pln">   </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">输入初值的时候，也相当于更新了值</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">31</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">    </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">32</span></span><span class="pln">     
</span><span style="color: #008080;"><span class="lit">33</span></span><span class="pln">     </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">[x,y]区间内加上k</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">34</span></span><span class="pln">     updata</span><span class="pun">(</span><span class="pln">x</span><span class="pun">,</span><span class="pln">k</span><span class="pun">);</span><span class="pln">    </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">A[x] - A[x-1]增加k</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">35</span></span><span class="pln">     updata</span><span class="pun">(</span><span class="pln">y</span><span class="pun">+</span><span style="color: #800080;"><span class="lit">1</span></span><span class="pun">,-</span><span class="pln">k</span><span class="pun">);</span><span class="pln">        </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">A[y+1] - A[y]减少k</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">36</span></span><span class="pln">     
</span><span style="color: #008080;"><span class="lit">37</span></span><span class="pln">     </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">查询i位置的值</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">38</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> sum </span><span class="pun">=</span><span style="color: #000000;"><span class="pln"> getsum</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">39</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">40</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">return</span></span><span class="pln"> </span><span style="color: #800080;"><span class="lit">0</span></span><span style="color: #000000;"><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">41</span></span><span class="pln"> </span><span class="pun">}</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" target="_blank" rel="noopener" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div>
<p><span style="font-size: 14pt;">这样就把，原来要更新一个区间的值变成了只需要更新两个点。也很容易理解吧。</span></p>
<h2 id="autoid-0-0-0"><span style="font-size: 14pt;">4.区间更新、区间查询</span></h2>
<p><span style="font-size: 14pt;">上面我们说的差值建树状数组，得到的是某个点的值，那如果我既要区间更新，又要区间查询怎么办。这里我们还是利用差分，由上面可知</span></p>
<p><span style="font-size: 14pt;">∑<sup>n</sup><sub>i = 1</sub>A[i] =&nbsp;<span style="font-size: 14pt;">∑<sup>n</sup><sub>i = 1</sub></span> <span style="font-size: 14pt;"><span style="font-size: 14pt;">∑<sup>i</sup><sub>j = 1</sub>D[j];</span></span></span></p>
<p><span style="font-size: 14pt;"><span style="font-size: 14pt;"><span style="font-size: 14pt;">则</span></span></span>A[1]+A[2]+...+A[n]</p>
<p>&nbsp;</p>
<p>= (D[1]) + (D[1]+D[2]) + ... + (D[1]+D[2]+...+D[n])&nbsp;</p>
<p>&nbsp;</p>
<p>= n*D[1] + (n-1)*D[2] +... +D[n]</p>
<p>&nbsp;</p>
<p>= n * (D[1]+D[2]+...+D[n]) - (0*D[1]+1*D[2]+...+(n-1)*D[n])</p>
<p><span style="font-size: 14pt;">所以上式可以变为<span style="font-size: 14pt;">∑<sup>n</sup><sub>i = 1</sub>A[i] = n*<span style="font-size: 14pt;">∑<sup>n</sup><sub>i = 1</sub>D[i] -&nbsp; <span style="font-size: 14pt;"><span style="font-size: 14pt;">∑<sup>n</sup><sub>i = 1</sub>( D[i]*(i-1) );</span></span></span></span></span></p>
<p>&nbsp;</p>
<p><span style="font-size: 14pt;">如果你理解前面的都比较轻松的话，这里也就知道要干嘛了，维护两个数状数组，sum1[i] = D[i]，sum2[i] = D[i]*(i-1);</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" target="_blank" rel="noopener" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre class="prettyprint prettyprinted" style=""><span style="color: #008080;"><span class="pln"> </span><span class="lit">1</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span style="color: #000000;"><span class="pln"> n</span><span class="pun">,</span><span class="pln">m</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">2</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> a</span><span class="pun">[</span><span style="color: #800080;"><span class="lit">50005</span></span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span style="color: #800080;"><span class="lit">0</span></span><span style="color: #000000;"><span class="pun">};</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">3</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> sum1</span><span class="pun">[</span><span style="color: #800080;"><span class="lit">50005</span></span><span class="pun">];</span><span class="pln">    </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">(D[1] + D[2] + ... + D[n])</span></span><span class="pln">
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">4</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> sum2</span><span class="pun">[</span><span style="color: #800080;"><span class="lit">50005</span></span><span class="pun">];</span><span class="pln">    </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">(1*D[1] + 2*D[2] + ... + n*D[n])</span></span><span class="pln">
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">5</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="pln"> </span><span class="lit">6</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> lowbit</span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span style="color: #000000;"><span class="pln"> x</span><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">7</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">return</span></span><span class="pln"> x</span><span class="pun">&amp;(-</span><span style="color: #000000;"><span class="pln">x</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">8</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="pln"> </span><span class="lit">9</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">10</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">void</span></span><span class="pln"> updata</span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> i</span><span class="pun">,</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span style="color: #000000;"><span class="pln"> k</span><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">11</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> x </span><span class="pun">=</span><span class="pln"> i</span><span class="pun">;</span><span class="pln">    </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">因为x不变，所以得先保存i值</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">12</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">while</span></span><span class="pun">(</span><span class="pln">i </span><span class="pun">&lt;=</span><span style="color: #000000;"><span class="pln"> n</span><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">13</span></span><span class="pln">         sum1</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span style="color: #000000;"><span class="pln"> k</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">14</span></span><span class="pln">         sum2</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> k </span><span class="pun">*</span><span class="pln"> </span><span class="pun">(</span><span class="pln">x</span><span class="pun">-</span><span style="color: #800080;"><span class="lit">1</span></span><span style="color: #000000;"><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">15</span></span><span class="pln">         i </span><span class="pun">+=</span><span style="color: #000000;"><span class="pln"> lowbit</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">16</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">    </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">17</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">18</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">19</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> getsum</span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> i</span><span class="pun">){</span><span class="pln">        </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">求前缀和</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">20</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> res </span><span class="pun">=</span><span class="pln"> </span><span style="color: #800080;"><span class="lit">0</span></span><span class="pun">,</span><span class="pln"> x </span><span class="pun">=</span><span style="color: #000000;"><span class="pln"> i</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">21</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">while</span></span><span class="pun">(</span><span class="pln">i </span><span class="pun">&gt;</span><span class="pln"> </span><span style="color: #800080;"><span class="lit">0</span></span><span style="color: #000000;"><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">22</span></span><span class="pln">         res </span><span class="pun">+=</span><span class="pln"> x </span><span class="pun">*</span><span class="pln"> sum1</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-</span><span style="color: #000000;"><span class="pln"> sum2</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">23</span></span><span class="pln">         i </span><span class="pun">-=</span><span style="color: #000000;"><span class="pln"> lowbit</span><span class="pun">(</span><span class="pln">i</span><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">24</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">    </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">25</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">return</span></span><span style="color: #000000;"><span class="pln"> res</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">26</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">27</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">28</span></span><span class="pln"> </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span style="color: #000000;"><span class="pln"> main</span><span class="pun">(){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">29</span></span><span class="pln">     cin</span><span class="pun">&gt;&gt;</span><span style="color: #000000;"><span class="pln">n</span><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">30</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">for</span></span><span class="pun">(</span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span style="color: #800080;"><span class="lit">1</span></span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;=</span><span class="pln"> n</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span style="color: #000000;"><span class="pun">){</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">31</span></span><span class="pln">         cin</span><span class="pun">&gt;&gt;</span><span style="color: #000000;"><span class="pln">a</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">32</span></span><span class="pln">         updata</span><span class="pun">(</span><span class="pln">i</span><span class="pun">,</span><span class="pln">a</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> a</span><span class="pun">[</span><span class="pln">i</span><span class="pun">-</span><span style="color: #800080;"><span class="lit">1</span></span><span class="pun">]);</span><span class="pln">   </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">输入初值的时候，也相当于更新了值</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">33</span></span><span class="pln"> </span><span style="color: #000000;"><span class="pln">    </span><span class="pun">}</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">34</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">35</span></span><span class="pln">     </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">[x,y]区间内加上k</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">36</span></span><span class="pln">     updata</span><span class="pun">(</span><span class="pln">x</span><span class="pun">,</span><span class="pln">k</span><span class="pun">);</span><span class="pln">    </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">A[x] - A[x-1]增加k</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">37</span></span><span class="pln">     updata</span><span class="pun">(</span><span class="pln">y</span><span class="pun">+</span><span style="color: #800080;"><span class="lit">1</span></span><span class="pun">,-</span><span class="pln">k</span><span class="pun">);</span><span class="pln">        </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">A[y+1] - A[y]减少k</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">38</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">39</span></span><span class="pln">     </span><span style="color: #008000;"><span class="com">//</span></span><span style="color: #008000;"><span class="com">求[x,y]区间和</span></span><span class="pln">
</span><span style="color: #008080;"><span class="lit">40</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">int</span></span><span class="pln"> sum </span><span class="pun">=</span><span class="pln"> getsum</span><span class="pun">(</span><span class="pln">y</span><span class="pun">)</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> getsum</span><span class="pun">(</span><span class="pln">x</span><span class="pun">-</span><span style="color: #800080;"><span class="lit">1</span></span><span style="color: #000000;"><span class="pun">);</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">41</span></span><span class="pln"> 
</span><span style="color: #008080;"><span class="lit">42</span></span><span class="pln">     </span><span style="color: #0000ff;"><span class="kwd">return</span></span><span class="pln"> </span><span style="color: #800080;"><span class="lit">0</span></span><span style="color: #000000;"><span class="pun">;</span><span class="pln">
</span></span><span style="color: #008080;"><span class="lit">43</span></span><span class="pln"> </span><span class="pun">}</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" target="_blank" rel="noopener" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div>
<p>&nbsp;</p>
<p><span style="font-size: 14pt;">再附赠两道模板题目，可以自行写一下以便理解</span></p>
<p><span style="font-size: 14pt;">区间修改、单点查询模板题目：https://www.luogu.org/problem/show?pid=3368<br></span></p>
<p><span style="font-size: 14pt;">区间修改、区间查询模板题目：https://vjudge.net/problem/POJ-3468</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 14pt;">PS：这里大致归纳了一维树状数组的所有要使用到的东西，二维建树以及更多变式就不说了，具体问题再具体分析。</span></p>
<hr>
<p>&nbsp;</p>
<p><span style="font-size: 14pt;">后记：<span style="font-family: 楷体;">自己看了一下写的不是很好，特别是公式和图，都是用简单的画图和直接写的，没有用编辑器，也不能说我懒吧，毕竟精力有限啦，以后有空还是会去学的，带给大家更好的博客。手敲也不易，希望大家理解，多多支持。</span></span></p>
<p><span style="font-size: 14pt;"><span style="font-family: 楷体;">不懂问我噢= =</span></span></p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>]]></content>
  </entry>
  <entry>
    <title>线段树入门</title>
    <url>/2019/11/18/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%85%A5%E9%97%A8-%E4%BE%8B%E9%A2%98/</url>
    <content><![CDATA[<div class="htmledit_views" id="content_views">

<div style="text-align:center;"><span style="font-size:48px;">线段树从零开始</span></div>
<div style="text-align:center;"><br></div>
<div style="text-align:center;"><span style="font-size:18px;">By shaojintian</span></div>
<div style="text-align:center;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><span style="font-size:24px;">一：为什么需要线段树？</span></div>
<div style="text-align:left;">
<div class="table-box"><table width="800" cellspacing="1" cellpadding="1" border="1"><tbody><tr><td><span style="font-size:18px;">题目一：<br>
10000个正整数，编号1到10000，用A[1],A[2],A[10000]表示。<br>
修改：无<br>
统计：1.编号从L到R的所有数之和为多少？ 其中1&lt;= L &lt;= R &lt;= 10000.</span></td>
</tr></tbody></table></div><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;">方法一：对于统计L,R ，需要求下标从L到R的所有数的和，从L到R的所有下标记做[L..R],问题就是对A[L..R]进行求和。</span></div>
<div style="text-align:left;"><span style="font-size:18px;">这样求和，对于每个询问，需要将(R-L+1)个数相加。</span></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;">方法二：更快的方法是求前缀和,令 S[0]=0, S[k]=A[1..k] ，那么，A[L..R]的和就等于S[R]-S[L-1]，</span></div>
<div style="text-align:left;"><span style="font-size:18px;">这样，对于每个询问，就只需要做一次减法，大大提高效率。</span></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;">
<div class="table-box"><table width="800" cellspacing="1" cellpadding="1" border="1"><tbody><tr><td><span style="font-size:18px;">题目二：<br>
10000个正整数，编号从1到10000，用A[1],A[2],A[10000]表示。<br>
修改：1.将第L个数增加C （1 &lt;= L &lt;= 10000）<br>
统计：1.编号从L到R的所有数之和为多少？ 其中1&lt;= L &lt;= R &lt;= 10000.</span></td>
</tr></tbody></table></div><span style="font-size:18px;"><br>
再使用方法二的话，假如A[L]+=C之后，S[L],S[L+1],,S[R]都需要增加C,全部都要修改，见下表。<br></span>
<div style="text-align:center;"><span style="font-size:18px;"><br></span></div>
</div>
<div style="text-align:left;">
<div class="table-box"><table width="800" cellspacing="1" cellpadding="1" border="1" style="text-align:center;"><tbody><tr><td><span style="font-size:18px;"><br></span></td>
<td><span style="font-size:18px;">方法一</span></td>
<td><span style="font-size:18px;">方法二</span></td>
</tr><tr><td><span style="font-size:18px;">A[L]+=C</span></td>
<td><span style="font-size:18px;">修改1个元素</span></td>
<td><span style="font-size:18px;">修改R-L+1个元素</span></td>
</tr><tr><td><span style="font-size:18px;">求和A[L..R]</span></td>
<td><span style="font-size:18px;">计算R-L+1个元素之和</span></td>
<td><span style="font-size:18px;">计算两个元素之差</span></td>
</tr></tbody></table></div><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;">从上表可以看出，方法一修改快，求和慢。 方法二求和快，修改慢。</span></div>
<div style="text-align:left;"><span style="font-size:18px;">那有没有一种结构，修改和求和都比较快呢？答案当然是线段树。</span></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><span style="font-size:24px;">二：线段树的点修改</span></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;">上面的问题二就是典型的线段树点修改。</span></div>
<div style="text-align:left;"><span style="font-size:18px;">线段树先将区间[1..10000]分成不超过4*10000个子区间，对于每个子区间，记录一段连续数字的和。</span></div>
<div style="text-align:left;"><span style="font-size:18px;">之后，任意给定区间[L,R]，线段树在上述子区间中选择约2*log2(R-L+1)个拼成区间[L,R]。</span></div>
<div style="text-align:left;"><span style="font-size:18px;">如果A[L]+=C ，线段树的子区间中，约有log2(10000)个包含了L，所以需要修改log2(10000)个。</span></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;">于是，使用线段树的话，</span></div>
<div style="text-align:left;"><span style="font-size:18px;">A[L]+=C 需要修改log2(10000) 个元素</span></div>
<div style="text-align:left;"><span style="font-size:18px;">求和A[L...R]需要修改2*log2(R-L+1) &lt;= 2 * log2(10000) 个元素。</span></div>
<div style="text-align:left;"><span style="font-size:18px;">log2(10000) &lt; 14 所以相对来说线段树的修改和求和都比较快。</span></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><br></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;"><strong>问题一：开始的子区间是怎么分的？</strong></span></div>
<div style="text-align:left;"><span style="font-size:18px;">首先是讲原始子区间的分解，假定给定区间[L,R]，只要L &lt; R ，线段树就会把它继续分裂成两个区间。</span></div>
<div style="text-align:left;"><span style="font-size:18px;">首先计算 M = (L+R)/2，左子区间为[L,M]，右子区间为[M+1,R]，然后如果子区间不满足条件就递归分解。</span></div>
<div style="text-align:left;"><span style="font-size:18px;">以区间[1..13]的分解为例，分解结果见下图：</span></div>
<div style="text-align:left;"><span style="font-size:18px;"><img src="https://img-blog.csdn.net/20160822213352759?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><strong><br></strong></div>
<div style="text-align:left;"><span style="font-size:18px;"><strong>问题二：给定区间【L,R】，如何分解成上述给定的区间？</strong></span></div>
<div style="text-align:left;"><span style="font-size:18px;">对于给定区间[2,12]要如何分解成上述区间呢？</span></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;"><strong>分解方法一：自下而上合并——利于理解</strong></span></div>
<div style="text-align:left;"><span style="font-size:18px;"></span>
<div style="font-family:Arial;font-size:14px;line-height:26px;">先考虑树的最下层，将所有在区间[2,12]内的点选中，然后，若相邻的点的直接父节点是同一个，那么就用这个父节点代替这两个节点（父节点在上一层）。这样操作之后，本层最多剩下两个节点。若最左侧被选中的节点是它父节点的右子树，那么这个节点会被剩下。若最右侧被选中的节点是它的父节点的左子树，那么这个节点会被剩下。中间的所有节点都被父节点取代。对最下层处理完之后，考虑它的上一层，继续进行同样的处理。</div>
<div style="font-family:Arial;font-size:14px;line-height:26px;"><br></div>
<div style="font-family:Arial;font-size:14px;line-height:26px;">下图为n=13的线段树，区间[2,12]，按照上面的叙述进行操作的过程图：</div>
<div style="font-family:Arial;font-size:14px;line-height:26px;"><img src="https://img-blog.csdn.net/20150909172342229?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" style="border:none;"><img src="https://img-blog.csdn.net/20150909172350036?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" style="border:none;"><img src="https://img-blog.csdn.net/20150909172354161?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" style="border:none;"><img src="https://img-blog.csdn.net/20150909172357585?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" style="border:none;"><br></div>
<div style="font-family:Arial;font-size:14px;line-height:26px;">由图可以看出：在n=13的线段树中，[2,12]=[2] + [3,4] + [5,7] + [8,10] + [11,12] 。</div>
<div style="font-family:Arial;line-height:26px;"><strong><br></strong></div>
<div style="font-family:Arial;line-height:26px;"><strong><span style="font-size:18px;">分解方法二：自上而下分解——利于计算</span></strong></div>
<div style="font-family:Arial;font-size:14px;line-height:26px;"><img src="https://img-blog.csdn.net/20160822220027137?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br></div>
<div style="font-family:Arial;font-size:14px;line-height:26px;">首先对于区间[1,13]，计算(1+13)/2 = 7，于是将区间[2,12]“切割”成了[2,7]和[8,12]。</div>
<div style="font-family:Arial;font-size:14px;line-height:26px;"><img src="https://img-blog.csdn.net/20160822220059591?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br></div>
<div style="font-family:Arial;font-size:14px;line-height:26px;">其中[2,7]处于节点[1,7]的位置，[2,7] &lt; [1,7] 所以继续分解，计算(1+7)/2 = 4, 于是将[2,7] 切割成[2,4]和[5,7]。</div>
<div style="font-family:Arial;font-size:14px;line-height:26px;"><img src="https://img-blog.csdn.net/20160822220118296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br></div>
<div style="font-family:Arial;font-size:14px;line-height:26px;">[5,7]处于节点[5,7]的位置，所以不用继续分解，[2,4]处于区间[1,4]的位置，所以继续分解成[2]和[3,4]。</div>
<img src="https://img-blog.csdn.net/20160822220140874?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br></div>
<div style="text-align:left;">
<div style="text-align:left;"><span style="font-size:18px;">最后【2】 &lt; 【1,2】，所以计算(1+2)/2=1 ，将【2】用1切割，左侧为空，右侧为【2】</span></div>
<div style="text-align:left;"><span style="font-size:18px;"><img src="https://img-blog.csdn.net/20160822220311424?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;">当然程序是递归计算的，不是一层一层计算的，上图只表示计算方法，不代表计算顺序。</span></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;"><strong>问题三：如何进行区间统计？</strong></span></div>
<div style="text-align:left;"><span style="font-size:18px;">假设这13个数为1,2,3,4,1,2,3,4,1,2,3,4,1. 在区间之后标上该区间的数字之和：</span></div>
<div style="text-align:left;"><span style="font-size:18px;"><img src="https://img-blog.csdn.net/20160822221733583?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;">如果要计算[2,12]的和，按照之前的算法：</span></div>
<div style="text-align:left;"><span style="font-size:18px;"><span style="font-family:Arial;font-size:14px;line-height:26px;">[2,12]=[2] + [3,4] + [5,7] + [8,10] + [11,12]</span></span></div>
<div style="text-align:left;"><span style="font-size:18px;"><span style="font-family:Arial;font-size:14px;line-height:26px;">&nbsp; 29 &nbsp;= 2 + 7 + 6 + 7 + 7</span></span></div>
<div style="text-align:left;"><span style="font-size:18px;"><span style="font-family:Arial;font-size:14px;line-height:26px;">计算5个数的和就可以算出[2,12]的值。</span></span></div>
<div style="text-align:left;"><br></div>
<div style="text-align:left;"><span style="font-size:18px;"><strong>问题四：如何进行点修改？</strong></span></div>
<div style="text-align:left;"><span style="font-size:18px;">假设把A[6]+=7 ,看看哪些区间需要修改？[6],[5,6],[5,7],[1,7],[1,13]这些区间全部都需要+7.其余所有区间都不用动。</span></div>
<div style="text-align:left;"><span style="font-size:18px;">于是，这颗线段树中，点修改最多修改5个线段树元素（每层一个）。</span></div>
<div style="text-align:left;"><span style="font-size:18px;">下图中，修改后的元素用蓝色表示。</span></div>
<div style="text-align:left;"><span style="font-size:18px;"><img src="https://img-blog.csdn.net/20160822222554087?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br></span></div>
<div style="text-align:left;"><span style="font-size:18px;"><strong>问题五：存储结构是怎样的？</strong></span></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
<div style="text-align:left;"><span style="font-size:14px;">线段树是一种二叉树，当然可以像一般的树那样写成结构体，指针什么的。</span></div>
<div style="text-align:left;"><span style="font-size:14px;">但是它的优点是，它也可以用数组来实现树形结构，可以大大简化代码。</span></div>
<div style="text-align:left;"><span style="font-size:14px;">数组形式适合在编程竞赛中使用，在已经知道线段树的最大规模的情况下，直接开足够空间的数组，然后在上面建立线段树。<br>
简单的记法： 足够的空间 = 数组大小n的四倍。 <br>
实际上足够的空间 =&nbsp; （n向上扩充到最近的2的某个次方）的两倍。<br>
举例子：假设数组长度为5，就需要5先扩充成8，8*2=16.线段树需要16个元素。如果数组元素为8，那么也需要16个元素。<br>
所以线段树需要的空间是n的两倍到四倍之间的某个数，一般就开4*n的空间就好，如果空间不够，可以自己算好最大值来省点空间。<br><br></span></div>
<div style="text-align:left;"><span style="font-size:14px;">怎么用数组来表示一颗二叉树呢？假设某个节点的编号为v,那么它的左子节点编号为2*v，右子节点编号为2*v+1。</span></div>
<div style="text-align:left;"><span style="font-size:14px;">然后规定根节点为1.这样一颗二叉树就构造完成了。通常2*v在代码中写成 v&lt;&lt;1 。 2*v+1写成 v&lt;&lt;1|1 。</span></div>
<div style="text-align:left;"><span style="font-size:18px;"><strong><br></strong></span></div>
<div style="text-align:left;"><span style="font-size:18px;"><strong></strong></span></div>
<div style="font-family:Arial;font-size:14px;"><span style="font-size:18px;"><strong>问题六：代码中如何实现？</strong></span></div>
<div style="font-family:Arial;font-size:14px;"><span style="font-size:18px;"></span>
<p style="line-height:26px;">
</p>
<p style="line-height:26px;">
<strong>(0)定义：</strong></p>
<div style="line-height:26px;">
<div class="dp-highlighter bg_cpp" style="font-family:Consolas, 'Courier New', Courier, mono, serif;font-size:12px;">
<div class="bar">
<div class="tools" style="font-size:9px;line-height:normal;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;color:#C0C0C0;border-left:3px solid rgb(153,153,153);">
<strong>[cpp]</strong>&nbsp;<a href="http://blog.csdn.net/zearot/article/details/48299459#" target="_blank" rel="nofollow noopener" class="ViewSource" title="view plain" style="color:rgb(160,160,160);text-decoration:none;border:none;font-size:9px;">view
 plain</a>&nbsp;<a href="http://blog.csdn.net/zearot/article/details/48299459#" target="_blank" rel="nofollow noopener" class="CopyToClipboard" title="copy" style="color:rgb(160,160,160);text-decoration:none;border:none;font-size:9px;">copy</a>
<div style="width:27px;z-index:99;">
</div>
&nbsp;
<div style="width:29px;z-index:99;">
</div>
&nbsp;<div style="position: absolute; left: 631px; top: 7638px; width: 16px; height: 16px; z-index: 99;"><embed id="ZeroClipboardMovie_1" src="https://csdnimg.cn/public/highlighter/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="16" height="16" name="ZeroClipboardMovie_1" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=1&amp;width=16&amp;height=16" wmode="transparent"></div><div style="position: absolute; left: 631px; top: 7638px; width: 16px; height: 16px; z-index: 99;"><embed id="ZeroClipboardMovie_5" src="https://csdnimg.cn/public/highlighter/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="16" height="16" name="ZeroClipboardMovie_5" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=5&amp;width=16&amp;height=16" wmode="transparent"></div></div>
</div>
<ol start="1" class="dp-cpp" style="border:none;"><li class="alt" style="color:inherit;border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;"><span class="preprocessor" style="color:#808080;border:none;">#define&nbsp;maxn&nbsp;100007&nbsp;&nbsp;//元素总个数</span><span style="border:none;">&nbsp;&nbsp;</span></span></li><li style="border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="border:none;"><span class="datatypes" style="color:rgb(46,139,87);border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;Sum[maxn&lt;&lt;2];<span>//Sum求和，开四倍空间</span></span><span style="border:none;"></span></span></li><li class="alt" style="border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="border:none;"><span class="datatypes" style="color:rgb(46,139,87);border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;A[maxn],n;//<span>存原数组下标[1，n]</span></span><span style="color:#000000;border:none;"><br></span></span></li></ol></div>
</div>
<p style="line-height:26px;">
<strong>(1)建树：</strong></p>
<div style="line-height:26px;">
<div class="dp-highlighter bg_cpp" style="font-family:Consolas, 'Courier New', Courier, mono, serif;font-size:12px;">
<div class="bar">
<div class="tools" style="font-size:9px;line-height:normal;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;color:#C0C0C0;border-left:3px solid rgb(153,153,153);">
<strong>[cpp]</strong>&nbsp;<a href="http://blog.csdn.net/zearot/article/details/48299459#" target="_blank" rel="nofollow noopener" class="ViewSource" title="view plain" style="color:rgb(160,160,160);text-decoration:none;border:none;font-size:9px;">view
 plain</a>&nbsp;<a href="http://blog.csdn.net/zearot/article/details/48299459#" target="_blank" rel="nofollow noopener" class="CopyToClipboard" title="copy" style="color:rgb(160,160,160);text-decoration:none;border:none;font-size:9px;">copy</a>
<div style="width:27px;z-index:99;">
</div>
&nbsp;
<div style="width:29px;z-index:99;">
</div>
&nbsp;<div style="position: absolute; left: 631px; top: 7807px; width: 16px; height: 16px; z-index: 99;"><embed id="ZeroClipboardMovie_2" src="https://csdnimg.cn/public/highlighter/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="16" height="16" name="ZeroClipboardMovie_2" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=2&amp;width=16&amp;height=16" wmode="transparent"></div><div style="position: absolute; left: 631px; top: 7807px; width: 16px; height: 16px; z-index: 99;"><embed id="ZeroClipboardMovie_6" src="https://csdnimg.cn/public/highlighter/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="16" height="16" name="ZeroClipboardMovie_6" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=6&amp;width=16&amp;height=16" wmode="transparent"></div></div>
</div>
<ol start="1" class="dp-cpp" style="border:none;color:rgb(92,92,92);"><li class="alt" style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:inherit;line-height:18px;">
<span style="color:#000000;border:none;"><span style="border:none;">//PushUp函数更新节点信息，这里是求和</span></span></li><li style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:rgb(85,85,85);line-height:18px;">
<span style="color:#000000;border:none;"><span class="keyword" style="color:#0000FF;border:none;font-weight:bold;">void</span><span style="border:none;">&nbsp;PushUp(</span><span class="datatypes" style="color:#2e8b57;border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;rt){Sum[rt]=Sum[rt&lt;&lt;1]+Sum[rt&lt;&lt;1|1];}&nbsp;&nbsp;</span></span></li><li class="alt" style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:inherit;line-height:18px;">
<span style="color:#000000;border:none;"><span style="border:none;">//Build函数建立线段树<br></span></span></li><li style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:rgb(85,85,85);line-height:18px;">
<span style="color:#000000;border:none;"><span class="keyword" style="color:#0000FF;border:none;font-weight:bold;">void</span><span style="border:none;">&nbsp;Build(</span><span class="datatypes" style="color:#2e8b57;border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;l,</span><span class="datatypes" style="color:#2e8b57;border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;r,</span><span class="datatypes" style="color:#2e8b57;border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;rt){
 //[l,r]表示当前节点区间，rt表示当前节点的实际存储位置</span><span style="border:none;">&nbsp;<br></span></span></li><li class="alt" style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:inherit;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="color:#0000FF;border:none;font-weight:bold;">if</span><span style="border:none;">(l==r)&nbsp;{</span><span>//<span>若到达叶节点</span></span><span style="border:none;">&nbsp;<br></span></span></li><li style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:rgb(85,85,85);line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sum[rt]=A[l];<span>//<span>存储A数组的值</span></span><span style="border:none;"><br></span></span></li><li class="alt" style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:inherit;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="color:#0000FF;border:none;font-weight:bold;">return</span><span style="border:none;">;&nbsp;&nbsp;</span></span></li><li style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:rgb(85,85,85);line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li class="alt" style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:inherit;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="color:#2e8b57;border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;m=(l+r)&gt;&gt;1;&nbsp;&nbsp;</span></span></li><li style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:rgb(85,85,85);line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;<span style="border:none;">//左右递归<br></span></span></li><li class="alt" style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:inherit;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;Build(l,m,rt&lt;&lt;1);&nbsp;&nbsp;</span></li><li style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:rgb(85,85,85);line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;Build(m+1,r,rt&lt;&lt;1|1);&nbsp;&nbsp;</span></li><li class="alt" style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:inherit;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp; //更新信息<span style="border:none;"><br></span></span></li><li style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:rgb(85,85,85);line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;PushUp(rt);&nbsp;&nbsp;</span></li><li class="alt" style="border-top:none;border-right:none;border-bottom:none;border-left:3px solid rgb(153,153,153);list-style:outside;color:inherit;line-height:18px;">
<span style="color:#000000;border:none;">}&nbsp;&nbsp;</span></li></ol></div>
<br></div>
<p style="line-height:26px;">
<strong>(2)点修改：</strong></p>
<div style="line-height:26px;">假设A[L]+=C:</div>
<div style="line-height:26px;">
<div class="dp-highlighter bg_cpp" style="font-family:Consolas, 'Courier New', Courier, mono, serif;font-size:12px;">
<div class="bar">
<div class="tools" style="font-size:9px;line-height:normal;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;color:#C0C0C0;border-left:3px solid rgb(153,153,153);">
<strong>[cpp]</strong>&nbsp;<a href="http://blog.csdn.net/zearot/article/details/48299459#" target="_blank" rel="nofollow noopener" class="ViewSource" title="view plain" style="color:rgb(160,160,160);text-decoration:none;border:none;font-size:9px;">view
 plain</a>&nbsp;<a href="http://blog.csdn.net/zearot/article/details/48299459#" target="_blank" rel="nofollow noopener" class="CopyToClipboard" title="copy" style="color:rgb(160,160,160);text-decoration:none;border:none;font-size:9px;">copy</a>
<div style="width:27px;z-index:99;">
</div>
&nbsp;
<div style="width:29px;z-index:99;">
</div>
&nbsp;<div style="position: absolute; left: 631px; top: 8260px; width: 16px; height: 16px; z-index: 99;"><embed id="ZeroClipboardMovie_3" src="https://csdnimg.cn/public/highlighter/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="16" height="16" name="ZeroClipboardMovie_3" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=3&amp;width=16&amp;height=16" wmode="transparent"></div><div style="position: absolute; left: 631px; top: 8260px; width: 16px; height: 16px; z-index: 99;"><embed id="ZeroClipboardMovie_7" src="https://csdnimg.cn/public/highlighter/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="16" height="16" name="ZeroClipboardMovie_7" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=7&amp;width=16&amp;height=16" wmode="transparent"></div></div>
</div>
<ol start="1" class="dp-cpp" style="border:none;"><li class="alt" style="color:inherit;border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;"><span class="keyword" style="color:#0000FF;border:none;font-weight:bold;">void</span><span style="border:none;">&nbsp;Update(</span><span class="datatypes" style="color:#2e8b57;border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;L,</span><span class="datatypes" style="color:#2e8b57;border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;C,</span><span class="datatypes" style="color:#2e8b57;border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;l,</span><span class="datatypes" style="color:#2e8b57;border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;r,</span><span class="datatypes" style="color:#2e8b57;border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;rt){//[l,r]表示当前区间，rt是当前节点编号</span><span class="comment" style="border:none;">//l,r表示当前节点区间，rt表示当前节点编号</span><span style="border:none;">&nbsp;&nbsp;</span></span></li><li style="border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="border:none;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="color:#0000FF;border:none;font-weight:bold;">if</span><span style="border:none;">(l==r){<span style="color:#000140;">//到达叶节点，修改叶节点的值</span></span></span></li><li class="alt" style="color:inherit;border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sum[rt]+=C;&nbsp;&nbsp;</span></li><li style="color:rgb(85,85,85);border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="color:#0000FF;border:none;font-weight:bold;">return</span><span style="border:none;">;&nbsp;&nbsp;</span></span></li><li class="alt" style="color:inherit;border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li style="color:rgb(85,85,85);border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="color:#2e8b57;border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;m=(l+r)&gt;&gt;1;&nbsp;&nbsp;</span></span></li><li class="alt" style="border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp; &nbsp;</span><span style="border:none;"><span>//根据条件判断往左子树调用还是往右</span></span></li><li style="color:rgb(85,85,85);border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="color:#0000FF;border:none;font-weight:bold;">if</span><span style="border:none;">(L&nbsp;&lt;=&nbsp;m)&nbsp;Update(L,C,l,m,rt&lt;&lt;1);&nbsp;&nbsp;</span></span></li><li class="alt" style="color:inherit;border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="color:#0000FF;border:none;font-weight:bold;">else</span><span style="border:none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Update(L,C,m+1,r,rt&lt;&lt;1|1);&nbsp;&nbsp;</span></span></li><li style="border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;PushUp(rt);</span><span style="border:none;"><span>//子节点的信息更新了，所以本节点也要更新信息</span></span></li><li class="alt" style="color:inherit;border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">} &nbsp;&nbsp;</span></li></ol></div>
</div>
<div style="line-height:26px;">
<p>
点修改其实可以写的更简单，只需要把一路经过的Sum都+=C就行了，不过上面的代码更加规范，在题目更加复杂的时候，按照格式写更不容易错。</p>
<p>
<strong><br></strong></p>
<p>
<strong>(3)区间查询（本题为求和）：</strong></p>
</div>
<div style="line-height:26px;">询问A[L..R]的和</div>
<div style="line-height:26px;">注意到，整个函数的递归过程中，L,R是不变的。</div>
<div style="line-height:26px;">首先如果当前区间[l,r]在[L,R]内部，就直接累加答案</div>
<div style="line-height:26px;">如果左子区间与[L,R]有重叠，就递归左子树，右子树同理。</div>
<div style="line-height:26px;">
<div class="dp-highlighter bg_cpp" style="font-family:Consolas, 'Courier New', Courier, mono, serif;font-size:12px;">
<div class="bar">
<div class="tools" style="font-size:9px;line-height:normal;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;color:#C0C0C0;border-left:3px solid rgb(153,153,153);">
<strong>[cpp]</strong>&nbsp;<a href="http://blog.csdn.net/zearot/article/details/48299459#" target="_blank" rel="nofollow noopener" class="ViewSource" title="view plain" style="color:rgb(160,160,160);text-decoration:none;border:none;font-size:9px;">view
 plain</a>&nbsp;<a href="http://blog.csdn.net/zearot/article/details/48299459#" target="_blank" rel="nofollow noopener" class="CopyToClipboard" title="copy" style="color:rgb(160,160,160);text-decoration:none;border:none;font-size:9px;">copy</a>
<div style="width:27px;z-index:99;">
</div>
&nbsp;
<div style="width:29px;z-index:99;">
</div>
&nbsp;<div style="position: absolute; left: 631px; top: 8803px; width: 16px; height: 16px; z-index: 99;"><embed id="ZeroClipboardMovie_4" src="https://csdnimg.cn/public/highlighter/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="16" height="16" name="ZeroClipboardMovie_4" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=4&amp;width=16&amp;height=16" wmode="transparent"></div><div style="position: absolute; left: 631px; top: 8803px; width: 16px; height: 16px; z-index: 99;"><embed id="ZeroClipboardMovie_8" src="https://csdnimg.cn/public/highlighter/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="16" height="16" name="ZeroClipboardMovie_8" align="middle" allowscriptaccess="always" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=8&amp;width=16&amp;height=16" wmode="transparent"></div></div>
</div>
<ol start="1" class="dp-cpp" style="border:none;"><li class="alt" style="border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="border:none;"><span class="datatypes" style="color:rgb(46,139,87);border:none;font-weight:bold;">int</span><span style="color:#000000;border:none;">&nbsp;Query(</span><span class="datatypes" style="color:rgb(46,139,87);border:none;font-weight:bold;">int</span><span style="color:#000000;border:none;">&nbsp;L,</span><span class="datatypes" style="color:rgb(46,139,87);border:none;font-weight:bold;">int</span><span style="color:#000000;border:none;">&nbsp;R,</span><span class="datatypes" style="color:rgb(46,139,87);border:none;font-weight:bold;">int</span><span style="color:#000000;border:none;">&nbsp;l,</span><span class="datatypes" style="color:rgb(46,139,87);border:none;font-weight:bold;">int</span><span style="color:#000000;border:none;">&nbsp;r,</span><span class="datatypes" style="color:rgb(46,139,87);border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;rt){<span style="color:#000140;">//[L,R]表示操作区间，[l,r]表示当前区间，rt:当前节点编号</span></span><span style="color:#000000;border:none;"></span></span></li><li style="color:rgb(85,85,85);border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="color:#0000FF;border:none;font-weight:bold;">if</span><span style="border:none;">(L&nbsp;&lt;=&nbsp;l&nbsp;&amp;&amp;&nbsp;r&nbsp;&lt;=&nbsp;R){&nbsp;&nbsp;</span></span></li><li class="alt" style="border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp; &nbsp; &nbsp; &nbsp;</span><span style="border:none;"><span>//在区间内直接返回</span></span></li><li style="color:rgb(85,85,85);border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="color:#0000FF;border:none;font-weight:bold;">return</span><span style="border:none;">&nbsp;Sum[rt];&nbsp;&nbsp;</span></span></li><li class="alt" style="color:inherit;border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li style="color:rgb(85,85,85);border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="color:#2e8b57;border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;m=(l+r)&gt;&gt;1;
 &nbsp;</span></span></li><li class="alt" style="color:inherit;border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp; &nbsp; //左子区间:[l,m] 右子区间：[m+1,r] &nbsp;求和区间:[L,R]</span></li><li style="border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp; &nbsp;</span><span style="border:none;"><span style="color:#000140;">//累加答案</span></span></li><li class="alt" style="color:inherit;border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="datatypes" style="color:#2e8b57;border:none;font-weight:bold;">int</span><span style="border:none;">&nbsp;ANS=0;&nbsp;&nbsp;</span></span></li><li style="color:rgb(85,85,85);border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="color:#0000FF;border:none;font-weight:bold;">if</span><span style="border:none;">(L&nbsp;&lt;=&nbsp;m)&nbsp;ANS+=Query(L,R,l,m,rt&lt;&lt;1);//左子区间与[L,R]有重叠，递归</span></span></li><li class="alt" style="color:inherit;border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="color:#0000FF;border:none;font-weight:bold;">if</span><span style="border:none;">(R&nbsp;&gt;&nbsp;&nbsp;m)&nbsp;ANS+=Query(L,R,m+1,r,rt&lt;&lt;1|1);
 //右子区间与[L,R]有重叠，递归</span></span></li><li style="color:rgb(85,85,85);border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword" style="color:#0000FF;border:none;font-weight:bold;">return</span><span style="border:none;">&nbsp;ANS;&nbsp;&nbsp;</span></span></li><li class="alt" style="color:inherit;border-style:none none none solid;border-left-width:3px;border-left-color:rgb(153,153,153);list-style:outside;line-height:18px;">
<span style="color:#000000;border:none;">} &nbsp;&nbsp;</span></li></ol></div>
</div>
</div>
<div class="bdsharebuttonbox tracking-ad bdshare-button-style0-16">
</div>
<div style="text-align:left;"><span style="font-size:14px;"><br></span><br><br></div>
<div style="text-align:left;"><span style="font-size:18px;"><span style="font-size:24px;">最后：<br><br><span style="font-size:14px;">线段树还有更多的用法，比如区间修改，扫描线，非递归写法等 </span><br></span></span></div>
<div style="text-align:left;"><span style="font-size:18px;"><br></span></div>
</div>
<div style="text-align:left;"><br></div>
                                    </div>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>算法和数据结构的分类和总结</title>
    <url>/2019/11/18/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>ps:我忘了我的blog自带目录，浪费时间撸了目录</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="#数据结构">数据结构</a><ul>
<li><a href="#队列，栈">队列，栈</a></li>
<li><a href="#优先队列">优先队列</a></li>
<li><a href="#并查集">并查集</a></li>
<li><a href="#树状数组">树状数组</a></li>
<li><a href="#字典树">字典树</a></li>
<li><a href="#线段树">线段树</a></li>
<li><a href="#后缀树组">后缀树组</a></li>
</ul>
</li>
<li><a href="#算法相关的topics">算法相关的topics</a><ul>
<li><a href="#求最优解">求最优解</a><ul>
<li><a href="#dp">dp</a></li>
<li><a href="#贪心">贪心</a><ul>
<li><a href="#区间贪心">区间贪心</a>   </li>
</ul>
</li>
</ul>
</li>
<li><a href="#求遍历解">求遍历解</a><ul>
<li><a href="#DFS">DFS</a></li>
<li><a href="#BFS">BFS</a></li>
<li><a href="#回溯">回溯</a></li>
</ul>
</li>
<li><a href="#分治">分治</a><ul>
<li><a href="#数列分治">数列分治</a></li>
</ul>
</li>
<li><a href="#图论">图论</a><ul>
<li><a href="#最小生成树">最小生成树</a></li>
<li><a href="#单源最短路径">单源最短路径</a></li>
</ul>
</li>
<li><a href="#数论">数论</a><ul>
<li><a href="#辗转相除法">辗转相除法</a></li>
<li><a href="#素数">素数</a></li>
<li><a href="#快速幂">快速幂</a></li>
</ul>
</li>
<li><a href="#网络流">网络流</a><ul>
<li><a href="#最大流与最小割">最大流与最小割</a></li>
</ul>
</li>
<li><a href="#计算几何">计算几何</a><ul>
<li><a href="#计算几何">极限</a></li>
</ul>
</li>
<li><a href="#字符串">字符串</a><ul>
<li><a href="#字符串匹配">字符串匹配</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#字符串匹配">other_tricks</a><ul>
<li><a href="#字符串匹配">尺取</a></li>
<li><a href="#字符串匹配">反转</a></li>
<li><a href="#弹性碰撞">弹性碰撞</a><br/>
<br/>
<br/>

</li>
</ul>
</li>
</ul>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="队列，栈"><a href="#队列，栈" class="headerlink" title="队列，栈"></a>队列，栈</h3><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><pre><code>常见于不相交集合的查询和合并问题</code></pre><p>具体见<a href="1">union-find入门</a></p>
<h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><pre><code>1.简而言之就是用数组来模拟树形结构，避免建树的开销。
2.主要用于解决区间查询/更新/求和，和线段树的功能基本一致
与线段树比较：树状数组更简单，但是功能有限，没有线段树全能</code></pre><h3 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h3><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><pre><code>主要用来解决区间查询/修改/更新/求和</code></pre><p>具体见<a href="https://shaojintian.cn/2019/11/18/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%85%A5%E9%97%A8-%E4%BE%8B%E9%A2%98/" target="_blank" rel="noopener">线段树入门</a></p>
<h3 id="后缀树组"><a href="#后缀树组" class="headerlink" title="后缀树组"></a>后缀树组</h3><pre><code>主要解决字符串匹配问题</code></pre><p>具体见<a href="1">后缀树组</a></p>
<br/>

<h2 id="算法相关的topics"><a href="#算法相关的topics" class="headerlink" title="算法相关的topics"></a>算法相关的topics</h2><h3 id="求最优解"><a href="#求最优解" class="headerlink" title="求最优解"></a>求最优解</h3><h4 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h4><pre><code>状态转移方程</code></pre><h4 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h4><pre><code>贪心选择性质</code></pre><h5 id="区间贪心"><a href="#区间贪心" class="headerlink" title="区间贪心"></a>区间贪心</h5><h3 id="求遍历解"><a href="#求遍历解" class="headerlink" title="求遍历解"></a>求遍历解</h3><h4 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h4><h4 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h4><h4 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h4><h3 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h3><h4 id="数列分治"><a href="#数列分治" class="headerlink" title="数列分治"></a>数列分治</h4><h3 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h3><h4 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4><h4 id="单源最短路径"><a href="#单源最短路径" class="headerlink" title="单源最短路径"></a>单源最短路径</h4><h3 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h3><h4 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h4><h4 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h4><h4 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h4><h3 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h3><h4 id="最大流与最小割"><a href="#最大流与最小割" class="headerlink" title="最大流与最小割"></a>最大流与最小割</h4><h3 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h3><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h4><h2 id="other-tricks"><a href="#other-tricks" class="headerlink" title="other_tricks"></a>other_tricks</h2><h3 id="尺取法"><a href="#尺取法" class="headerlink" title="尺取法"></a>尺取法</h3><h3 id="弹性碰撞"><a href="#弹性碰撞" class="headerlink" title="弹性碰撞"></a>弹性碰撞</h3>]]></content>
  </entry>
  <entry>
    <title>Adaboost提升方法</title>
    <url>/2019/11/18/Adaboost%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[  <p><strong>相关文章：</strong></p>

  <ul>
  <li><strong><a href="http://blog.csdn.net/fuqiuai/article/details/79456971" rel="nofollow" target="_blank">数据挖掘领域十大经典算法之—C4.5算法（超详细附代码）</a></strong></li>
  <li><strong><a href="http://blog.csdn.net/fuqiuai/article/details/79458331" rel="nofollow" target="_blank">数据挖掘领域十大经典算法之—K-Means算法（超详细附代码）</a></strong></li>
  <li><strong><a href="http://blog.csdn.net/fuqiuai/article/details/79483057" rel="nofollow" target="_blank">数据挖掘领域十大经典算法之—SVM算法（超详细附代码）</a></strong></li>
  <li><strong><a href="http://blog.csdn.net/fuqiuai/article/details/79484998" rel="nofollow" target="_blank">数据挖掘领域十大经典算法之—Apriori算法</a></strong></li>
  <li><strong><a href="http://blog.csdn.net/fuqiuai/article/details/79484421" rel="nofollow" target="_blank">数据挖掘领域十大经典算法之—EM算法</a></strong></li>
  <li><strong><a href="http://blog.csdn.net/fuqiuai/article/details/79484929" rel="nofollow" target="_blank">数据挖掘领域十大经典算法之—PageRank算法</a></strong></li>
  <li><strong><a href="http://blog.csdn.net/fuqiuai/article/details/79458648" rel="nofollow" target="_blank">数据挖掘领域十大经典算法之—K-邻近算法/kNN（超详细附代码）</a></strong></li>
  <li><strong><a href="http://blog.csdn.net/fuqiuai/article/details/79458943" rel="nofollow" target="_blank">数据挖掘领域十大经典算法之—朴素贝叶斯算法（超详细附代码）</a></strong></li>
  <li><strong><a href="http://blog.csdn.net/fuqiuai/article/details/79469412" rel="nofollow" target="_blank">数据挖掘领域十大经典算法之—CART算法（超详细附代码）</a></strong></li>
  </ul>
</blockquote>

<h3 id="简介"><a name="t0"></a>简介</h3>

<p>Adaboost算法是一种提升方法，将多个弱分类器，组合成强分类器。 <br>
AdaBoost，是英文”Adaptive Boosting“（自适应增强）的缩写，由Yoav Freund和Robert Schapire在1995年提出。 <br>
它的自适应在于：前一个弱分类器分错的样本的权值（样本对应的权值）会得到加强，权值更新后的样本再次被用来训练下一个新的弱分类器。在每轮训练中，用总体（样本总体）训练新的弱分类器，产生新的样本权值、该弱分类器的话语权，一直迭代直到达到预定的错误率或达到指定的最大迭代次数。 <br>
总体——样本——个体三者间的关系需要搞清除 <br>
总体N。样本：｛ni｝i从1到M。个体：如n1=（1,2），样本n1中有两个个体。</p>

<h3 id="算法原理"><a name="t1"></a><a target="_blank"></a>算法原理</h3>

<p>（1）初始化训练数据（每个样本）的权值分布：如果有N个样本，则每一个训练的样本点最开始时都被赋予相同的权重：1/N。 <br>
（2）训练弱分类器。具体训练过程中，如果某个样本已经被准确地分类，那么在构造下一个训练集中，它的权重就被降低；相反，如果某个样本点没有被准确地分类，那么它的权重就得到提高。同时，得到弱分类器对应的话语权。然后，更新权值后的样本集被用于训练下一个分类器，整个训练过程如此迭代地进行下去。 <br>
（3）将各个训练得到的弱分类器组合成强分类器。各个弱分类器的训练过程结束后，分类误差率小的弱分类器的话语权较大，其在最终的分类函数中起着较大的决定作用，而分类误差率大的弱分类器的话语权较小，其在最终的分类函数中起着较小的决定作用。换言之，误差率低的弱分类器在最终分类器中占的比例较大，反之较小。</p>

<h3 id="算法流程"><a name="t2"></a><a target="_blank"></a>算法流程</h3>

<p><strong>第一步：</strong> <br>
    初始化训练数据（每个样本）的权值分布。每一个训练样本，初始化时赋予同样的权值w=1/N。N为样本总数。 <br>
<img src="https://img-blog.csdn.net/20160603094805020" alt="这里写图片描述" title=""> <br>
D1表示，第一次迭代每个样本的权值。w11表示，第1次迭代时的第一个样本的权值。 <br>
N为样本总数。 <br>
<strong>第二步：进行多次迭代，m=1，2….M。m表示迭代次数。</strong> <br>
    a)使用具有权值分布Dm（m=1,2,3…N)的训练样本集进行学习，得到弱的分类器。 <br>
    <img src="https://img-blog.csdn.net/20160603095026458" alt="这里写图片描述" title=""> <br>
    该式子表示，第m次迭代时的弱分类器，将样本x要么分类成-1，要么分类成1.<strong>那么根据什么准则得到弱分类器？</strong> <br>
    准则：该弱分类器的误差函数最小，也就是分错的样本对应的 权值之和，最小。 <br>
    <img src="https://img-blog.csdn.net/20160603095211334" alt="这里写图片描述" title=""> <br>
    b)计算弱分类器Gm（x）的话语权，话语权am表示Gm（x）在最终分类器中的重要程度。其中em，为上步中的εm（误差函数的值） <br>
    <img src="https://img-blog.csdn.net/20160603095517983" alt="这里写图片描述" title=""> <br>
    该式是随em减小而增大。即误差率小的分类器，在最终分类器的 重要程度大。 <br>
    c）更新训练样本集的权值分布。用于下一轮迭代。其中，被误分的样本的权值会增大，被正确分的权值减小。 <br>
    <img src="https://img-blog.csdn.net/20160603095819805" alt="这里写图片描述" title=""> <br>
    Dm+1是用于下次迭代时样本的权值，Wm+1,i是下一次迭代时，第i个样本的权值。 <br>
    其中，yi代表第i个样本对应的类别（1或-1），Gm（xi）表示弱分类器对样本xi的分类（1或-1）。若果分对，yi*Gm（xi）的值为1，反之为-1。其中Zm是归一化因子，使得所有样本对应的权值之和为1. <br>
    <img src="https://img-blog.csdn.net/20160603100059256" alt="这里写图片描述" title=""> <br>
    该公式并不难，仔细看看、想想。 <br>
<strong>第三步</strong>迭代完成后，组合弱分类器。 <br>
首先，<img src="https://img-blog.csdn.net/20160603100503698" alt="这里写图片描述" title=""> <br>
然后，加个sign函数，该函数用于求数值的正负。数值大于0，为1。小于0，为-1.等于0，为0.得到最终的强分类器G（x） <br>
<img src="https://img-blog.csdn.net/20160603100710683" alt="这里写图片描述" title=""></p>

<p><strong>*额外</strong>（关于权值、话语权、弱分类器准则的公式，想深入了解的可以看看。使用的话，知道上面的内容已经足够） <br>
利用前向分布加法模型（简单说，就是把一起求n个问题，转化为每次求1个问题，再其基础上，求下一个问题，如此迭代n次），adaboost算法可以看成，求式子的最小。tn时样本n对应的正确分类，fm是前m个分类器的结合（这里乘了1/2，因为博主看的文章的am是1/2*log(~~)，这个无所谓，无非是多个1/2少个1/2。 <br>
<img src="https://img-blog.csdn.net/20160603101055700" alt="这里写图片描述" title=""> <br>
<img src="https://img-blog.csdn.net/20160603101347421" alt="这里写图片描述" title=""> <br>
然后，假设前m-1个相关的参数已经确定。通过化简E这个式子，我们可以得到： <br>
<img src="https://img-blog.csdn.net/20160603101635860" alt="这里写图片描述" title=""> <br>
其中，是一个常量。 <br>
<img src="https://img-blog.csdn.net/20160603102223581" alt="这里写图片描述" title=""> <br>
然后， <br>
<img src="https://img-blog.csdn.net/20160603101757939" alt="这里写图片描述" title=""> <br>
其中，Tm是分类正确的样本的权值，Mm是分类错误的样本的权值。式子不算难，自己多看几遍就能理解了。 <br>
到现在，可以看出，最小化E，其实就是最小化 <br>
<img src="https://img-blog.csdn.net/20160603102035112" alt="这里写图片描述" title=""> <br>
这个式子是什么？看看前面，这个就是找弱分类器时的准则！ <br>
然后得到了弱分类器ym后，我们可以进推导出am和样本的权值。这里给出am的推导过程（手写的，字很烂）其中，ε是<img src="https://img-blog.csdn.net/20160603102537539" alt="这里写图片描述" title=""> <br>
该图中，最右边的是“+exp（-am/2)*1”，写得太乱（—_—) <br>
<img src="https://img-blog.csdn.net/20160603102332865" alt="这里写图片描述" title=""> <br>
最后求出来的am没有1/2,这个无所谓。因为这里定义fm是多乘了个1/2。</p>



<h3 id="优点"><a name="t3"></a>优点</h3>

<p>（1）精度很高的分类器 <br>
（2）提供的是框架，可以使用各种方法构建弱分类器 <br>
（3）简单，不需要做特征筛选 <br>
（4）不用担心过度拟合</p>



<h3 id="实际应用"><a name="t4"></a>实际应用</h3>

<p>（1）用于二分类或多分类 <br>
（2）特征选择 <br>
（3）分类人物的baseline</p>



<h3 id="代码"><a name="t5"></a>代码</h3>

<p>代码已在<a href="https://github.com/fuqiuai/lihang_algorithms/blob/master/AdaBoost/AdaBoost_sklearn.py" rel="nofollow" target="_blank">github</a>上实现</p>




<h3 id="运行结果"><a name="t6"></a>运行结果</h3>

<p><img src="https://raw.githubusercontent.com/fuqiuai/lihang_algorithms/master/imgs/Adaboost_sklearn_result_2.png" alt="这里写图片描述" title=""></p>            </div>
]]></content>
  </entry>
  <entry>
    <title>0-1bag</title>
    <url>/2019/11/18/0-1bag/</url>
    <content><![CDATA[<p>DP</p>
<p>状态转移方程：</p>
<p>m(i,j) = max(m[i][j] = m[i - 1][j] , m[i - 1][j - weight[i]] + value[i])    (weight[i] &lt;= j)<br>m(i,j)=m[i-1][j] (weight[i] &gt; j)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 500</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> weight[<span class="number">20</span> + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> value[<span class="number">20</span> + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">20</span> + <span class="number">1</span>][V + <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入物品个数:"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请分别输入"</span> &lt;&lt; n &lt;&lt; <span class="string">"个物品的重量和价值:"</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; weight[i] &gt;&gt; value[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入背包容量:"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;<span class="comment">//i==前i个包，1，2，3，····，i.     j=bag capacity </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (weight[i] &gt; j) &#123;</span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                f[i][j] = max(f[i - <span class="number">1</span>][j] ,f[i - <span class="number">1</span>][j - weight[i]] + value[i]);<span class="comment">//f[1][1] = 5;f[1][2]= 5 , f[1][5] =5</span></span><br><span class="line">                <span class="comment">//f[2][1] = f[1][1] =5 ; </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"背包能放的最大价值为:"</span> &lt;&lt; f[n][m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>靳天-每日说</title>
    <url>/2019/11/18/%E9%9D%B3%E5%A4%A9-%E6%AF%8F%E6%97%A5%E8%AF%B4/</url>
    <content><![CDATA[<p>2019<br>4月28日：命乃弱者借口，运乃强者谦词。<br>4月29日：真正的高贵，是优于过去的自己。<br>4月30日：保持专注，世界才会为你开路。</p>
<p>5月7日：早睡早起并且自信高效</p>
]]></content>
  </entry>
  <entry>
    <title>从零开始快速部署个人网站</title>
    <url>/2019/11/18/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>技术点：<br>            web server ：Apache<br>            中间协议：uWSGI<br>            web frame : Django</p>
<p>域名：shaojintian.ml</p>
<p>DNS：DNSmod</p>
]]></content>
  </entry>
  <entry>
    <title>计算机网络log2-网络分层的含义</title>
    <url>/2019/11/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Clog2-%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    <content><![CDATA[<h1 id="面试考点："><a href="#面试考点：" class="headerlink" title="面试考点："></a>面试考点：</h1><ol>
<li>ip addr → 不知道基本没有用Linux</li>
<li>ifconfig 和 ip addr 的区别吗？</li>
<li>CIDR</li>
<li>共有IP和私有IP</li>
<li>MAC地址</li>
<li>网络设备的状态标识</li>
</ol>
<h1 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h1><h2 id="核心："><a href="#核心：" class="headerlink" title="核心："></a>核心：</h2><ol>
<li>IP设计时犯的错误？</li>
</ol>
<p>低估了未来网络的发展，32位地址不够用。于是有了现在IPv6（128位）<br>分类错误。分成了5类。C类太少，B类太多。C类254个，网络都不够；D类6万多，给企业都太多。</p>
<ol start="2">
<li>那后来者如何弥补IP设计者犯的错误呢？</li>
</ol>
<p>CIDR，无类型域间选路。<br>打破原来几类地址设计的做法，将32位IP地址一分二，前者网络号，后者主机号。<br>如何分呢？<br>栗子：10.100.122.2/24<br>24 = 前24位是网络号，那么后8位就是主机号。<br>那如何用？<br>如发送行信息给 10.100.122.255<br>所有以 10.100.122… 开头的机器都能收到。<br>于是有了两个概念：<br>广播地址：10.100.122.255<br>子网掩码：255.255.255.0 -&gt; AND 得到网络号。</p>
<ol start="3">
<li>每一个城市都有人民广场，IP设计是如何解决的？</li>
</ol>
<p>公有IP地址和私有IP地址。<br>搭建世界人民都可以访问的网站，需要共有IP地址<br>搭建只有学校同学使用饿的网站，只要私有IP地址<br>例子1: Wi-Fi<br> 192.168.0.x 是最常用的私有 IP 地址<br>192.168.0 是网络号<br>192.168.0.1，往往就是你这个私有网络的出口地址<br>192.168.0.255 就是广播地址。一旦发送这个地址，整个 192.168.0 网络里面的所有机器都能收到。</p>
<p>例子2: 16.158.165.91/22</p>
<ol start="4">
<li>如何理解MAC地址？</li>
</ol>
<p>如果说IP是地址，有定位功能。那Mac就是身份证，唯一识别。</p>
<h2 id="琐碎："><a href="#琐碎：" class="headerlink" title="琐碎："></a>琐碎：</h2><ol start="5">
<li>讲了ABC，那是D类是什么？</li>
</ol>
<p>D 类是组播地址。使用这一类地址，属于某个组的机器都能收到。这有点类似在公司里面大家都加入了一个邮件组。发送邮件，加入这个组的都能收到。组播地址在后面讲述 VXLAN 协议的时候会提到。</p>
<ol start="6">
<li>IP地址scope是什么意思？</li>
</ol>
<p>对于 eth0 这张网卡来讲，是 global，说明这张网卡是可以对外的，可以接收来自各个地方的包。对于 lo 来讲，是 host，说明这张网卡仅仅可以供本机相互通信。</p>
<ol start="7">
<li>那lo是什么意思？</li>
</ol>
<p>lo 全称是loopback，又称环回接口，往往会被分配到 127.0.0.1 这个地址。这个地址用于本机通信，经过内核处理后直接返回，不会在任何网络中出现。</p>
<ol start="8">
<li><p>&lt; BROADCAST,MULTICAST,UP,LOWER_UP &gt; 是干什么的？</p>
</li>
<li><p>net_device flags，网络设备的状态标识。<br>UP 表示网卡处于启动的状态；<br>BROADCAST 表示这个网卡有广播地址，可以发送广播包；<br>MULTICAST 表示网卡可以发送多播包；<br>LOWER_UP 表示 L1 是启动的，也即网线插着呢。</p>
</li>
<li><p>MTU1500 是指什么意思呢？是哪一层的概念？</p>
</li>
</ol>
<p>最大传输单元 MTU 为 1500，这是以太网的默认值。<br>MTU 是二层 MAC 层的概念。MAC 层有 MAC 的头，以太网规定连 MAC 头带正文合起来，不允许超过 1500 个字节。</p>
<ol start="10">
<li>qdisc pfifo_fast 是什么意思呢？</li>
</ol>
<p>排队规则。规定数据包如何进出的。有pfifo, pfifo_fast. </p>
]]></content>
  </entry>
  <entry>
    <title>深入拆解JVM虚拟机1-JVM如何将java字节流转化为JAVA类的？</title>
    <url>/2019/11/18/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA1-JVM%E5%A6%82%E4%BD%95%E5%B0%86java%E5%AD%97%E8%8A%82%E6%B5%81%E8%BD%AC%E5%8C%96%E4%B8%BAJAVA%E7%B1%BB%E7%9A%84%EF%BC%9F/</url>
    <content><![CDATA[<p>JVM构架Architecture<br><img src="https://img-blog.csdnimg.cn/20190514004018156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="JVM构架Architecture"></p>
<p>JVM中的数据类型</p>
<p><img src="https://img-blog.csdnimg.cn/20190514004819729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>JAVA 参考类型</strong></p>
<p>数组类，类，接口，泛型</p>
<h2 id="加载，链接，初始化"><a href="#加载，链接，初始化" class="headerlink" title="加载，链接，初始化"></a><strong>加载，链接，初始化</strong></h2><p>1：加载<br>加载是指查找字节流，并且据此创建类的过程。加载需要借助类加载器。<br>JVM中使用双亲委派模型——-即接收到加载请求后，先由父类加载器加载，若父类加载器没有找到请求类，才有子类加载器加载。</p>
<p>2：链接</p>
<p>是指创建成的类合成至JVM中，使之能够执行的过程。<br>链接分为验证、准备和解析三个过程<br>a：验证：验证.class满足虚拟机的要求<br>b：准备：静态字段的内存分配<br>c：解析（非必要）：若字节码存在符号引用，则执行这些字节码之前，需要完成对这些符号引用的解析。</p>
<p>3：初始化<br>final 常量值直接由JAVA虚拟机初始化完成。<br>其余的常量的直接赋值和静态代码置于&lt;<clinit>clinit&gt;中<br>线程安全，只会初始化一次从而引出单例的延迟初始化</p>
<hr>
<p>上述流程完成后，类才成为可执行的状态。</p>
]]></content>
  </entry>
  <entry>
    <title>回溯法的8皇后问题</title>
    <url>/2019/11/18/%E5%9B%9E%E6%BA%AF%E6%B3%95%E7%9A%848%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> backtrack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queens_demo</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];<span class="comment">// 全局或成员变量, 下标表示行, 值表示 queen 存储在哪一列</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cal8queens</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123; <span class="comment">// 调用方式：cal8queens(0);</span></span><br><span class="line">	  <span class="keyword">if</span> (row == <span class="number">8</span>) &#123; <span class="comment">// 8 个棋子都放置好了，打印结果</span></span><br><span class="line">	    printQueens(result);</span><br><span class="line">	    <span class="keyword">return</span>; <span class="comment">// 8 行棋子都放好了，已经没法再往下递归了，所以就 return</span></span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="keyword">for</span> (<span class="keyword">int</span> column = <span class="number">0</span>; column &lt; <span class="number">8</span>; ++column) &#123; <span class="comment">// 每一行都有 8 中放法</span></span><br><span class="line">	    <span class="keyword">if</span> (isOk(row, column)) &#123; <span class="comment">// 有些放法不满足要求</span></span><br><span class="line">	      result[row] = column; <span class="comment">// 第 row 行的棋子放到了 column 列</span></span><br><span class="line">	      cal8queens(row+<span class="number">1</span>); <span class="comment">// 考察下一行</span></span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">boolean</span> <span class="title">isOk</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;<span class="comment">// 判断 row 行 column 列放置是否合适</span></span><br><span class="line">	  <span class="keyword">int</span> leftup = column - <span class="number">1</span>, rightup = column + <span class="number">1</span>;</span><br><span class="line">	  <span class="keyword">for</span> (<span class="keyword">int</span> i = row-<span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123; <span class="comment">// 逐行往上考察每一行</span></span><br><span class="line">	    <span class="keyword">if</span> (result[i] == column) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 第 i 行的 column 列有棋子吗？</span></span><br><span class="line">	    <span class="keyword">if</span> (leftup &gt;= <span class="number">0</span>) &#123; <span class="comment">// 考察左上对角线：第 i 行 leftup 列有棋子吗？</span></span><br><span class="line">	      <span class="keyword">if</span> (result[i] == leftup) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">if</span> (rightup &lt; <span class="number">8</span>) &#123; <span class="comment">// 考察右上对角线：第 i 行 rightup 列有棋子吗？</span></span><br><span class="line">	      <span class="keyword">if</span> (result[i] == rightup) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	    --leftup; ++rightup;</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printQueens</span><span class="params">(<span class="keyword">int</span>[] result)</span> </span>&#123; <span class="comment">// 打印出一个二维矩阵</span></span><br><span class="line">		System.out.println(<span class="string">"result:"</span>);</span><br><span class="line">	  <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; <span class="number">8</span>; ++row) &#123;</span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> column = <span class="number">0</span>; column &lt; <span class="number">8</span>; ++column) &#123;</span><br><span class="line">	      <span class="keyword">if</span> (result[row] == column) System.out.print(<span class="string">"Q "</span>);</span><br><span class="line">	      <span class="keyword">else</span> System.out.print(<span class="string">"* "</span>);</span><br><span class="line">	    &#125;</span><br><span class="line">	    System.out.println();</span><br><span class="line">	  &#125;</span><br><span class="line">	  System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		cal8queens(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>每次递归返回都会返回到上一层。</p>
<p>如果递归不到下一层，就会在当前层继续向后查询。</p>
<p>只有能填完整后也就是<br><img src="https://img-blog.csdnimg.cn/20190514173324347.png" alt="在这里插入图片描述"><br>就会输出一次结果。</p>
<p>然后继续根据状态空间树做DFS知道输出所有结果</p>
]]></content>
  </entry>
  <entry>
    <title>阻塞和非阻塞，同步和异步</title>
    <url>/2019/11/18/%E9%98%BB%E5%A1%9E%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E%EF%BC%8C%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post" style="height: 2598px; overflow: hidden;">
            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css">
                              <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css">
          <div class="htmledit_views" id="content_views">
            <h1 style="margin-top:10px;margin-bottom:10px;padding:0px;line-height:1.5;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);"><a name="t0"></a>阻塞和非阻塞，同步和异步</h1><h2 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:21px;line-height:1.5;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);"><a name="t1"></a>1 例子</h2><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">故事：老王烧开水。</p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。</p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">老王想了想，有好几种等待方式</p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">1.老王用水壶煮水，并且<span style="margin:0px;padding:0px;">站在那里</span>，<span style="margin:0px;padding:0px;">不管水开没开，每隔一定时间看看水开了没</span>。－<span style="margin:0px;padding:0px;">同步阻塞</span></p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">老王想了想，这种方法不够聪明。</p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">2.老王还是用水壶煮水，不再傻傻的站在那里看水开，<span style="margin:0px;padding:0px;">跑去寝室上网</span>，<span style="margin:0px;padding:0px;">但是还是会每隔一段时间过来看看水开了没有，水没有开就走人</span>。－<span style="margin:0px;padding:0px;">同步非阻塞</span></p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">老王想了想，现在的方法聪明了些，但是还是不够好。</p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">3.老王这次使用高大上的响水壶来煮水，<span style="margin:0px;padding:0px;">站在那里</span>，<span style="margin:0px;padding:0px;">但是不会再每隔一段时间去看水开，而是等水开了，水壶会自动的通知他</span>。－<span style="margin:0px;padding:0px;">异步阻塞</span></p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">老王想了想，不会呀，既然水壶可以通知我，那我为什么还要傻傻的站在那里等呢，嗯，得换个方法。</p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">4.老王还是使用响水壶煮水，<span style="margin:0px;padding:0px;">跑到客厅上网去</span>，等着响水壶<span style="margin:0px;padding:0px;">自己把水煮熟了以后通知他</span>。－<span style="margin:0px;padding:0px;">异步非阻塞</span></p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">老王豁然，这下感觉轻松了很多。</p><hr style="margin-top:0px;margin-bottom:0px;padding:0px;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><ul style="margin-bottom:0px;margin-left:30px;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;"><p style="margin:10px auto;"><span style="margin:0px;padding:0px;">同步和异步</span></p><p style="margin:10px auto;">同步就是烧开水，需要自己去轮询（每隔一段时间去看看水开了没），异步就是水开了，然后水壶会通知你水已经开了，你可以回来处理这些开水了。<br style="margin:0px;padding:0px;">同步和异步是相对于操作结果来说，会不会等待结果返回。</p></li><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;"><p style="margin:10px auto;"><span style="margin:0px;padding:0px;">阻塞和非阻塞</span></p><p style="margin:10px auto;">阻塞就是说在煮水的过程中，你不可以去干其他的事情，非阻塞就是在同样的情况下，可以同时去干其他的事情。阻塞和非阻塞是相对于线程是否被阻塞。</p></li></ul><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">其实，这两者存在本质的区别，它们的修饰对象是不同的。阻塞和非阻塞是指进程访问的数据如果尚未就绪，进程是否需要等待，简单说这相当于函数内部的实现区别，也就是未就绪时是直接返回还是等待就绪。<br style="margin:0px;padding:0px;">而同步和异步是指访问数据的机制,同步一般指主动请求并等待I/O操作完毕的方式,当数据就绪后在读写的时候必须阻塞,异步则指主动请求数据后便可以继续处理其它任务,随后等待I/O,操作完毕的通知,这可以使进程在数据读写时也不阻塞。</p><h2 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:21px;line-height:1.5;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);"><a name="t2"></a>2 详细介绍</h2><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">网络IO的模型大致包括下面几种</p><ul style="margin-bottom:0px;margin-left:30px;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;">同步模型（synchronous IO）<ul style="margin-bottom:0px;margin-left:30px;"><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;list-style:circle;">阻塞IO（bloking IO）</li><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;list-style:circle;">非阻塞IO（non-blocking IO）</li><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;list-style:circle;">多路复用IO（multiplexing IO）</li><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;list-style:circle;">信号驱动式IO（signal-driven IO）</li></ul></li><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;">异步IO（asynchronous IO）<ul style="margin-bottom:0px;margin-left:30px;"><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;list-style:circle;">异步IO</li></ul></li></ul><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">网络IO的本质是socket的读取，socket在linux系统被抽象为流，IO可以理解为对流的操作。对于一次IO访问，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间，所以一般会经历两个阶段：</p><ol style="margin-bottom:0px;padding-left:40px;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><li style="margin:0px 0px 1em;padding:0px;">等待所有数据都准备好或者一直在等待数据，有数据的时候将数据拷贝到系统内核；</li><li style="margin:0px 0px 1em;padding:0px;">将内核缓存中数据拷贝到用户进程中；</li></ol><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">对于socket流而言：</p><ol style="margin-bottom:0px;padding-left:40px;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><li style="margin:0px 0px 1em;padding:0px;">等待网络上的数据分组到达，然后被复制到内核的某个缓冲区；</li><li style="margin:0px 0px 1em;padding:0px;">把数据从内核缓冲区复制到应用进程缓冲区中；</li></ol><h3 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:16px;line-height:1.5;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);"><a name="t3"></a>2.1 阻塞IO</h3><h4 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:14px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);">2.1.1 介绍</h4><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">这也是最常用的模型，默认情况下所有的套接字都是&nbsp;<code style="margin:1px 5px;line-height:1.8;vertical-align:middle;padding:0px 5px;font-family:'Courier New', sans-serif;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);">阻塞</code>&nbsp;的；</p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><img src="http://odwv9d2u8.bkt.clouddn.com/17-4-12/26414081-file_1491994457423_13e6d.png" style="padding:0px;border:0px;max-width:700px;" alt=""></p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">我们把recvfrom函数视为系统调用，因为我们正区分进程和内核，系统调用一般都会从在应用进程空间中运行切换到内核空间中运行，一段时间后又再切换回来；</p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">我们可以从图中看到，应用进程从&nbsp;<code style="margin:1px 5px;line-height:1.8;vertical-align:middle;padding:0px 5px;font-family:'Courier New', sans-serif;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);">进行系统调用</code>&nbsp;到&nbsp;<code style="margin:1px 5px;line-height:1.8;vertical-align:middle;padding:0px 5px;font-family:'Courier New', sans-serif;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);">复制数据报到应用进程的缓冲区完成</code>&nbsp;的整段时间内是被阻塞的；在这个过程中，要么正确到达，要么系统调用被信号打断；直到数据报被复制到用户进程完成后，用户进程才解除阻塞的状态，当然，这是用户进程自己进行的阻塞；</p><h4 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:14px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);">2.1.2 优点和缺点</h4><ul style="margin-bottom:0px;margin-left:30px;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;">优点：能够及时返回数据，无延迟；方便调试；</li><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;">缺点：需要付出等待的代价；</li></ul><h3 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:16px;line-height:1.5;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);"><a name="t4"></a>2.2 非阻塞IO</h3><h4 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:14px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);">2.2.1 介绍</h4><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">非阻塞，当所请求的I/O操作非得把当前进程设置成睡眠才能完成时，不要把当前进程设置成睡眠，而是返回一个错误信息（数据报没有准备好的情况下），此时当前进程可以做其它的事情，不用阻塞；</p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><img src="http://odwv9d2u8.bkt.clouddn.com/17-4-12/27967427-file_1491997152954_10575.png" style="padding:0px;border:0px;max-width:700px;" alt=""></p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">从图中可以得知，前三次系统调用时都没有数据可以返回，内核均返回一个&nbsp;<code style="margin:1px 5px;line-height:1.8;vertical-align:middle;padding:0px 5px;font-family:'Courier New', sans-serif;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);">EWOULDBLOCK</code>，并且不会阻塞当前进程，直到第四次询问内核缓冲区是否有数据的时候，此时内核缓冲区中已经有一个准备好的数据，因此将内核数据复制到用户空间，此时系统调用则返回成功；</p><blockquote style="margin-top:10px;margin-bottom:10px;padding:5px 10px;background:rgb(255,255,255) none;border:2px solid rgb(239,239,239);min-height:35px;line-height:1.6em;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;"><p style="margin:10px auto;">当一个应用进程像这样对一个非阻塞socket循环调用&nbsp;<code style="margin:1px 5px;line-height:1.8;vertical-align:middle;padding:0px 5px;font-family:'Courier New', sans-serif;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);">recv/recvfrom</code>&nbsp;时，则称为轮询；应用进程持续轮询内核，以查看某个操作是否就绪，这么做往往消耗大量的CPU时间。</p></blockquote><h4 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:14px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);">2.2.2 优点和缺点</h4><ul style="margin-bottom:0px;margin-left:30px;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;"><p style="margin:10px auto;">优点：相较于阻塞模型，非阻塞不用再等待任务，而是把时间花费到其它任务上，也就是这个当前线程同时处理多个任务；</p></li><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;"><p style="margin:10px auto;">缺点：导致任务完成的响应延迟增大了，因为每隔一段时间才去执行询问的动作，但是任务可能在两个询问动作的时间间隔内完成，这会导致整体数据吞吐量的降低。</p></li></ul><h3 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:16px;line-height:1.5;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);"><a name="t5"></a>2.3 IO多路复用</h3><h4 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:14px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);">2.3.1 介绍</h4><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">有了I/O复用，我们就可以调用&nbsp;<code style="margin:1px 5px;line-height:1.8;vertical-align:middle;padding:0px 5px;font-family:'Courier New', sans-serif;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);">select或poll</code>，让其阻塞在两个系统调用（1.询问数据是否准备好并且直到数据准备好才返回；2.内核是否把数据全部复制完成到用户进程）中的某一个之上</p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><img src="http://odwv9d2u8.bkt.clouddn.com/17-4-12/2193057-file_1491998838696_160a3.png" style="padding:0px;border:0px;max-width:700px;" alt=""></p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">图中阻塞于&nbsp;<code style="margin:1px 5px;line-height:1.8;vertical-align:middle;padding:0px 5px;font-family:'Courier New', sans-serif;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);">select</code>&nbsp;调用，等待数据报套接字变为可读。当select返回套接字可读这一条件的时候，则调用&nbsp;<code style="margin:1px 5px;line-height:1.8;vertical-align:middle;padding:0px 5px;font-family:'Courier New', sans-serif;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);">recvfrom</code>&nbsp;把所读数据报复制到应用进程缓冲区；</p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">之前的同步非阻塞方式需要用户进程不停的轮询，但是IO多路复用不需要不停的轮询，而是派别人去帮忙循环查询多个任务的完成状态，UNIX/Linux 下的&nbsp;<code style="margin:1px 5px;line-height:1.8;vertical-align:middle;padding:0px 5px;font-family:'Courier New', sans-serif;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);">select、poll、epoll</code>&nbsp;就是干这个的；select调用是内核级别的，select轮询相对非阻塞的轮询的区别在于---前者可以等待多个socket，能实现同时对多个IO端口进行监听，当其中任何一个socket的数据准好了，就能返回进行可读，然后进程再进行recvform系统调用，将数据由内核拷贝到用户进程，当然这个过程是阻塞的。select或poll调用之后，会阻塞进程，与blocking IO阻塞不同在于，此时的select不是等到socket数据全部到达再处理, 而是有了一部分数据（网络上的数据是分组到达的）就会调用用户进程来处理。如何知道有一部分数据到达了呢？监视的事情交给了内核，内核负责数据到达的处理。</p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">我认为上面那句话中存在两个重要点：1.对多个socket进行监听，只要任何一个socket数据准备好就返回可读；2.不等一个socket数据全部到达再处理，而是一部分socket的数据到达了就通知用户进程；</p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">其实&nbsp;<code style="margin:1px 5px;line-height:1.8;vertical-align:middle;padding:0px 5px;font-family:'Courier New', sans-serif;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);">select、poll、epoll</code>&nbsp;的原理就是不断的遍历所负责的所有的socket完成状态，当某个socket有数据到达了，就返回可读并通知用户进程来处理；</p><h4 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:14px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);">2.3.2 优点和缺点</h4><ul style="margin-bottom:0px;margin-left:30px;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;">优点：能够同时处理多个连接，系统开销小，系统不需要创建新的额外进程或者线程，也不需要维护这些进程和线程的运行，降低了系统的维护工作量，节省了系统资源。</li><li style="margin-top:0px;margin-bottom:1em;margin-left:0px;padding:0px;">缺点：如果处理的连结数目不高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。（因为阻塞可以保证没有延迟，但是多路复用是处理先存在的数据，所以数据的顺序则不管，导致处理一个完整的任务的时间上有延迟）</li></ul><h4 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:14px;color:rgb(51,51,51);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);">2.3.3 同步非阻塞和多线程＋同步阻塞</h4><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">高并发的程序一般使用同步非阻塞方式而非多线程 + 同步阻塞方式。要理解这一点，首先要扯到并发和并行的区别。比如去某部门办事需要依次去几个窗口，办事大厅里的人数就是并发数，而窗口个数就是并行度。也就是说并发数是指同时进行的任务数（如同时服务的 HTTP 请求），而并行数是可以同时工作的物理资源数量（如 CPU 核数）。通过合理调度任务的不同阶段，并发数可以远远大于并行度，这就是区区几个 CPU 可以支持上万个用户并发请求的奥秘。在这种高并发的情况下，为每个任务（用户请求）创建一个进程或线程的开销非常大。而同步非阻塞方式可以把多个 IO 请求丢到后台去，这就可以在一个进程里服务大量的并发 IO 请求。</p><h3 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:16px;line-height:1.5;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);"><a name="t6"></a>2.4 信号驱动式I/O模型</h3><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><img src="http://odwv9d2u8.bkt.clouddn.com/17-4-12/66043283-file_1492002950669_22bd.png" style="padding:0px;border:0px;max-width:700px;" alt=""></p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">首先开启套接字的信号驱动式IO功能，并且通过&nbsp;<code style="margin:1px 5px;line-height:1.8;vertical-align:middle;padding:0px 5px;font-family:'Courier New', sans-serif;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);">sigaction</code>&nbsp;系统调用安装一个信号处理函数，该函数调用将立即返回，当前进程没有被阻塞，继续工作；当数据报准备好的时候，内核则为该进程产生&nbsp;<code style="margin:1px 5px;line-height:1.8;vertical-align:middle;padding:0px 5px;font-family:'Courier New', sans-serif;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);">SIGIO</code>&nbsp;的信号，随后既可以在信号处理函数中调用&nbsp;<code style="margin:1px 5px;line-height:1.8;vertical-align:middle;padding:0px 5px;font-family:'Courier New', sans-serif;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);">recvfrom</code>&nbsp;读取数据报，并且通知主循环数据已经准备好等待处理，也可以通知主循环让它读取数据报；（其实就是一个待读取的通知和待处理的通知）；</p><h3 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:16px;line-height:1.5;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);"><a name="t7"></a>2.5 异步式I/O模型</h3><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><img src="http://odwv9d2u8.bkt.clouddn.com/17-4-12/75136497-file_1492004375006_bcbe.png" style="padding:0px;border:0px;max-width:700px;" alt=""></p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);">我们调用&nbsp;<code style="margin:1px 5px;line-height:1.8;vertical-align:middle;padding:0px 5px;font-family:'Courier New', sans-serif;background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);">aio_read</code>&nbsp;函数，给内核传递描述符、缓冲区指针、缓冲区大小和文件偏移，并且告诉内核当整个操作完成时如何通知我们。该函数调用后立即返回，不被阻塞；</p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><img src="https://img-blog.csdn.net/20180508162059790?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NhaXNvbmdjaGVuZ19nb29k/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br></p><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"></p><h3 style="margin-top:10px;margin-bottom:10px;padding:0px;font-size:16px;line-height:1.5;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;text-align:left;background-color:rgb(255,255,255);"><a name="t8"></a>2.6 比较</h3><p style="margin:10px auto;color:rgb(0,0,0);font-family:'Helvetica Neue', Helvetica, Verdana, Arial, sans-serif;font-size:14px;text-align:left;background-color:rgb(255,255,255);"><img src="http://odwv9d2u8.bkt.clouddn.com/17-4-12/48821302-file_1492005018721_d9f5.png" style="padding:0px;border:0px;max-width:700px;" alt=""></p>参考文章：https://www.cnblogs.com/George1994/p/6702084.html          </div>
                  </div>
]]></content>
  </entry>
  <entry>
    <title>浅谈select，poll，epoll</title>
    <url>/2019/11/18/%E6%B5%85%E8%B0%88select%EF%BC%8Cpoll%EF%BC%8Cepoll/</url>
    <content><![CDATA[<div class="postBody">
            <div id="cnblogs_post_body" class="blogpost-body"><p>　　<span>  select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。<span style="color: #ff0000;"><strong>但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的</strong></span>，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</span>关于这三种IO多路复用的用法，前面三篇总结写的很清楚，并用服务器回射echo程序进行了测试。连接如下所示：</p>
<p>select：<a href="http://www.cnblogs.com/Anker/archive/2013/08/14/3258674.html" target="_blank" rel="noopener">http://www.cnblogs.com/Anker/archive/2013/08/14/3258674.html</a></p>
<p>poll：<a href="http://www.cnblogs.com/Anker/archive/2013/08/15/3261006.html" target="_blank" rel="noopener">http://www.cnblogs.com/Anker/archive/2013/08/15/3261006.html</a></p>
<p>epoll：<a href="http://www.cnblogs.com/Anker/archive/2013/08/17/3263780.html" target="_blank" rel="noopener">http://www.cnblogs.com/Anker/archive/2013/08/17/3263780.html</a></p>
<p>　　今天对这三种IO多路复用进行对比，参考网上和书上面的资料，整理如下：</p>
<p><strong>1、select实现</strong></p>
<p><span style="color: #0000ff;"><strong>select的调用过程如下所示：</strong></span></p>
<p><strong><img src="https://images0.cnblogs.com/blog/305504/201308/17201205-8ac47f1f1fcd4773bd4edd947c0bb1f4.png" alt=""></strong></p>
<p>（1）使用copy_from_user从用户空间拷贝fd_set到内核空间</p>
<p>（2）注册回调函数__pollwait</p>
<p>（3）遍历所有fd，调用其对应的poll方法（对于socket，这个poll方法是sock_poll，sock_poll根据情况会调用到tcp_poll,udp_poll或者datagram_poll）</p>
<p>（4）以tcp_poll为例，其核心实现就是__pollwait，也就是上面注册的回调函数。</p>
<p>（5）__pollwait的主要工作就是把current（当前进程）挂到设备的等待队列中，不同的设备有不同的等待队列，对于tcp_poll来说，其等待队列是sk-&gt;sk_sleep（注意把进程挂到等待队列中并不代表进程已经睡眠了）。在设备收到一条消息（网络设备）或填写完文件数据（磁盘设备）后，会唤醒设备等待队列上睡眠的进程，这时current便被唤醒了。</p>
<p>（6）poll方法返回时会返回一个描述读写操作是否就绪的mask掩码，根据这个mask掩码给fd_set赋值。</p>
<p>（7）如果遍历完所有的fd，还没有返回一个可读写的mask掩码，则会调用schedule_timeout是调用select的进程（也就是current）进入睡眠。当设备驱动发生自身资源可读写后，会唤醒其等待队列上睡眠的进程。如果超过一定的超时时间（schedule_timeout指定），还是没人唤醒，则调用select的进程会重新被唤醒获得CPU，进而重新遍历fd，判断有没有就绪的fd。</p>
<p>（8）把fd_set从内核空间拷贝到用户空间。</p>
<p><strong>总结：</strong></p>
<p><span style="color: #ff0000;"><strong>select的几大缺点：</strong></span></p>
<p><span style="color: #ff0000;"><strong>（1）每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大</strong></span></p>
<p><span style="color: #ff0000;"><strong>（2）同时每次调用select都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大</strong></span></p>
<p><span style="color: #ff0000;"><strong>（3）select支持的文件描述符数量太小了，默认是1024</strong></span></p>
<p><strong>2 poll实现</strong></p>
<p>　　poll的实现和select非常相似，只是描述fd集合的方式不同，poll使用pollfd结构而不是select的fd_set结构，其他的都差不多。</p>
<p>关于select和poll的实现分析，可以参考下面几篇博文：</p>
<p><a href="http://blog.csdn.net/lizhiguo0532/article/details/6568964#comments" target="_blank" rel="noopener">http://blog.csdn.net/lizhiguo0532/article/details/6568964#comments</a></p>
<p><a href="http://blog.csdn.net/lizhiguo0532/article/details/6568968" target="_blank" rel="noopener">http://blog.csdn.net/lizhiguo0532/article/details/6568968</a></p>
<p><a href="http://blog.csdn.net/lizhiguo0532/article/details/6568969" target="_blank" rel="noopener">http://blog.csdn.net/lizhiguo0532/article/details/6568969</a></p>
<p><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-edntwk/index.html?ca=drs-" target="_blank" rel="noopener">http://www.ibm.com/developerworks/cn/linux/l-cn-edntwk/index.html?ca=drs-</a></p>
<p><a href="http://linux.chinaunix.net/techdoc/net/2009/05/03/1109887.shtml" target="_blank" rel="noopener">http://linux.chinaunix.net/techdoc/net/2009/05/03/1109887.shtml</a></p>
<p><strong>3、epoll</strong></p>
<p>　　epoll既然是对select和poll的改进，就应该能避免上述的三个缺点。那epoll都是怎么解决的呢？在此之前，我们先看一下epoll和select和poll的调用接口上的不同，select和poll都只提供了一个函数——select或者poll函数。而epoll提供了三个函数，epoll_create,epoll_ctl和epoll_wait，epoll_create是创建一个epoll句柄；epoll_ctl是注册要监听的事件类型；epoll_wait则是等待事件的产生。</p>
<p>　　对于第一个缺点，epoll的解决方案在epoll_ctl函数中。每次注册新的事件到epoll句柄中时（在epoll_ctl中指定EPOLL_CTL_ADD），会把所有的fd拷贝进内核，而不是在epoll_wait的时候重复拷贝。epoll保证了每个fd在整个过程中只会拷贝一次。</p>
<p>　　对于第二个缺点，epoll的解决方案不像select或poll一样每次都把current轮流加入fd对应的设备等待队列中，而只在epoll_ctl时把current挂一遍（这一遍必不可少）并为每个fd指定一个回调函数，当设备就绪，唤醒等待队列上的等待者时，就会调用这个回调函数，而这个回调函数会把就绪的fd加入一个就绪链表）。epoll_wait的工作实际上就是在这个就绪链表中查看有没有就绪的fd（利用schedule_timeout()实现睡一会，判断一会的效果，和select实现中的第7步是类似的）。</p>
<p><span>　　对于第三个缺点，epoll没有这个限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左右，具体数目可以cat /proc/sys/fs/file-max察看,一般来说这个数目和系统内存关系很大。</span></p>
<p><strong>总结：</strong></p>
<p>（1）select，poll实现需要自己不断轮询所有fd集合，直到设备就绪，期间可能要睡眠和唤醒多次交替。而epoll其实也需要调用epoll_wait不断轮询就绪链表，期间也可能多次睡眠和唤醒交替，但是它是设备就绪时，调用回调函数，把就绪fd放入就绪链表中，并唤醒在epoll_wait中进入睡眠的进程。虽然都要睡眠和交替，但是select和poll在“醒着”的时候要遍历整个fd集合，而epoll在“醒着”的时候只要判断一下就绪链表是否为空就行了，这节省了大量的CPU时间。这就是回调机制带来的性能提升。</p>
<p>（2）select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，并且要把current往设备等待队列中挂一次，而epoll只要一次拷贝，而且把current往等待队列上挂也只挂一次（在epoll_wait的开始，注意这里的等待队列并不是设备等待队列，只是一个epoll内部定义的等待队列）。这也能节省不少的开销。</p>
<p><strong>参考资料：</strong></p>
<p><a href="http://www.cnblogs.com/apprentice89/archive/2013/05/09/3070051.html" target="_blank" rel="noopener">http://www.cnblogs.com/apprentice89/archive/2013/05/09/3070051.html</a></p>
<p><a href="http://www.linuxidc.com/Linux/2012-05/59873p3.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2012-05/59873p3.htm</a></p>
<p><a href="http://xingyunbaijunwei.blog.163.com/blog/static/76538067201241685556302/" target="_blank" rel="noopener">http://xingyunbaijunwei.blog.163.com/blog/static/76538067201241685556302/</a></p>
<p><a href="http://blog.csdn.net/kkxgx/article/details/7717125" target="_blank" rel="noopener">http://blog.csdn.net/kkxgx/article/details/7717125</a></p>
<p><a href="https://banu.com/blog/2/how-to-use-epoll-a-complete-example-in-c/epoll-example.c" target="_blank" rel="noopener">https://banu.com/blog/2/how-to-use-epoll-a-complete-example-in-c/epoll-example.c</a></p>
]]></content>
  </entry>
  <entry>
    <title>6.824 Lab1 MapReduce解析与实现</title>
    <url>/2019/11/18/6.824%20Lab1%20MapReduce%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p> <strong>MapReduce, 批处理的典型之一。主要思想即“分而治之”，将一大批数据（一个大任务）分成多个子任务，分别进行运算（同时）（map），再将运算结果合起来（reduce）</strong><br><br>master: 负责任务调度<br><br>mapper: 执行各个子任务，map运算<br><br>reducer: 执行结果汇总，reduce运算</p></p>
<p>例：在K/V的wordCount中，源数据为一个大文件，每个mapper负责一部分文件的count，mapper的运算结果(intermediate K/Vs)再交由reducer进行汇总(merge)。<br>
本次实验中对MapReduce进行了基本的使用和简单的任务分发实现。</p>
<h2><a name="t0"></a>Part 1: Map/Reduce input and output</h2>
<p>task: 完成Map/Reduce的工作流程doMap()和doReduce部分</p>
<ul><li>doMap()：读取输入的文件，创建nReduce个中间结果文件，调用mapF函数并将其计算的K/V结果通过hash散列映射到各中间结果文件。</li>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//	copyright  by  sjt@hnu.edu.cn</span></span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doMap</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	jobName <span class="keyword">string</span>, // the name of the MapReduce job</span></span></span><br><span class="line"><span class="function"><span class="params">	mapTask <span class="keyword">int</span>, // which <span class="keyword">map</span> task this is</span></span></span><br><span class="line"><span class="function"><span class="params">	inFile <span class="keyword">string</span>,</span></span></span><br><span class="line">	nReduce int, // the number of reduce task that will be run ("R" in the paper)</span><br><span class="line">	mapF <span class="function"><span class="keyword">func</span><span class="params">(filename <span class="keyword">string</span>, contents <span class="keyword">string</span>)</span> []<span class="title">KeyValue</span>)</span> &#123;</span><br><span class="line">	<span class="comment">// openfile</span></span><br><span class="line">	inputFile , err := os.Open(inFile)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalln(<span class="string">"doMap : open file failure "</span> ,err)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//close file</span></span><br><span class="line">	<span class="keyword">defer</span> inputFile.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// read fileInfo</span></span><br><span class="line">	fileInfo , err := inputFile.Stat()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">		log.Fatalln(<span class="string">"daMap : getState failure "</span> ,err )</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//create  byte slice  to  prepare  for  Reading  inputFile  and  Writing  inputFile to this byte slice</span></span><br><span class="line">	data := <span class="built_in">make</span>([]<span class="keyword">byte</span>, fileInfo.Size() )</span><br><span class="line">	<span class="comment">//ignore  returned  first variable(n bytes which are  bytes of inputFile )</span></span><br><span class="line">	<span class="comment">//Read  inputFile and Write data of inputFile into data variable</span></span><br><span class="line">	_,err = inputFile.Read(data)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//read err</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalln(<span class="string">"doMap : Read inputFile failure "</span>,err)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//recall  mapF</span></span><br><span class="line"></span><br><span class="line">	KeyValues  := mapF(fileInfo.Name(), <span class="keyword">string</span>(data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//create  nReduce  intermediate  files</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span> ; i&lt;nReduce ; i++ &#123;</span><br><span class="line">		filename := reduceName(jobName,mapTask,i)</span><br><span class="line">		<span class="comment">//create a new empty  file  called  filename</span></span><br><span class="line">		reduceFile , err := os.Create(filename)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Fatalln(<span class="string">"doMap : reduceFile create failure "</span> ,err)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">defer</span>  reduceFile.Close()</span><br><span class="line"></span><br><span class="line">		enc := json.NewEncoder(reduceFile)</span><br><span class="line">		<span class="comment">// ignore  index of  k-v array</span></span><br><span class="line">		<span class="comment">// pick right k-v</span></span><br><span class="line">		<span class="keyword">for</span> _ , kv  :=  <span class="keyword">range</span> KeyValues &#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// pick right k-v for specific  reduceFile</span></span><br><span class="line">			<span class="comment">//%nReduce =  0 , 1 ,... ,nReduce -1</span></span><br><span class="line">			<span class="keyword">if</span> ihash(kv.Key)%(nReduce) == i &#123;</span><br><span class="line"></span><br><span class="line">				err := enc.Encode(&amp;kv)</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					log.Fatalln(<span class="string">"doMap: encode kv failure "</span> ,err)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<li>doReduce()：读取中间结果文件，将各K/V按K值存入一个字典变量kvMap，调用reduceF函数以对kvMap进行合并(wordCount无需额外操作)，并将reduceF的结果写入最终结果文件。<br><strong><em>重点</em></strong>：清楚操作流程，Go的文件操作</li>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*copyright by sjt@hnu.edu.cn</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doReduce</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	jobName <span class="keyword">string</span>, // the name of the whole MapReduce job</span></span></span><br><span class="line"><span class="function"><span class="params">	reduceTask <span class="keyword">int</span>, // which reduce task this is</span></span></span><br><span class="line"><span class="function"><span class="params">	outFile <span class="keyword">string</span>, // write the output here</span></span></span><br><span class="line">	nMap int, // the number of map tasks that were run ("M" in the paper)</span><br><span class="line">	reduceF <span class="function"><span class="keyword">func</span><span class="params">(key <span class="keyword">string</span>, values []<span class="keyword">string</span>)</span> <span class="title">string</span>,</span></span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//fmt.Printf("*******outFile : %s , nMap : %d *********" , outFile ,nMap)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		make map for (key , values )  to stores intermediate files</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		A =1</span></span><br><span class="line"><span class="comment">		A =2</span></span><br><span class="line"><span class="comment">		A =3 ...</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	kvMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]([]<span class="keyword">string</span> ))</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	read   files  like  mrtmp .test -x -x</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	operate  read all k-v in kvMap</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> m:= <span class="number">0</span>; m &lt;nMap; m++ &#123;</span><br><span class="line">		fileName := reduceName(jobName,m,reduceTask)</span><br><span class="line"></span><br><span class="line">		inPutFile ,err := os.Open(fileName)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">			log.Fatalln(<span class="string">"doReduce  inPutfile  open err "</span>,err)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">defer</span> inPutFile.Close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// read  KeyValue from inPutFile</span></span><br><span class="line">		dec := json.NewDecoder(inPutFile)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> dec.More() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">var</span> kv KeyValue</span><br><span class="line">			err := dec.Decode(&amp;kv)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				log.Fatalln(<span class="string">"doReduce kv decode err "</span>,err)</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			kvMap[kv.Key] = <span class="built_in">append</span>(kvMap[kv.Key],kv.Value)</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	sort   kvMap  by Key</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	keysOrdered := <span class="built_in">make</span>([]<span class="keyword">string</span> , <span class="number">0</span>, <span class="built_in">len</span>(kvMap))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> key , _ :=  <span class="keyword">range</span> kvMap &#123;</span><br><span class="line"></span><br><span class="line">		keysOrdered = <span class="built_in">append</span>(keysOrdered , key)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sort.Strings(keysOrdered)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	encoder output  part</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		outPutFile ,err := os.Create(outFile)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">			log.Fatalln(<span class="string">"doReduce  outPutFile generate err "</span>,err)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		enc := json.NewEncoder(outPutFile)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> _,key:= <span class="keyword">range</span> keysOrdered &#123;</span><br><span class="line"></span><br><span class="line">			err := enc.Encode(KeyValue&#123;key, reduceF(key, kvMap[key])&#125;)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				log.Fatalln( <span class="string">"doReduce encoder err"</span> ,err)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">defer</span> outPutFile.Close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</ul><h2><a name="t1"></a>Part 2: 实现单节点的wordCount</h2>
<p>task: 即实现task1中调用的mapF()和reduceF函数。</p>
<ul><li>mapF(): 将输入流(string)分割成单词并存入字典sliceKV{word: count}<br><code>func mapF(filename string, contents string) []mapreduce.KeyValue {... ...}</code>
</li>
<li>reduceF(): wordCount中的此函数无需额外操作。在doReduce()中将中间结果存入kvMap时即完成了合并。</li>
</ul><h2><a name="t2"></a>Part3: distributing MapReduce tasks</h2>
<p>task: 实现schedule.go文件，完成对多个worker进行map、reduce 任务的调度。</p>
<ul><li>registerChan: workers(RPC address)的channel，存储当前空闲可用的worker（registered worker）</li>
<li>taskChan: 记录未完成或失败的任务，和sync.WaitGroup共同使用，以便重新执行失败任务。<br>
具体实现如下：</li>
</ul><pre><code class="func hljs go"><ol class="hljs-ln" style="width:976px"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">var</span> ntasks <span class="hljs-keyword">int</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">var</span> n_other <span class="hljs-keyword">int</span> <span class="hljs-comment">// number of inputs (for reduce) or outputs (for map)</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">switch</span> phase {  <span class="hljs-comment">// 确定当前工作阶段，执行map还是reduce调度</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">case</span> mapPhase:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        ntasks = <span class="hljs-built_in">len</span>(mapFiles)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        n_other = nReduce</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">case</span> reducePhase:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        ntasks = nReduce</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        n_other = <span class="hljs-built_in">len</span>(mapFiles)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    fmt.Printf(<span class="hljs-string">"Schedule: %v %v tasks (%d I/Os)\n"</span>, ntasks, phase, n_other)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">var</span> wg sync.WaitGroup</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    taskChan := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">for</span> t := <span class="hljs-number">0</span>; t &lt; ntasks; t++ {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            wg.Add(<span class="hljs-number">1</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            taskChan &lt;- t</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        wg.Wait()  <span class="hljs-comment">// 直至ntasks个任务全完成</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-built_in">close</span>(taskChan)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">for</span> task := <span class="hljs-keyword">range</span> taskChan {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        addr := &lt;-registerChan  <span class="hljs-comment">// 取一空闲worker</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(j <span class="hljs-keyword">int</span>, addr <span class="hljs-keyword">string</span>)</span></span> {  <span class="hljs-comment">// 通过RPC调用执行任务</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            result := call(addr, <span class="hljs-string">"Worker.DoTask"</span>, DoTaskArgs{jobName, mapFiles[j], phase, j, n_other}, <span class="hljs-literal">nil</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            fmt.Println(<span class="hljs-string">"46 current: "</span>, j)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">if</span> result {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                wg.Done()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            } <span class="hljs-keyword">else</span> {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                taskChan &lt;- j  <span class="hljs-comment">// 该任务失败，需再次放入taskChan以便重新执行，直至成功</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            registerChan &lt;- addr  <span class="hljs-comment">// 执行完任务的worker放回registerChan，以继续执行其他任务 </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }(task, addr)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    wg.Wait()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    fmt.Printf(<span class="hljs-string">"Schedule: %v done\n"</span>, phase)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">}</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre>
<p><strong><em>重点：使用goroutine+channel+waitgroup进行协程同步和通信</em></strong></p>
<ul><li>goroutine: golang的性能保障，用户态的调度粒度，每个goroutine在用户内存中有自己的栈空间。</li>
<li>channel: 传递数据的管道，常用于存储各种中间结果，在复杂的逻辑处理中实用得不得了。</li>
<li>sync.Waitgroup: 等待一组协程的完成。类似任务队列的数据结构，任务完成会被移出，否则会阻塞当前执行线程。提供以下三个操作:
<ul><li>Add(): 等待的goroutine加一</li>
<li>Done(): 有一个任务完成，等待的goroutine减一</li>
<li>Wait(): 阻塞，直至所有任务完成</li>
</ul></li>
</ul></div>
            </div>
                  </di
]]></content>
  </entry>
  <entry>
    <title>Go语言并发编程-模拟shell命令的管道符</title>
    <url>/2019/11/18/Go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E6%A8%A1%E6%8B%9Fshell%E5%91%BD%E4%BB%A4%E7%9A%84%E7%AE%A1%E9%81%93%E7%AC%A6/</url>
    <content><![CDATA[<p><strong>simulate  shell command “ps aux  | grep  QQ”</strong></p>
<p>进程间通信（即IPC问题）是并发中最关键，重要的问题。</p>
<p>基本有三个大的解决方式</p>
<p>1：基于通信</p>
<ul>
<li>管道pipe</li>
<li>消息队列 message queue</li>
</ul>
<p>2：基于信号（唯一的异步I/O）</p>
<ul>
<li>信号 signal</li>
</ul>
<p>3:  基于同步</p>
<ul>
<li>信号量 semaphore</li>
</ul>
<p>现在介绍一种最简单的方式 ： <strong>管道</strong></p>
<p>eg：shell 中    “ |”    就是一个管道符</p>
<p>管道符是一种半双工的通信方式 ， 即一个进程的输出作为另一个进程的输入</p>
<p>管道符的实现如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//copyright by sjt@hnu.edu.cn</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// simulate  shell command "ps aux  | grep  QQ"</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"bytes"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"os/exec"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	cmd1 := exec.Command(<span class="string">"ps"</span>,<span class="string">"aux"</span>)</span><br><span class="line">	cmd2 := exec.Command(<span class="string">"grep"</span>,<span class="string">"QQ"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> outbuf1   bytes.Buffer</span><br><span class="line"></span><br><span class="line">	cmd1.Stdout = &amp;outbuf1</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := cmd1.Start() ; err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalln(<span class="string">"Error : cmd1 start err "</span>,err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := cmd1.Wait(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalln(<span class="string">"Error : cmd1 can not wait"</span>,err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> outbuf2  bytes.Buffer</span><br><span class="line"></span><br><span class="line">	cmd2.Stdin = &amp;outbuf1</span><br><span class="line"></span><br><span class="line">	cmd2.Stdout = &amp;outbuf2</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := cmd2.Start() ; err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalln(<span class="string">"Error : cmd2 start err "</span>,err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := cmd2.Wait(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalln(<span class="string">"Error : cmd2 can not wait"</span>,err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	fmt.Println(outbuf2.String())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>os/exec  是go的标准i/o包<br>代码中<br>第39行和第41行</p>
<pre><code>cmd2.Stdin = &amp;outbuf1

cmd2.Stdout = &amp;outbuf2</code></pre><p>表明了cmd1的输出作为cmd2的输入实现管道符的功能</p>
<p>最后一行</p>
<pre><code>fmt.Println(outbuf2.String())
转换为string类型显示在终端shell中</code></pre><p>结果如下：完全模拟了ps aux | grep  QQ   的shell 命令<br><img src="https://img-blog.csdnimg.cn/20190610200317844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>详解Linux I_O多路复用机制epoll及源码剖析</title>
    <url>/2019/11/18/%E8%AF%A6%E8%A7%A3Linux%20I_O%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E6%9C%BA%E5%88%B6epoll%E5%8F%8A%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</url>
    <content><![CDATA[<h1 id="一：内核知识介绍"><a href="#一：内核知识介绍" class="headerlink" title="一：内核知识介绍"></a>一：内核知识介绍</h1><h1 id="二：epoll机制简单介绍"><a href="#二：epoll机制简单介绍" class="headerlink" title="二：epoll机制简单介绍"></a>二：epoll机制简单介绍</h1><ul>
<li><h2 id="两种触发模式-LT，ET）"><a href="#两种触发模式-LT，ET）" class="headerlink" title="两种触发模式(LT，ET）"></a>两种触发模式(LT，ET）</h2>LT: level trigger<br>ET: edge trigger<h1 id="三：epoll源码完全解析注释"><a href="#三：epoll源码完全解析注释" class="headerlink" title="三：epoll源码完全解析注释"></a>三：epoll源码完全解析注释</h1></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>详解-同步和异步概念</title>
    <url>/2019/11/18/%E8%AF%A6%E8%A7%A3-%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>同步：当调用者发起一个请求，直到请求返回结果后，才进行下一步操作。<br>异步：当调用者发起一个请求，无需等待请求返回结果，可以继续执行后续操作。</p>
<p>二者区别：是否需要等待请求结果，才可以继续执行后续操作。</p>
]]></content>
  </entry>
  <entry>
    <title>详解操作系统-内核态和用户态</title>
    <url>/2019/11/18/%E8%AF%A6%E8%A7%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%86%85%E6%A0%B8%E6%80%81%E5%92%8C%E7%94%A8%E6%88%B7%E6%80%81/</url>
    <content><![CDATA[<h1 id="Linux进程的虚拟内存"><a href="#Linux进程的虚拟内存" class="headerlink" title="Linux进程的虚拟内存"></a>Linux进程的虚拟内存</h1><p>首先Linux有虚拟内存机制，每一个进程都有4GB的虚拟内存。<br><img src="https://img-blog.csdnimg.cn/20190616221600743.png" alt="在这里插入图片描述"><br>如图示<br>高1G内存，也就是3<del>4G内存是内核空间，放置内核代码和其他维护的数据。<br>低3G，也就是0</del>3G内存是用户空间</p>
<h1 id="内核态和用户态"><a href="#内核态和用户态" class="headerlink" title="内核态和用户态"></a>内核态和用户态</h1><p>用户态：当一个进程在执行自己的用户空间代码块时，处于用户态<br>内核态：当一个进程因为某些原因陷入内核空间，执行内核代码块时，处于内核态.</p>
<p>用户态-&gt;内核态<br>1）系统调用<br>如：fork<br>2）异常<br>如：<br>3）外部设备中断<br>如：如鼠标点击，点击完成后会向CPU发出中断信号，假设进程在用户态，cpu会暂停处理下一条指令，而去内核空间对应的中断处理程序执行后续的操作.<br>这样就是一次用户态到内核态的转变。</p>
<h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><p>inter x86 cpu架构有四种特权级 0-3<br>0级最高对应内核态<br>3级最低对应用户态</p>
]]></content>
  </entry>
  <entry>
    <title>大量CLOSE_WAIT状态的原因与解决方法</title>
    <url>/2019/11/18/%E5%A4%A7%E9%87%8FCLOSE_WAIT%E7%8A%B6%E6%80%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>原因：</p>
<h2 id="Server端在某些异常情况时，没有关闭Socket。"><a href="#Server端在某些异常情况时，没有关闭Socket。" class="headerlink" title="Server端在某些异常情况时，没有关闭Socket。"></a><strong>Server端在某些异常情况时，没有关闭Socket。</strong></h2><p>TCP套接字中<br>被动关闭的server端在接受到FIN后立即返回一个ACK报文，进入CLOSE_WAIT状态。<br><strong>应用程序层面</strong>来看，会是抛出一个SOCKET.ERROR。<br>抛出ERROR之后如果没有closesocket(),则会处于CLOSE_WAIT</p>
]]></content>
  </entry>
  <entry>
    <title>协程</title>
    <url>/2019/11/18/%E5%8D%8F%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="协程："><a href="#协程：" class="headerlink" title="协程："></a>协程：</h2><h2 id="（用户态的轻量级线程）"><a href="#（用户态的轻量级线程）" class="headerlink" title="（用户态的轻量级线程）"></a>（用户态的轻量级线程）</h2><p>在用户态中执行<br>1:任何时刻只有一个协程程序在运行。并且这个在运行的协程只有明确被要求挂起时才会被挂起。<br>2：传统的进程、线程是<strong>抢占式多任务</strong>，不可避免的线程同步问题，访问不同的资源还需要加锁以保证同步。<br>协程是<strong>协作式多任务</strong></p>
<p>优点</p>
<ul>
<li>无需线程上下文切换的开销</li>
<li>无需锁和处理同步问题<br>缺点：</li>
<li>协程本质上是单线程，无法单独利用多核cpu，需要与进程配合</li>
<li>进行阻塞操作如IO时会阻塞整个程序，这时候需要异步IO</li>
<li></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>C++多态</title>
    <url>/2019/11/18/C++%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<p>C++多态意味着调用成员函数时，会根据被调用函数的对象类型选择执行不同的函数<br>1：静态多态（编译时多态）：<br>基类实现多个派生类，派生类可以重载基类的函数<br>2：动态多态（运行时多态）：<br>用虚函数实现<br>虚函数是有virtual关键字的函数，若基类的函数是虚函数，则告诉编译器不要静态链接到该函数，根据指针指向的对象类型调用相应的函数。<br>在程序执行的任意时间点，根据所调用的对象类型来选择选择调用的函数。<br>实现多个类，但用相同的名称，根据指向的对象类型来选择调用的函数<br>纯虚函数(在基类中定义，不实现)<br>virtual int  functionName () = 0;</p>
]]></content>
  </entry>
  <entry>
    <title>C++内存管理</title>
    <url>/2019/11/18/C++%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>1：new delete<br>new 分配内存的同时还创建了对象<br>2：malloc  free<br>malloc（）函数只分配了内存，还需创建对象</p>
]]></content>
  </entry>
  <entry>
    <title>Go结构体里嵌套接口</title>
    <url>/2019/11/18/Go%E7%BB%93%E6%9E%84%E4%BD%93%E9%87%8C%E5%B5%8C%E5%A5%97%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>目的是当前结构体实例可以用所有实现了该接口的其他结构体来初始化（即使他们的属性不完全一致）</p>
]]></content>
  </entry>
  <entry>
    <title>Go语言书籍</title>
    <url>/2019/11/18/Go%E8%AF%AD%E8%A8%80%E4%B9%A6%E7%B1%8D/</url>
    <content><![CDATA[<p>《Go语言实战》<br><a href="http://item.jd.com/12136974.html" target="_blank" rel="noopener">http://item.jd.com/12136974.html</a></p>
<p>《Go语言圣经》<br><a href="https://yar999.gitbooks.io/gopl-zh/" target="_blank" rel="noopener">https://yar999.gitbooks.io/gopl-zh/</a></p>
<p>《Go语言标准库》<br><a href="https://github.com/polaris1119/The-Golang-Standard-Library-by-Example" target="_blank" rel="noopener">https://github.com/polaris1119/The-Golang-Standard-Library-by-Example</a></p>
<p>《Go语言并发之道》<br><a href="https://item.jd.com/12504386.html" target="_blank" rel="noopener">https://item.jd.com/12504386.html</a></p>
<p>《Go语言高级编程》<br><a href="https://github.com/chai2010/advanced-go-programming-book" target="_blank" rel="noopener">https://github.com/chai2010/advanced-go-programming-book</a></p>
<p>《Go2编程指南》<br><a href="https://github.com/chai2010/go2-book" target="_blank" rel="noopener">https://github.com/chai2010/go2-book</a></p>
<p>《Go并发编程实战（第2版）》<br><a href="https://item.jd.com/12063141.html" target="_blank" rel="noopener">https://item.jd.com/12063141.html</a></p>
<p>《Go语言核心36讲》<br><a href="https://time.geekbang.org/column/intro/112" target="_blank" rel="noopener">https://time.geekbang.org/column/intro/112</a></p>
]]></content>
  </entry>
  <entry>
    <title>poj题目分类</title>
    <url>/2019/11/15/poj%E9%A2%98%E7%9B%AE%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<article class="baidu_pl">
                <div id="article_content" class="article_content clearfix">
                                                <div class="article-copyright">
                <span class="creativecommons">
                <a rel="license noopener" href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank">
                    </a>
            <span>版权声明：本文为博主原创文章，遵循<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。 </span>
               <div class="article-source-link2222">
                    本文链接：<a href="https://blog.csdn.net/lyy289065406/article/details/78702485" target="_blank" rel="noopener">https://blog.csdn.net/lyy289065406/article/details/78702485</a>
                </div>
            </span>
                    </div>
                                                    <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">
                                        <div id="content_views" class="markdown_views prism-atelier-sulphurpool-light">
                    <!-- flowchart 箭头图标 勿删 -->
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
                    </svg>
                                            <h2 id="北大acm-poj试题分类"><a name="t0"></a><center>北大ACM - POJ试题分类</center></h2>

<p></p><center><em>—— By  EXP  2017-12-03 </em></center><p></p>

<hr>

<blockquote>
  <p><b>转载请注明出处： </b>by EXP <a href="http://exp-blog.com/2018/06/28/pid-38/" target="_blank" rel="nofollow noopener" data-token="dfd7f04a93fd115996f1865bbfdfb138">http://exp-blog.com/2018/06/28/pid-38/</a></p>
</blockquote>

<hr>

<blockquote>
  <p><b> 相关推荐文：</b> <br>
  <b>旧版POJ分类目录：</b>  <a href="http://exp-blog.com/2018/06/10/pid-136/" target="_blank" rel="nofollow noopener" data-token="d5d304641cc525840f6112a3de7561a0">http://exp-blog.com/2018/06/10/pid-136/</a> <br>
  <b>ACM绝版资源公开（ 参考书、模板、讲义、指导）：</b>  <a href="http://exp-blog.com/2018/07/11/pid-1777/" target="_blank" rel="nofollow noopener" data-token="cddc2502ae259673f9388e5bd880f7e9">http://exp-blog.com/2018/07/11/pid-1777/</a> <br>
   <b>ACM国家集训队论文集（1999-2009）：</b>  <a href="http://exp-blog.com/2018/07/12/pid-1809/" target="_blank" rel="nofollow noopener" data-token="3a79e6584927ac032a1f8060b4debba3">http://exp-blog.com/2018/07/12/pid-1809/</a> <br>
  <b>ACM测试数据合集：</b> <a href="http://exp-blog.com/2018/06/28/pid-1362/" target="_blank" rel="nofollow noopener" data-token="9c56d094603589a5c62127d32e147b1d">http://exp-blog.com/2018/06/28/pid-1362/</a> <br>
  <b>一位ACMer过来人的心得：</b> <a href="http://exp-blog.com/2018/06/13/pid-113/" target="_blank" rel="nofollow noopener" data-token="6190f99ed24028c753757fa25039afc8">http://exp-blog.com/2018/06/13/pid-113/</a></p>
</blockquote>

<hr>

<h3 id="1入门水题"><a name="t1"></a><font color="purple">1.入门水题</font></h3>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">可用于练手与增强自信</font></th>
</tr>
</thead>
<tbody><tr>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6642575" target="_blank" rel="nofollow noopener" data-token="ebfb18bc9b45e58cc7e19b208ef0eb81">POJ-1003</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6642577" target="_blank" rel="nofollow noopener" data-token="5bb5b9344eeaddc57b85ef1a6ec90bb3">POJ-1004</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6642579" target="_blank" rel="nofollow noopener" data-token="63e59d5d9d08a10ad85b151adaf5af87">POJ-1005</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6642580" target="_blank" rel="nofollow noopener" data-token="880eedc084a9637e00e3844195140825">POJ-1207</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6642582" target="_blank" rel="nofollow noopener" data-token="39ca75d4ace3f6ae946267779984b836">POJ-3299</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6642586" target="_blank" rel="nofollow noopener" data-token="89c639a4cd16a53db7b187e3b94181fa">POJ-2159</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6642591" target="_blank" rel="nofollow noopener" data-token="fc8dd06ff1834738d69787b0accb7f2d">POJ-1083</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6642594" target="_blank" rel="nofollow noopener" data-token="99f89919c13a8bf6d6739fa91c0fa366">POJ-3094</a></td>
</tr>
</tbody></table></div>


<hr>



<h3 id="2初级"><a name="t2"></a><font color="purple">2.初级</font></h3>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">2.1. 基本算法</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">枚举</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6642595" target="_blank" rel="nofollow noopener" data-token="d9210d39053062527e5ee8d7128f9a5f">POJ-1753</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6642597" target="_blank" rel="nofollow noopener" data-token="d66b728d382c5cac14183b89d37b78f4">POJ-2965</a></td>
</tr>
<tr>
  <td align="center">贪心</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6642599" target="_blank" rel="nofollow noopener" data-token="efcf3ad81716a2c86f783d60e993898f">POJ-1328</a>    <a href="http://blog.csdn.net/lyy289065406/article/details/6642603" target="_blank" rel="nofollow noopener" data-token="99c78c40f8fb0c8ead4ea200fdc53c20">POJ-2586</a></td>
</tr>
<tr>
  <td align="center">递归和分治法</td>
  <td align="center">-</td>
</tr>
<tr>
  <td align="center">递推</td>
  <td align="center">-</td>
</tr>
<tr>
  <td align="center">构造法</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6642766" target="_blank" rel="nofollow noopener" data-token="272195429e81bca432cec4541b6a287f">POJ-3295</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6642789" target="_blank" rel="nofollow noopener" data-token="6d6033a10fa9ed53bda1de14caa7c014">POJ-3239</a></td>
</tr>
<tr>
  <td align="center">模拟法</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6645413" target="_blank" rel="nofollow noopener" data-token="34cb4af9eb151d3e1ceb36a6f7ac0ddf">POJ-1008</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645420" target="_blank" rel="nofollow noopener" data-token="949cead69297ef04a29e9b03d9f9719f">POJ-1068</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645428" target="_blank" rel="nofollow noopener" data-token="5a8e6389d53ad65215f3d8a820564050">POJ-2632</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645434" target="_blank" rel="nofollow noopener" data-token="f75ef90c454b5b30351fe7eb7bce65f2">POJ-1573</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645445" target="_blank" rel="nofollow noopener" data-token="9684fec32893c13b19b09230ae85f314">POJ-2993</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645441" target="_blank" rel="nofollow noopener" data-token="c780d874fe7a4c656f4d15f2b804da98">POJ-2996</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645450" target="_blank" rel="nofollow noopener" data-token="152321b81ab37ddb88bf3c925f304ded">POJ-3087</a></td>
</tr>
<tr>
  <td align="center">高精度算法</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6645470" target="_blank" rel="nofollow noopener" data-token="6508de9f2a9588d55b84017b7401f6f1">21位大数的水仙花数</a>    <br><a href="http://blog.csdn.net/lyy289065406/article/details/6645478" target="_blank" rel="nofollow noopener" data-token="80ed1ead596d885b3a5787eaf73091d9">POJ-1001</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645487" target="_blank" rel="nofollow noopener" data-token="371f0d961ddb4e1aabded6b1d872e756">POJ-1503</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6642602" target="_blank" rel="nofollow noopener" data-token="c43e9d12fae4ba0f6e01d441db700257">POJ-2109</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645490" target="_blank" rel="nofollow noopener" data-token="17458d88c7f300b995cecd95b660c3a2">POJ-2389</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645495" target="_blank" rel="nofollow noopener" data-token="1de8c64d45d4a6a2fb73045a9b522be1">POJ-2602</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645499" target="_blank" rel="nofollow noopener" data-token="f2acde4646418e9ba5aec59e19c729fb">POJ-3982</a></td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">2.2. 图算法</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">图遍历（前序序列、中序序列、后序序列）</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6642593" target="_blank" rel="nofollow noopener" data-token="93ba0c832f81a2b67e38e89f0dc41d12">POJ-2255</a></td>
</tr>
<tr>
  <td align="center">最短路径算法<br>（dijkstra, bellman-ford, floyd, heap+dijkstra）</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6645778" target="_blank" rel="nofollow noopener" data-token="c0d423e89fa3067bc6968541902f25ba">POJ-1860</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645790" target="_blank" rel="nofollow noopener" data-token="4b63904b9ae720ff2002be98bccd12d2">POJ-3259</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645852" target="_blank" rel="nofollow noopener" data-token="4abe0f7989a706e4e2996d579a3e1c1c">POJ-1062</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645854" target="_blank" rel="nofollow noopener" data-token="7c2956ed9ca1f47da98a702045beda9e">POJ-2253</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645856" target="_blank" rel="nofollow noopener" data-token="877035750324627bab8283de9f2777ab">POJ-1125</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645857" target="_blank" rel="nofollow noopener" data-token="3a7541fef0e1d45a1f02b383d7316b25">POJ-2240</a></td>
</tr>
<tr>
  <td align="center">最小生成树算法（prim, kruskal）</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6645974" target="_blank" rel="nofollow noopener" data-token="f9944e36d77396d42fa006d2fb771bdf">POJ-1789</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645978" target="_blank" rel="nofollow noopener" data-token="ceba24d5ff1d57b7c42f24804b200b40">POJ-2485</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645982" target="_blank" rel="nofollow noopener" data-token="308d5cd7347229c9141b1b34102e6e96">POJ-1258</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6645991" target="_blank" rel="nofollow noopener" data-token="3448c43dfd2bda6961804ee37cab7913">POJ-3026</a></td>
</tr>
<tr>
  <td align="center">拓扑排序</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6645999" target="_blank" rel="nofollow noopener" data-token="083f6f165620a80924582821500a60b9">POJ-1094</a></td>
</tr>
<tr>
  <td align="center">二分图的最大匹配 （匈牙利算法）</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6646007" target="_blank" rel="nofollow noopener" data-token="69abffd71fd7b86cc0735e81d6f92096">POJ-3041</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647040" target="_blank" rel="nofollow noopener" data-token="6294c285ba9ba751303ab453341ea99a">POJ-3020</a></td>
</tr>
<tr>
  <td align="center">最大流的增广路算法（压入重标法、KM算法）</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6647060" target="_blank" rel="nofollow noopener" data-token="f07fd72ad60c27b0121f3e45d3982ca5">POJ-1459</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647080" target="_blank" rel="nofollow noopener" data-token="47c19f2a5d49f0491d5616dd7ab87756">POJ-3436</a></td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">2.3. 数据结构</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">串</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6673675" target="_blank" rel="nofollow noopener" data-token="123daf436f26f49f26a4735155865065">POJ-1016</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647256" target="_blank" rel="nofollow noopener" data-token="15fa01cdd790c3de096cd048ae3b20a8">POJ-1035</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647262" target="_blank" rel="nofollow noopener" data-token="41f547d7b194e22788569766dc47a53d">POJ-3080</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647292" target="_blank" rel="nofollow noopener" data-token="e4b1845fd73621cce8008b91c9ad7e00">POJ-1936</a></td>
</tr>
<tr>
  <td align="center">排序（快排、归并排、堆排）</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6647305" target="_blank" rel="nofollow noopener" data-token="950f6932f5f6ef0841c2602395c59a04">POJ-1007</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647318" target="_blank" rel="nofollow noopener" data-token="686f5ac189938c82bd14207d9627d878">POJ-2388</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647336" target="_blank" rel="nofollow noopener" data-token="0cb1a53c707a57117bf97a8e90c11580">POJ-1804</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647346" target="_blank" rel="nofollow noopener" data-token="0208f6e0ee9b5528ad63b26d8224945b">POJ-2299</a></td>
</tr>
<tr>
  <td align="center">并查集</td>
  <td align="center">-</td>
</tr>
<tr>
  <td align="center">高效查找法<br>（数的Hash、串的Hash、二分查找）</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6647348" target="_blank" rel="nofollow noopener" data-token="99a3c04242ad0a78d08c5b6dc0d3b757">POJ-1002</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647351" target="_blank" rel="nofollow noopener" data-token="78f687613300ef79b933cd2b82b1c598">POJ-3349</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647365" target="_blank" rel="nofollow noopener" data-token="c0037d784c79fdc23e8c4eb1ba0b3555">POJ-3274</a>   <a href="http://blog.csdn.net/lyy289065406/article/details/6647387" target="_blank" rel="nofollow noopener" data-token="a458ba41afb4bcd4f101667e0a4b8666">POJ-1840</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647405" target="_blank" rel="nofollow noopener" data-token="69d70f17f961cbca04e82e31b11e7e57">POJ-2002</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647410" target="_blank" rel="nofollow noopener" data-token="2875078981c93d3e1fcea3f67605ab0e">POJ-3432</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647413" target="_blank" rel="nofollow noopener" data-token="62e750ccfabbaacb6959e35fcab359f3">POJ-2503</a></td>
</tr>
<tr>
  <td align="center">哈夫曼树、优先队列</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6647423" target="_blank" rel="nofollow noopener" data-token="7f58b73a099aa8b3390e6accae6473e0">POJ-3253</a></td>
</tr>
<tr>
  <td align="center">堆</td>
  <td align="center">-</td>
</tr>
<tr>
  <td align="center">trie树（静态建树、动态建树）</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6647445" target="_blank" rel="nofollow noopener" data-token="c02fcdbe8f9d3b5b51fc0a166c81e4ed">POJ-2513</a></td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">2.4. 搜索</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">深度优先搜索DFS</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6647666" target="_blank" rel="nofollow noopener" data-token="a93669cdbd35604ba5fed3fc83662054">POJ-2488</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647668" target="_blank" rel="nofollow noopener" data-token="e8dabb2d82e8973ec2983383af374620">POJ-3083</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647671" target="_blank" rel="nofollow noopener" data-token="2f1c1808b48a14d3ba5bb9fda3bbc9bf">POJ-3009</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647674" target="_blank" rel="nofollow noopener" data-token="7fad6d1aa926536e48d9cfe506a6bade">POJ-1321</a></td>
</tr>
<tr>
  <td align="center">广度优先搜索BFS</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6647886" target="_blank" rel="nofollow noopener" data-token="cd6bcd083468447c5fa6c4e4899de0ad">POJ-3278</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647917" target="_blank" rel="nofollow noopener" data-token="8426fb4db46ffa749df5ba55e10b8c6e">POJ-1426</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647922" target="_blank" rel="nofollow noopener" data-token="b9799b16d1219b4a04a773d533751aae">POJ-3126</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647930" target="_blank" rel="nofollow noopener" data-token="0699209bba4478ce0e78b1a6e0715012">POJ-3414</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647938" target="_blank" rel="nofollow noopener" data-token="b0bbef64886110852f8e1ba715df46aa">POJ-2251</a></td>
</tr>
<tr>
  <td align="center">简单搜索技巧和剪枝</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6647948" target="_blank" rel="nofollow noopener" data-token="98c665629acaa7187e83e88283058edb">POJ-1010</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647955" target="_blank" rel="nofollow noopener" data-token="2b28ea23bf71903bf732603db704871e">POJ-2362</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647960" target="_blank" rel="nofollow noopener" data-token="d14e70f4e8ea17770f7f3ad0b017b4b6">POJ-1011</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647969" target="_blank" rel="nofollow noopener" data-token="00ba5cb5ba731380917646707e2b08b5">POJ-1416</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647977" target="_blank" rel="nofollow noopener" data-token="3085e75478149d4bd107b0cf0b6d403a">POJ-2676</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6647986" target="_blank" rel="nofollow noopener" data-token="033decf018d2b366b4342baf9273b349">POJ-1129</a></td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">2.5. 动态规划</font></th>
  <th align="center">-</th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">背包问题</td>
  <td align="center">-</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6648094" target="_blank" rel="nofollow noopener" data-token="0aa35a85e28985ba4c59e3d4fe979637">POJ-1837</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648102" target="_blank" rel="nofollow noopener" data-token="c38a1a33ccdd0d1df25c1d07b94e373f">POJ-1276</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6661449" target="_blank" rel="nofollow noopener" data-token="46a2e2de5033751c6d608f3dc3c5e148">POJ-1014</a></td>
</tr>
<tr>
  <td align="center">DP（动态规划）<br>可参考《刘汝佳：算法法艺术与信息学竞赛》<br>（黑书一）page 149</td>
  <td align="center">E[j] = opt{D+w(i,j)}</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6676781" target="_blank" rel="nofollow noopener" data-token="bccbfc54f805eb89b0849894c06f6e2f">POJ-1018</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648121" target="_blank" rel="nofollow noopener" data-token="b91f073d28e187e962f46f101fbaa490">POJ-3267</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648129" target="_blank" rel="nofollow noopener" data-token="215651153677b754aab3c265fb926d93">POJ-1836</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648131" target="_blank" rel="nofollow noopener" data-token="8645d69485a7aacc19f7b0a5f3d7bd28">POJ-1260</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648136" target="_blank" rel="nofollow noopener" data-token="a5448e6c5d1d790c877f9103444c6dde">POJ-2533</a></td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">最长公共子序列<br>E[i,j] = opt{D[i-1,j]+xi,D[i,j-1]+yj,D[i-1][j-1]+zij}</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6671105" target="_blank" rel="nofollow noopener" data-token="6a3fed944116e2de304edcc499c3a933">POJ-1015</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648150" target="_blank" rel="nofollow noopener" data-token="95be7cf82b9adb12e90ef6e5ebf9355b">POJ-3176</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648153" target="_blank" rel="nofollow noopener" data-token="034f8b20deab89a4783e1e40cb44a4eb">POJ-1163</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648156" target="_blank" rel="nofollow noopener" data-token="e3ceb79aa72b1b58636b332de915260d">POJ-1080</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648163" target="_blank" rel="nofollow noopener" data-token="5eed4f838af713a610eaaa1d70e369ba">POJ-1159</a></td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">最优二分检索树问题<br>C[i,j] = w[i,j]+opt{C[i,k-1]+C[k,j]}</td>
  <td align="center"></td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">2.6. 数学</font></th>
  <th align="center">-</th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">组合数学</td>
  <td align="center">加法原理和乘法原理</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">排列组合</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">递推关系</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6648444" target="_blank" rel="nofollow noopener" data-token="2468ea8d3905515887666b5a2c632a9b">POJ-1012</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648458" target="_blank" rel="nofollow noopener" data-token="304234bbdb48a4c923f83741b3f7b0e2">POJ-3252</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648492" target="_blank" rel="nofollow noopener" data-token="a71a968e2916d76c2917534cb4ee22bf">POJ-1850</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648501" target="_blank" rel="nofollow noopener" data-token="a025e6d7391de90f6758ecf9c3f61565">POJ-1496</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648504" target="_blank" rel="nofollow noopener" data-token="71611bf2b75b9704a97704cae7d1cfbe">POJ-1019</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648516" target="_blank" rel="nofollow noopener" data-token="7583ce6e08d4c2efe1ff03533440ee8e">POJ-1942</a></td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">逻辑推理</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6661421" target="_blank" rel="nofollow noopener" data-token="15d5606f4e6610036072cb48da337e28">POJ-1013</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6674366" target="_blank" rel="nofollow noopener" data-token="ea13b84c244bcaee26b42d6bba41e2c1">POJ-1017</a></td>
</tr>
<tr>
  <td align="center">数论</td>
  <td align="center">素数与整除问题</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6642587" target="_blank" rel="nofollow noopener" data-token="f1b12caf99fefd657f82623be003bdcd">POJ-2739</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6642589" target="_blank" rel="nofollow noopener" data-token="eab9d25173ad0ccd58992f421401a4da">POJ-2262</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6642592" target="_blank" rel="nofollow noopener" data-token="57736cd9ad40c3d47b1a3d3662e12036">POJ-3006</a></td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">进制位</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">同余模运算</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6648524" target="_blank" rel="nofollow noopener" data-token="019640350a2f4bb5ed0c4cabbef96afa">POJ-2305</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648530" target="_blank" rel="nofollow noopener" data-token="b4fe605388b26bdb2846f08e868ca61e">POJ-2635</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648537" target="_blank" rel="nofollow noopener" data-token="e76c0d88aec85d318efe790a4ce4346f">POJ-3292</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648539" target="_blank" rel="nofollow noopener" data-token="ce1c270ab2a7e2579f0e810c552aed6e">POJ-1845</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648546" target="_blank" rel="nofollow noopener" data-token="82ede839b65219443e1ae7b422e65517">POJ-2115</a></td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">中国余数定理<br>（扩展欧几里德、辗转相除法）</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6648551" target="_blank" rel="nofollow noopener" data-token="f2a9c6f894d198fe6a14e83db282e705">POJ-1006</a></td>
</tr>
<tr>
  <td align="center">计算方法</td>
  <td align="center">二分法求解单调函数</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6648554" target="_blank" rel="nofollow noopener" data-token="40f91ca8ac3711bf323c83cc7d9af411">POJ-3273</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648558" target="_blank" rel="nofollow noopener" data-token="e4c39fa43a6a9862151437f93911b611">POJ-3258</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648562" target="_blank" rel="nofollow noopener" data-token="fe90220f9b29078b73e5349d3176f159">POJ-1905</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648565" target="_blank" rel="nofollow noopener" data-token="d1ebf1c4e44a7bd9d2a3123f8162c98f">POJ-3122</a></td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">随机化算法</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6648571" target="_blank" rel="nofollow noopener" data-token="2d5d67b6a35c6f7118e006e9974e85c3">POJ-2531</a></td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">概率</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6648579" target="_blank" rel="nofollow noopener" data-token="779e38ec8a8d7b6875f262fbd1e86c4b">POJ-2151</a></td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">2.7. 计算几何学</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">几何公式</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center">叉积和点积的运用<br>（如线段相交的判定、点到线段的距离等）</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6648583" target="_blank" rel="nofollow noopener" data-token="d49a3c8652b0bdb505c29d8b591ebcfe">POJ-2031</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648585" target="_blank" rel="nofollow noopener" data-token="82a9c41c1cc889b03072b4718830c27f">POJ-1039</a></td>
</tr>
<tr>
  <td align="center">多边型的简单算法（求面积） 和 <br>相关判定（点在多边型内、多边型是否相交）</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6648592" target="_blank" rel="nofollow noopener" data-token="4936b868456e271dcfe63e7b67422b0f">POJ-1408</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648606" target="_blank" rel="nofollow noopener" data-token="cdcf489a06f22977e007618f1b84d8e3">POJ-1584</a></td>
</tr>
<tr>
  <td align="center">凸包</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6648614" target="_blank" rel="nofollow noopener" data-token="f48328c0227ab8f1d8ed374961c3bcb6">POJ-1696</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648617" target="_blank" rel="nofollow noopener" data-token="6dd23c3e996a9ac533f88477c9152adf">POJ-2187</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648622" target="_blank" rel="nofollow noopener" data-token="9c795c3f99f63b106147659fa8de87a3">POJ-1113</a></td>
</tr>
</tbody></table></div>


<hr>



<h3 id="3中级"><a name="t3"></a><font color="purple">3.中级</font></h3>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">3.1. 基本算法</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">C++的标准模版库的应用</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6648624" target="_blank" rel="nofollow noopener" data-token="0bb18391b56e85cf85a5533baeeb5ee0">POJ-3096</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648627" target="_blank" rel="nofollow noopener" data-token="8ba3e32e8fb793195c082cea72325b42">POJ-3007</a></td>
</tr>
<tr>
  <td align="center">较为复杂的模拟题的训练</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6648634" target="_blank" rel="nofollow noopener" data-token="12bf642e84eab797c9fb96a827e1785a">POJ-3393</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648640" target="_blank" rel="nofollow noopener" data-token="15b76eac4f92e8528e4087dd65463ee5">POJ-1472</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648650" target="_blank" rel="nofollow noopener" data-token="7b821278fe0714ea7b315f21220c9a64">POJ-3371</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648655" target="_blank" rel="nofollow noopener" data-token="bbbb4d76e2b2df6a1c3390e1019e9d7e">POJ-1027</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648663" target="_blank" rel="nofollow noopener" data-token="8a8948ca72c9a99388286c58701a5bcd">POJ-2706</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648671" target="_blank" rel="nofollow noopener" data-token="4b01991da0ec233292ec627b093600aa">POJ-1009</a></td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">3.2. 图算法</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">差分约束系统的建立和求解</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6648679" target="_blank" rel="nofollow noopener" data-token="b020f9a148ad58dcbdc44195f0e04c7e">POJ-1716</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648686" target="_blank" rel="nofollow noopener" data-token="3670bac75efa685263b44f53c0ed5cf6">POJ-1201</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6648688" target="_blank" rel="nofollow noopener" data-token="96b500cf4750f67b63cb65f7f7b3b9f1">POJ-2983</a></td>
</tr>
<tr>
  <td align="center">最小费用最大流</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6742534" target="_blank" rel="nofollow noopener" data-token="54f1682dcc6bd929ceaed3443cffcc58">POJ-2516</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6732762" target="_blank" rel="nofollow noopener" data-token="fd62fdf8d56ef17a83e5ca872108ff7e">POJ-2195</a></td>
</tr>
<tr>
  <td align="center">双连通分量</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6756821" target="_blank" rel="nofollow noopener" data-token="5c6d358d66766d0b3f03c14e946f4af0">POJ-2942</a></td>
</tr>
<tr>
  <td align="center">强连通分支及其缩点</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6764104" target="_blank" rel="nofollow noopener" data-token="bbe34a90423dce521e717d8998c2d3fd">POJ-2186</a></td>
</tr>
<tr>
  <td align="center">图的割边和割点</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6752662" target="_blank" rel="nofollow noopener" data-token="0010cf07c83de38f1a6e70fd629263a3">POJ-1523</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6762370" target="_blank" rel="nofollow noopener" data-token="29d020464d291235e9254147d165d49d">POJ-3352</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6762432" target="_blank" rel="nofollow noopener" data-token="0d44754d0446a04b78836437cd9151b3">POJ-3177</a></td>
</tr>
<tr>
  <td align="center">最小割模型、网络流规约</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6784658" target="_blank" rel="nofollow noopener" data-token="51dcb1b2ad528f7944764fe0bd43bbd5">POJ-3308</a></td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">3.3. 数据结构</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">线段树</td>
  <td align="center">POJ-2528  POJ-2828  POJ-2777  POJ-2886  POJ-2750</td>
</tr>
<tr>
  <td align="center">静态二叉检索树</td>
  <td align="center">POJ-2482  POJ-2352</td>
</tr>
<tr>
  <td align="center">树状树组</td>
  <td align="center">POJ-1195  POJ-3321</td>
</tr>
<tr>
  <td align="center">RMQ</td>
  <td align="center">POJ-3264  POJ-3368</td>
</tr>
<tr>
  <td align="center">并查集</td>
  <td align="center">POJ-1703  POJ-2492</td>
</tr>
<tr>
  <td align="center">KMP算法</td>
  <td align="center">POJ-1961  POJ-2406</td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">3.4. 搜索</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">最优化剪枝和可行性剪枝</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center">搜索的技巧和优化</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6683250" target="_blank" rel="nofollow noopener" data-token="e0db1847a2c98e6dc45c0363505a83ca">POJ-1020</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6689310" target="_blank" rel="nofollow noopener" data-token="3e16b0cecb18c99909caf015db3a28e3">POJ-3411</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6692382" target="_blank" rel="nofollow noopener" data-token="4d42b75ebc12a2e910646c5c8e1f889f">POJ-1724</a></td>
</tr>
<tr>
  <td align="center">记忆化搜索</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6698787" target="_blank" rel="nofollow noopener" data-token="716f9890fd5042b44e3f11b8542e85d7">POJ-3373</a>  <a href="http://blog.csdn.net/lyy289065406/article/details/6727035" target="_blank" rel="nofollow noopener" data-token="18946583f52255957dc3b6d3ff6dcccf">POJ-1691</a></td>
</tr>
<tr>
  <td align="center">搜索与状态压缩</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6648695" target="_blank" rel="nofollow noopener" data-token="735c4269792216c8362f1d39b53eb697">POJ-1184</a></td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">3.5. 动态规划</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">较复杂的动态规划<br>（如特别的旅行商问题等）</td>
  <td align="center">POJ-1191  POJ-1054  POJ-3280  POJ-2029  POJ-2948  POJ-1925  POJ-3034</td>
</tr>
<tr>
  <td align="center">记录状态的动态规划</td>
  <td align="center">POJ-3254  POJ-2411  POJ-1185</td>
</tr>
<tr>
  <td align="center">树型动态规划</td>
  <td align="center">POJ-2057  POJ-1947  POJ-2486  POJ-3140</td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">3.6. 数学</font></th>
  <th align="center">-</th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">组合数学</td>
  <td align="center">容斥原理</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">抽屉原理</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">置换群与Polya定理</td>
  <td align="center">POJ-1286  POJ-2409  POJ-3270  POJ-1026</td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">递推关系和母函数</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center">数论</td>
  <td align="center">高斯消元法</td>
  <td align="center">POJ-2947  POJ-1487  POJ-2065  POJ-1166  POJ-1222</td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">概率问题</td>
  <td align="center">POJ-3071  POJ-3440</td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">GCD（最大公约数）<br>LCM（最小公倍数）</td>
  <td align="center">POJ-3101</td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">中国余数定理<br>（扩展欧几里德、辗转相除法）</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center">计算方法</td>
  <td align="center">0/1分数规划</td>
  <td align="center">POJ-2976</td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">三分法求解单峰/单谷的极值</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">矩阵法</td>
  <td align="center">POJ-3150  POJ-3422  POJ-3070</td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">迭代逼近</td>
  <td align="center">POJ-3301</td>
</tr>
<tr>
  <td align="center">随机化算法</td>
  <td align="center"></td>
  <td align="center">POJ-3318  POJ-2454</td>
</tr>
<tr>
  <td align="center">杂题</td>
  <td align="center"></td>
  <td align="center">POJ-1870  POJ-3296  POJ-3286  POJ-1095</td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">3.7. 计算几何学</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">坐标离散化</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center">扫描线算法<br>（如求矩形的面积和周长，常和线段树或堆一起使用）</td>
  <td align="center">POJ-1765  POJ-1177  POJ-1151  POJ-3277  POJ-2280  POJ-3004</td>
</tr>
<tr>
  <td align="center">多边形的内核（半平面交）</td>
  <td align="center">POJ-3130  POJ-3335</td>
</tr>
<tr>
  <td align="center">几何工具的综合应用</td>
  <td align="center">POJ-1819  POJ-1066  POJ-2043  POJ-3227  POJ-2165  POJ-3429</td>
</tr>
</tbody></table></div>


<hr>



<h3 id="4高级"><a name="t4"></a><font color="purple">4.高级</font></h3>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">4.1. 基本算法</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">代码快速写成（精简但不失风格）</td>
  <td align="center"><a href="http://blog.csdn.net/lyy289065406/article/details/6746954" target="_blank" rel="nofollow noopener" data-token="6fd169d452541377586bfb61916d7cfa">POJ-2525</a>  POJ-1684  POJ-1421  POJ-1048  POJ-2050  POJ-3306</td>
</tr>
<tr>
  <td align="center">保证正确性和高效性</td>
  <td align="center">POJ-3434</td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">4.2. 图算法</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">度限制最小生成树 和 第K最短路</td>
  <td align="center">POJ-1639</td>
</tr>
<tr>
  <td align="center">最短路、最小生成树、二分图、最大流问题的相关理论<br>（主要是模型建立和求解）</td>
  <td align="center">POJ-3155  POJ-2112  POJ-1966  POJ-3281  POJ-1087  POJ-2289  POJ-3216  POJ-2446</td>
</tr>
<tr>
  <td align="center">最优比率生成树</td>
  <td align="center">POJ-2728</td>
</tr>
<tr>
  <td align="center">最小树形图</td>
  <td align="center">POJ-3164</td>
</tr>
<tr>
  <td align="center">次小生成树</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center">无向图、有向图的最小环</td>
  <td align="center"></td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">4.3. 数据结构</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">trie图的建立和应用</td>
  <td align="center">POJ-2778</td>
</tr>
<tr>
  <td align="center">LCA和RMQ问题：<br>LCA（最近公共祖先问题）<br>离线算法（并查集+dfs）<br>在线算法（RMQ+dfs）</td>
  <td align="center">POJ-1330</td>
</tr>
<tr>
  <td align="center">双端队列和应用<br>（维护一个单调的队列，常在动态规划中起到优化状态转移的目的）</td>
  <td align="center">POJ-2823</td>
</tr>
<tr>
  <td align="center">左偏树（可合并堆）</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center">后缀树</td>
  <td align="center">POJ-3415  POJ-3294</td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">4.4. 搜索</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">较麻烦的搜索题目训练</td>
  <td align="center">POJ-1069  POJ-3322  POJ-1475  POJ-1924  POJ-2049  POJ-3426</td>
</tr>
<tr>
  <td align="center">广搜优化<br>（利用M进制数存储状态、转化为串用hash表判重、按位压缩存储状态、双向广搜、A*算法）（RMQ+dfs）</td>
  <td align="center">POJ-1768  POJ-1184  POJ-1872  POJ-1324  POJ-2046  POJ-1482</td>
</tr>
<tr>
  <td align="center">深搜优化<br>（尽量用位运算、一定要加剪枝、函数参数尽可能少、层数不易过大、可以考虑双向搜索或者是轮换搜索、IDA*算法）</td>
  <td align="center">POJ-3131  POJ-2870  POJ-2286</td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">4.5. 动态规划</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">需要用数据结构优化的动态规划</td>
  <td align="center">POJ-2754  POJ-3378  POJ-3017</td>
</tr>
<tr>
  <td align="center">四边形不等式理论</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center">较难的状态DP</td>
  <td align="center">POJ-3133</td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">4.6. 数学</font></th>
  <th align="center">-</th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">组合数学</td>
  <td align="center">MoBius反演</td>
  <td align="center">POJ-2888  POJ-2154</td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">偏序关系理论</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center">计算方法</td>
  <td align="center">极大极小过程</td>
  <td align="center">POJ-3317  POJ-1085</td>
</tr>
<tr>
  <td align="center"></td>
  <td align="center">Nim问题</td>
  <td align="center"></td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">4.7. 计算几何学</font></th>
  <th align="center">-</th>
</tr>
</thead>
<tbody><tr>
  <td align="center">半平面求交</td>
  <td align="center">POJ-3384  POJ-2540</td>
</tr>
<tr>
  <td align="center">可视图的建立</td>
  <td align="center">POJ-2966</td>
</tr>
<tr>
  <td align="center">点集最小圆覆盖</td>
  <td align="center"></td>
</tr>
<tr>
  <td align="center">对踵点</td>
  <td align="center">POJ-2079</td>
</tr>
</tbody></table></div>


<hr>

<div class="table-box"><table>
<thead>
<tr>
  <th align="center"><font color="red">4.8. 综合题</font></th>
</tr>
</thead>
<tbody><tr>
  <td align="center">POJ-3109  POJ-1478  POJ-1462  POJ-2729  POJ-2048  POJ-3336  POJ-3315  POJ-2148  POJ-1263</td>
</tr>
</tbody></table></div>                                    </div>
                <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e44c3c0e64.css" rel="stylesheet">
                    </div>
    </article>
]]></content>
  </entry>
  <entry>
    <title>HDU 5901 超大素数快判</title>
    <url>/2019/11/15/HDU%205901%20%E8%B6%85%E5%A4%A7%E7%B4%A0%E6%95%B0%E5%BF%AB%E5%88%A4/</url>
    <content><![CDATA[<hr>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Meisell-Lehmer</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e6</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">bool</span> np[N];</span><br><span class="line"><span class="keyword">int</span> prime[N], pi[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getprime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    np[<span class="number">0</span>] = np[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    pi[<span class="number">0</span>] = pi[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!np[i]) prime[++cnt] = i;</span><br><span class="line">        pi[i] = cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i * prime[j] &lt; N; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            np[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)   <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> PM = <span class="number">2</span> * <span class="number">3</span> * <span class="number">5</span> * <span class="number">7</span> * <span class="number">11</span> * <span class="number">13</span> * <span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> phi[PM + <span class="number">1</span>][M + <span class="number">1</span>], sz[M + <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    getprime();</span><br><span class="line">    sz[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= PM; ++i)  phi[i][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sz[i] = prime[i] * sz[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= PM; ++j) phi[j][i] = phi[j][i - <span class="number">1</span>] - phi[j / prime[i]][i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sqrt2</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL r = (LL)<span class="built_in">sqrt</span>(x - <span class="number">0.1</span>);</span><br><span class="line">    <span class="keyword">while</span>(r * r &lt;= x)   ++r;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(r - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sqrt3</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL r = (LL)cbrt(x - <span class="number">0.1</span>);</span><br><span class="line">    <span class="keyword">while</span>(r * r * r &lt;= x)   ++r;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(r - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">getphi</span><span class="params">(LL x, <span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="number">0</span>)  <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span>(s &lt;= M)  <span class="keyword">return</span> phi[x % sz[s]][s] + (x / sz[s]) * phi[sz[s]][s];</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= prime[s]*prime[s])   <span class="keyword">return</span> pi[x] - s + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= prime[s]*prime[s]*prime[s] &amp;&amp; x &lt; N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> s2x = pi[sqrt2(x)];</span><br><span class="line">        LL ans = pi[x] - (s2x + s - <span class="number">2</span>) * (s2x - s + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = s + <span class="number">1</span>; i &lt;= s2x; ++i) ans += pi[x / prime[i]];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getphi(x, s - <span class="number">1</span>) - getphi(x / prime[s], s - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">getpi</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; N)   <span class="keyword">return</span> pi[x];</span><br><span class="line">    LL ans = getphi(x, pi[sqrt3(x)]) + pi[sqrt3(x)] - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pi[sqrt3(x)] + <span class="number">1</span>, ed = pi[sqrt2(x)]; i &lt;= ed; ++i) ans -= getpi(x / prime[i]) - i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">lehmer_pi</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; N)   <span class="keyword">return</span> pi[x];</span><br><span class="line">    <span class="keyword">int</span> a = (<span class="keyword">int</span>)lehmer_pi(sqrt2(sqrt2(x)));</span><br><span class="line">    <span class="keyword">int</span> b = (<span class="keyword">int</span>)lehmer_pi(sqrt2(x));</span><br><span class="line">    <span class="keyword">int</span> c = (<span class="keyword">int</span>)lehmer_pi(sqrt3(x));</span><br><span class="line">    LL sum = getphi(x, a) +(LL)(b + a - <span class="number">2</span>) * (b - a + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a + <span class="number">1</span>; i &lt;= b; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        LL w = x / prime[i];</span><br><span class="line">        sum -= lehmer_pi(w);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; c) <span class="keyword">continue</span>;</span><br><span class="line">        LL lim = lehmer_pi(sqrt2(w));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= lim; j++) sum -= lehmer_pi(w / prime[j]) - (j - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    LL n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,lehmer_pi(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>杭电ACM题目分类</title>
    <url>/2019/11/15/%E6%9D%AD%E7%94%B5ACM%E9%A2%98%E7%9B%AE%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<hr>
<div id="article_content" class="article_content clearfix">
                                    <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">
                                        <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">
                <div class="htmledit_views" id="content_views">

<p>按此做成就大神之路：</p>
<p>&nbsp;</p>
<p>1002 简单的大数<br>
1003 DP经典问题，最大连续子段和<br>
1004 简单题<br>
1005 找规律（循环点）<br>
1006 感觉有点BT的题，我到现在还没过<br>
1007 经典问题，最近点对问题，用分治<br>
1008 简单题<br>
1009 贪心<br>
1010 搜索题，剪枝很关键<br>
1011 <br>
1012 简单题<br>
1013 简单题（有个小陷阱）<br>
1014 简单题<br>
1015 可以看作搜索题吧<br>
1016 经典的搜索<br>
1017 简单数学题<br>
1018 简单数学题<br>
1019 简单数学题<br>
1020 简单的字符串处理<br>
1021 找规律的数学题<br>
1022 数据结构的题（栈的应用）<br>
1023 特殊的数（Catalan Number）<br>
1024 经典DP，最大M子段和<br>
1025 经典DP，最长递增子序列（要用NLogN的方法过）<br>
1026 搜索<br>
1027 数学题（或用STL）<br>
1028 经典问题，整数拆分，用母函数做<br>
1029 简单题（一般方法容易超时）<br>
1030 简单题，可用模拟过<br>
1031 简单题<br>
1032 简单题<br>
1033 模拟题<br>
1034 Candy Sharing Game<br>
1035 模拟题<br>
1036 简单题<br>
1037 简单题，不是一般的简单<br>
1038 简单题<br>
1039 字符串处理<br>
1040 简单题，排序<br>
1041 简单题，用大数<br>
1042 大数<br>
1043 经典搜索题，八数码问题 <br>
1044 稍微有点麻烦的搜索题<br>
1045 搜索题，可用匹配做<br>
1046 简单题<br>
1047 简单的大数 <br>
1048 简单字符串处理<br>
1049 简单题<br>
1050 贪心<br>
1051 经典贪心，也可以用DP<br>
1052 贪心<br>
1053 贪心，关于Huffman编码<br>
1054 二分匹配<br>
1055 二分匹配<br>
1056 简单题<br>
1057 模拟题<br>
1058 经典问题，丑数，DP<br>
1059 经典问题，可以用母函数或DP（不针对题目优化都会超时）<br>
1060 数学题<br>
1061 数学题<br>
1062 简单字符串处理<br>
1063 模拟大数<br>
1064 简单题<br>
1065 简单题<br>
1066 数学题，找规律<br>
1067 <br>
1068 经典二分匹配<br>
1069 经典DP<br>
1070 简单题<br>
1071 简单数学题<br>
1072 搜索<br>
1073 字符串处理<br>
1074 DP<br>
1075 字典树<br>
1076 简单题<br>
1077 <br>
1078 DP<br>
1079 博弈（DP）<br>
1080 DP<br>
1081 经典DP<br>
1082 简单题<br>
1083 二分匹配<br>
1084 简单题<br>
1085 母函数<br>
1086 简单几何题<br>
1087 简单DP<br>
1088 字符串处理<br>
1089~1096 （练习输入输出的8个题目）<br>
1097 简单数学题<br>
1098 数学题，注意找规律<br>
1099 数学题</p>
<p>模拟题, 枚举<br>
1002 1004 1013 1015 1017 1020 1022 1029 1031 1033 1034 1035 1036 1037 1039 1042 1047 1048 1049 1050 1057 1062 1063 1064 1070 1073 1075 1082 1083 1084 1088 1106 1107 1113 1117 1119 1128 1129 1144 1148 1157 1161 1170 1172 1177 1197 1200 1201 1202 1205 1209 1212(大数取模)
 1216（链表）1218 1219 1225 1228 1229 1230 1234 1235 1236 1237 1239 1250<br>
1256 1259 1262 1263 1265 1266 1276 1279 1282 1283 1287 1296 1302 1303 1304 1305 1306 1309 1311 1314<br>
复杂模拟</p>
<p>搜索，递归求解<br>
1010 1016 1026 1043(双广) 1044 (BFS+DFS) 1045 1067 1072 1104 1175 1180 1195 1208 1226 1238 1240 1241 1242 1258 1271 1312 1317<br>
博奕<br>
1079</p>
<p>动态规划<br>
1003 1024 1025 1028 1051 1058 1059 1069 1074 1078 1080 1081 1085 1087 1114 1158 1159 1160 1171 1176 1181 1203 1224 1227 1231 1244 1248 1253 1254 1283 1300</p>
<p>数学，递推，规律<br>
1005 1006 1012 1014 1018 1019 1021 1023 1027 1030 1032 1038 1041 1046 1059 1060 1061 1065 1066 1071(微积分) 1097 1098 1099 1100 1108 1110 1112 1124 1130 1131 1132 1134 1141 1143 1152 1155(物理题) 1163 1165 1178 1194 1196(lowbit) 1210 1214 1200 1221 1223 1249 1261
 1267 1273 1290 1291 1292 1294 1297 1313 1316<br>
数论<br>
1164 1211 1215 1222 1286 1299</p>
<p>计算几何<br>
1086 1115 1147<br>
贪心<br>
1009 1052 1055 1257</p>
<p>并查集<br>
1198 1213 1232 1272<br>
线段树,离散化<br>
1199 1255<br>
图论<br>
最短路相关的问题 1142 1162 1217 1301<br>
二分图问题 1054 1068 1150 1151 1281<br>
其他<br>
1053 (huffman) 1102(MST) 1116（欧拉回路） 1233(MST) 1269（强连通）<br>
数据结构<br>
1103（堆+模拟）1166（数状树组）1247 1251 1285（Topol） 1298<br>
汉诺塔系列<br>
1207<br>
最近顶点对 1007</p>
<p><br>
1500 DP<br>
1501 DP<br>
1502 DP or 记忆化<br>
1503 DP<br>
1504 模拟<br>
1505 DP<br>
1506 DP<br>
1507 2分匹配<br>
1508 记忆化容易点<br>
1509 模拟<br>
1510 DP<br>
1511 搜索可以过<br>
1512 左偏树<br>
1513 DP<br>
1514 DP<br>
1515 DFS<br>
1516 DP<br>
1517 博奕<br>
1518 搜索<br>
1519 DP（不确定）<br>
1520 树状DP<br>
1521 数学题，母函数什么的。其实都可以过<br>
1522 稳定婚姻<br>
1523 DP<br>
1524 博弈<br>
1525 博弈<br>
1526 Maxflow<br>
1527 博弈<br>
1528 2分匹配<br>
1529 简单题<br>
1530 最大团<br>
1531 差分约束<br>
1532 Maxflow 入门题<br>
1533 KM Or 最小费用流<br>
1534 差分约束<br>
1535 差分约束<br>
1536 博弈<br>
1537 模拟 加置换群的理论 CODE可以短些，其实没必要。。。<br>
1538 很有意思的题目。据说是Microsoft亚洲总裁面试的题目<br>
1539 搜索<br>
1540 线段树<br>
1541 树状数组<br>
1542 离散，线段树<br>
1543 线段树<br>
1544 简单的<br>
1545 DP</p>
<p>1546 搜索<br>
1547 模拟<br>
1548 模拟<br>
1551 2分答案<br>
1553<br>
1554<br>
1555 简单<br>
1556 技巧。数学<br>
1557 搜索<br>
1558 并查 + 线段判交<br>
1559 DP<br>
1560 减支 + 搜索<br>
1561 树状DP<br>
1562 暴力 between 1000 and 9999<br>
1563 简单<br>
1564 博弈。<br>
1565 状态DP<br>
1566 数学<br>
1567 模拟<br>
1568 大数<br>
1569 最小割<br>
1570 数学<br>
1571 最段路<br>
1572 搜索<br>
1573 数学<br>
1574 DP<br>
1575 2分<br>
1576 数论<br>
1577 模拟，处理精度<br>
1579 记忆化<br>
1580 DP<br>
1582 搜索<br>
1583 模拟<br>
1584 搜索<br>
1585<br>
1586<br>
1587 简单题目<br>
1591 模拟<br>
1592 简单<br>
1593 数学<br>
1594 数学<br>
1595 图论<br>
1596 图论<br>
1597 图论<br>
1598 图论<br>
1599 图论</p>
<p>&nbsp;</p>
<p>第二篇</p>
<p>&nbsp;</p>
<p>基础题：1000、1001、1004、1005、1008、1012、1013、1014、1017、1019、1021、1028、1029、1032、1037、1040、1048、1056、1058、1061、1070、1076、1089、1090、1091、1092、1093、1094、1095、1096、1097、1098、1106、1108、1157、1163、1164、1170、1194、1196、1197、1201、1202、1205、1219、1234、1235、1236、1248、1266、1279、1282、1283、1302、1303、1323、1326、1330、1334、1335、1339、1390、1391、1393、1395、1397、1405、1406、1407、1408、1412、1418、1420、1465、1491、1555、1562、1563、1570、1587、1673、1678、1708、1718、1720、1785、1799、1859、1862、1877、1898、1976、1977、1985、1994、2000、2001、2002、2003、2004、2005、2006、2007、2008、2009、2010、2011、2012、2013、2014、2015、2016、2017、2018、2019、2020、2021、2022、2023、2024、2025、2026、2027、2028、2029、2030、2031、2032、2033、2034、2035、2039、2040、2042、2043、2048、2049、2051、2053、2055、2056、2057、2060、2061、2071、2073、2075、2076、2078、2081、2083、2088、2090、2092、2093、2095、2096、2097、2098、2099、2101、2103、2106、2107、2109、2113、2114、2115、2123、2131、2132、2133、2135、2136、2137、2138、2139、2143、2148、2153、2156、2161、2162、2164、2178、2186、2192、2200、2201、2212、2304、2309、2317、2401、2500、2502、2503、2504、2519、2520、2521、2523、2524、2535、2537、2539、2547、2548、2549、2550、2551、2552、2555、2560、2561、2562、2566、2567、2568、2700、2710、</p>
<p><br>
DP：1003、10240、1029、1069、1074、1087、1114、1159、1160、1171、1176、1203、1231、1257、1260、1284、1421、1789、1978、2059、2084、2159、2191、2544、2571、2602、2709、</p>
<p>搜索：1010、1015、1016、1026、1072、1075、1175、1180、1181、1238、1239、1240、1241、1242、1253、1254、1312、1372、1548、1597、1671、1677、1728、1800、1983、2102、2141、2553、2563、2605、2612、2614、1616、2717</p>
<p>贪心：1009、1045、1049、1050、1051、1052、1257、1800、2037、2111、2124、2187、2391、2570</p>
<p>数学题：1018、1065、1071、1115、1141、1162、1212、1220、1492、1593、1701、1722、1798、1840、1999、2036、2080、2086、2089、2105、2108、2134、2303、2393、2438、2529、2547、2548、2552、2554、2601、2603、2701、</p>
<p>递推：1133、1143、1207、1249、1267、1284、1290、1297、1396、1992、1995、1996、2013、2014、2044、2045、2046、2047、2050、2064、2065、2067、2068、2070、2077、2085、2151、2154、2160、2190、2501、2512、2563、2569、2709、2716、</p>
<p>字符串：1020、1039、1043、1062、1073、1075、1088、1113、1161、1200、1251、1256、1288、1321、1328、1379、1804、1860、1982、1984、2017、2024、2025、2026、2027、2043、2052、2054、2072、2074、2087、2131、2137、2140、2163、2203、2206、2352、2500、2549、2564、2565、2567、2572、2609、2607、2707、2708、2719、2721、2723、</p>
<p>大数：1002、1042、1133、1250、1297、1715、1753、1865、2100、</p>
<p>胡搞：1022、1027、1030、1035、1128、1165、1209、1210、1215、1222、1228、1229、1230、1237、1259、1276、1286、1337、1342、1361、1370、1506、1577、1597、1702、1716、1727、1868、1870、1896、1981、1986、1987、1988、1997、1998、1999、2058、2062、2089、2090、2094、2104、2116、2117、2135、2175、2183、2184、2197、2303、2368、2370、2374、2511、2522、2527、2600、2615、2703、2711、2714、2715、2725、</p>
<p>博弈：1077、1404、1517、1524、1525、1527、1536、1564、1729、1730、1846、1847、1848、1849、1850、2147、2149、2176、2177、2188</p>
<p>母函数：1085、1171、1398、2079、2082、2110、2152、2189、2566、</p>
<p>hash：1264、1280、1425、1496、1800、2522、2600、<br></p>
                                    </div>
                    </div>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>MIT6.828——Lab1 Booting a PC</title>
    <url>/2019/11/15/MIT6.828%E2%80%94%E2%80%94Lab1%20Booting%20a%20PC/</url>
    <content><![CDATA[<hr>
<p>Preface：之前已经做了一部分MIT-6.828了，后来要考托福就搁置了，现在重新捡起来。<br>顺便把所有的博客迁移到我的域名<a href="http://www.shaojintian.cn下" target="_blank" rel="noopener">www.shaojintian.cn下</a></p>
<p>Sources:xv6 book &amp;&amp; xv6 source codes<br>Exercise1:</p>
<blockquote>
<p>看懂x86 的32bit汇编,参见xv6 book附录A</p>
</blockquote>
<p>Exercise2:</p>
<blockquote>
<p>Use GDB’ssi(Step Instruction) command to trace into the ROM BIOS               for a few more instructions, and try to guess what it might be doing. </p>
</blockquote>
<p>答案：依照提示使用GDB si</p>
<p>Exercise 3. </p>
<blockquote>
<p>阅读bootloader的源码，回答问题<br>1：At what point does the processor start executing 32-bit code? What exactly causes the switch from 16- to 32-bit mode?</p>
</blockquote>
<p>答案：<br><img src="https://img-blog.csdnimg.cn/20191017140951937.png" alt="在这里插入图片描述"><br>ljmp  to 0x7c32   从i8086-&gt;i386（16bit-&gt;32bit)</p>
<blockquote>
<p>2：What is the last instruction of the boot loader executed, and what is the first instruction of the kernel it just loaded?</p>
</blockquote>
<p>答案：<br>last instruction:<br>查阅xv6 book, boot loader call bootmain()  to call kernel and run kernel<br>所以去boot.asm 找bootmain的位置<br>然后去找此汇编中bootmain（）最后一条语句为<br>((void (*)(void)) (ELFHDR-&gt;e_entry))();<br>找到此语句汇编的指向为 </p>
<blockquote>
<p>call *0x10018</p>
</blockquote>
<p>kernel 第一个instruction：</p>
<p>从boot.asm找到最后一条指令的SI为0x7d6b<br>打上断点</p>
<p><img src="https://img-blog.csdnimg.cn/201910171434175.png" alt="~/obj/boot/boot.asm"><br><img src="https://img-blog.csdnimg.cn/20191017143350903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>movw $0x1234, 0x472</p>
</blockquote>
<p>反汇编<br>objdump -d obj/kern/kernel 验证了这个结果</p>
<blockquote>
<p>3：Where is the first instruction of the kernel?</p>
</blockquote>
<p>答案：<br>    0x10000c</p>
<blockquote>
<p>4：How does the boot loader decide how many sectors it must read in order to fetch the entire kernel from disk? Where does it find this information?</p>
</blockquote>
<p>答案：<br>    xv6 book chapter2  说明kernel是ELF文件<br>    kernel的大小包含在ELF的文件program  header中<br>    <img src="https://img-blog.csdnimg.cn/20191017144600260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>Exercise 4</strong><br>Download the code for pointers.c, run it, and make sure you understand where all of the printed values come from.</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>MIT</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine Learning —LinearModel</title>
    <url>/2018/11/19/Machine%20Learning%20%E2%80%94LinearModel/</url>
    <content><![CDATA[<hr>
<h2 id="Machine-Learning-—LinearModel"><a href="#Machine-Learning-—LinearModel" class="headerlink" title="Machine Learning —LinearModel"></a>Machine Learning —LinearModel</h2><p>Supervised Learning:<br>Basic topics are Classification and Regression.</p>
<p>Classification:</p>
<p>About linear model, it includes LinearSVC , LogisticRegression(a classifier not a regressor)， GaussianNaiveBayesClassifier (GuNBC), BernoulliNBC, MultinomialNBC , Decision Trees,Random Forests</p>
<p>First model LinearSVC:</p>
<p>parameters includes :</p>
<p>Regularization class: L1 or L2 .<br>L1 norm can decrease the coefficients to zero .But L2 can’t do that. L2 norm only can try to decrease the coefficients to close to zero.</p>
<p>So L1 norm can select the numbers of features , but L2 can’t.</p>
<p>Then,L1 style can increase the interpretability of this model,but lose some important features.</p>
<p>L2 maybe be pollued by meaningless features.</p>
<p>2.C:(learning rate)</p>
<p>C is about restrictive ability. If C is small , coefficients and intercept is be restricted to close to zero (whether it can be explicitly zero depends on L1 or L2)</p>
<p>else if C is high, restrictive ability is low.</p>
<p>Second model: LinearRegression</p>
<p>parameters :</p>
<p>1:Regularization class: L1 or L2 .</p>
<p>This is the same as above the first line.</p>
<p>2:alpha(learning rate)</p>
<p>alpha is opposite to C .If alpha is high , coefficients and intercept is be restricted to close to zero (whether it can be explicitly zero depends on L1 or L2)</p>
<p>else if alpha is low, restrictive ability is low.</p>
<p>Third model : Gussian Naive Bayes Classifier</p>
<p>paramerter:</p>
<p>1:alpha</p>
<p>Fourth model : Bernoulli Naive Bayes Classifier</p>
<p>paramerter:</p>
<p>1:alpha (controls the complexity of model)</p>
<p>ability:</p>
<p>Increase the smoothing performance of model via adding virtual many data points to datasets . Virtual data points contains all positive features .</p>
<p>When increase the alpha , the model will be smoother. So it will decrease the complexity of model . When decrease it , the model will be more complex.</p>
<p>Fourth model : Bernoulli Naive Bayes Classifier</p>
<p>paramerter:</p>
<p>1:alpha (controls the complexity of model) (It is the same as BernoulliNBC)</p>
<p>ability:</p>
<p>Increase the smoothing performance of model via adding virtual many data points to datasets . Virtual data points contains all positive features .</p>
<p>When increase the alpha , the model will be smoother. So it will decrease the complexity of model . When decrease it , the model will be more complex.</p>
<p>Fifth model: Decision Trees</p>
<p>parameters:</p>
<p>Advantages:</p>
<p>1: Easily Visualize .</p>
<p>Generate visualized decision trees to help non-experts to understand this model.</p>
<p>2:less influence about data or features types</p>
<p>Due to every feature is been processed separately , so whatever the data type is binary or continuous .</p>
<p>Disadvantages :</p>
<p>1:poor generalization ability</p>
<p>Easy to overfit ,even it has used pre-pruning. Because of it ,we usually to use ensembles of decision trees to decrease this influence based on decision trees(such as Random Forests and Gradient Boosted Decision Trees)</p>
<p>Sixth model :Random Forests:</p>
<p>Parameters:</p>
<p>1:n_estimator</p>
<p>decide the numbers of decision trees .</p>
<p>2:max_features</p>
<p>decide the max numbers of features .</p>
<p>Preprocessing:</p>
<p>For dataset:</p>
<p>Bootstrap Sample(自动采样）：</p>
<p>To explain it , if we have 100 data nodes ,we select randomly 100 times from this dataset to generate a new dataset which is as big as original dataset , after every time selection ,we don’t reduce the data node from original dataset .Clear?</p>
]]></content>
  </entry>
  <entry>
    <title>machine learning_instruction</title>
    <url>/2018/11/19/machine%20learning_instruction/</url>
    <content><![CDATA[<hr>
<p>机器学习简单来说是计算机通过对数据集的学习，对预测集的input找到正确的output。<br>笼统归为三步：<br>1：一系列实现任务的functions 形成 function set<br>2：可以评价这些functions的goodness<br>2：选择一个最佳的function解决task</p>
<p><img src="https://img-blog.csdn.net/20181020002058750?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5ODcxNDk4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
</search>
